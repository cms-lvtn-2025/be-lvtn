// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/thesis/thesis.proto

package thesis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThesisService_CreateMidterm_FullMethodName                = "/thesis.ThesisService/CreateMidterm"
	ThesisService_GetMidterm_FullMethodName                   = "/thesis.ThesisService/GetMidterm"
	ThesisService_UpdateMidterm_FullMethodName                = "/thesis.ThesisService/UpdateMidterm"
	ThesisService_DeleteMidterm_FullMethodName                = "/thesis.ThesisService/DeleteMidterm"
	ThesisService_ListMidterms_FullMethodName                 = "/thesis.ThesisService/ListMidterms"
	ThesisService_CreateFinal_FullMethodName                  = "/thesis.ThesisService/CreateFinal"
	ThesisService_GetFinal_FullMethodName                     = "/thesis.ThesisService/GetFinal"
	ThesisService_UpdateFinal_FullMethodName                  = "/thesis.ThesisService/UpdateFinal"
	ThesisService_DeleteFinal_FullMethodName                  = "/thesis.ThesisService/DeleteFinal"
	ThesisService_ListFinals_FullMethodName                   = "/thesis.ThesisService/ListFinals"
	ThesisService_CreateEnrollment_FullMethodName             = "/thesis.ThesisService/CreateEnrollment"
	ThesisService_GetEnrollment_FullMethodName                = "/thesis.ThesisService/GetEnrollment"
	ThesisService_UpdateEnrollment_FullMethodName             = "/thesis.ThesisService/UpdateEnrollment"
	ThesisService_DeleteEnrollment_FullMethodName             = "/thesis.ThesisService/DeleteEnrollment"
	ThesisService_ListEnrollments_FullMethodName              = "/thesis.ThesisService/ListEnrollments"
	ThesisService_CreateTopic_FullMethodName                  = "/thesis.ThesisService/CreateTopic"
	ThesisService_GetTopic_FullMethodName                     = "/thesis.ThesisService/GetTopic"
	ThesisService_UpdateTopic_FullMethodName                  = "/thesis.ThesisService/UpdateTopic"
	ThesisService_DeleteTopic_FullMethodName                  = "/thesis.ThesisService/DeleteTopic"
	ThesisService_ListTopics_FullMethodName                   = "/thesis.ThesisService/ListTopics"
	ThesisService_CreateTopicCouncil_FullMethodName           = "/thesis.ThesisService/CreateTopicCouncil"
	ThesisService_GetTopicCouncil_FullMethodName              = "/thesis.ThesisService/GetTopicCouncil"
	ThesisService_UpdateTopicCouncil_FullMethodName           = "/thesis.ThesisService/UpdateTopicCouncil"
	ThesisService_DeleteTopicCouncil_FullMethodName           = "/thesis.ThesisService/DeleteTopicCouncil"
	ThesisService_ListTopicCouncils_FullMethodName            = "/thesis.ThesisService/ListTopicCouncils"
	ThesisService_CreateTopicCouncilSupervisor_FullMethodName = "/thesis.ThesisService/CreateTopicCouncilSupervisor"
	ThesisService_GetTopicCouncilSupervisor_FullMethodName    = "/thesis.ThesisService/GetTopicCouncilSupervisor"
	ThesisService_UpdateTopicCouncilSupervisor_FullMethodName = "/thesis.ThesisService/UpdateTopicCouncilSupervisor"
	ThesisService_DeleteTopicCouncilSupervisor_FullMethodName = "/thesis.ThesisService/DeleteTopicCouncilSupervisor"
	ThesisService_ListTopicCouncilSupervisors_FullMethodName  = "/thesis.ThesisService/ListTopicCouncilSupervisors"
	ThesisService_CreateGradeReview_FullMethodName            = "/thesis.ThesisService/CreateGradeReview"
	ThesisService_GetGradeReview_FullMethodName               = "/thesis.ThesisService/GetGradeReview"
	ThesisService_UpdateGradeReview_FullMethodName            = "/thesis.ThesisService/UpdateGradeReview"
	ThesisService_DeleteGradeReview_FullMethodName            = "/thesis.ThesisService/DeleteGradeReview"
	ThesisService_ListGradeReviews_FullMethodName             = "/thesis.ThesisService/ListGradeReviews"
)

// ThesisServiceClient is the client API for ThesisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============= Service =============
type ThesisServiceClient interface {
	// Midterm
	CreateMidterm(ctx context.Context, in *CreateMidtermRequest, opts ...grpc.CallOption) (*CreateMidtermResponse, error)
	GetMidterm(ctx context.Context, in *GetMidtermRequest, opts ...grpc.CallOption) (*GetMidtermResponse, error)
	UpdateMidterm(ctx context.Context, in *UpdateMidtermRequest, opts ...grpc.CallOption) (*UpdateMidtermResponse, error)
	DeleteMidterm(ctx context.Context, in *DeleteMidtermRequest, opts ...grpc.CallOption) (*DeleteMidtermResponse, error)
	ListMidterms(ctx context.Context, in *ListMidtermsRequest, opts ...grpc.CallOption) (*ListMidtermsResponse, error)
	// Final
	CreateFinal(ctx context.Context, in *CreateFinalRequest, opts ...grpc.CallOption) (*CreateFinalResponse, error)
	GetFinal(ctx context.Context, in *GetFinalRequest, opts ...grpc.CallOption) (*GetFinalResponse, error)
	UpdateFinal(ctx context.Context, in *UpdateFinalRequest, opts ...grpc.CallOption) (*UpdateFinalResponse, error)
	DeleteFinal(ctx context.Context, in *DeleteFinalRequest, opts ...grpc.CallOption) (*DeleteFinalResponse, error)
	ListFinals(ctx context.Context, in *ListFinalsRequest, opts ...grpc.CallOption) (*ListFinalsResponse, error)
	// Enrollment
	CreateEnrollment(ctx context.Context, in *CreateEnrollmentRequest, opts ...grpc.CallOption) (*CreateEnrollmentResponse, error)
	GetEnrollment(ctx context.Context, in *GetEnrollmentRequest, opts ...grpc.CallOption) (*GetEnrollmentResponse, error)
	UpdateEnrollment(ctx context.Context, in *UpdateEnrollmentRequest, opts ...grpc.CallOption) (*UpdateEnrollmentResponse, error)
	DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentRequest, opts ...grpc.CallOption) (*DeleteEnrollmentResponse, error)
	ListEnrollments(ctx context.Context, in *ListEnrollmentsRequest, opts ...grpc.CallOption) (*ListEnrollmentsResponse, error)
	// Topic
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error)
	UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdateTopicResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	// TopicCouncil
	CreateTopicCouncil(ctx context.Context, in *CreateTopicCouncilRequest, opts ...grpc.CallOption) (*CreateTopicCouncilResponse, error)
	GetTopicCouncil(ctx context.Context, in *GetTopicCouncilRequest, opts ...grpc.CallOption) (*GetTopicCouncilResponse, error)
	UpdateTopicCouncil(ctx context.Context, in *UpdateTopicCouncilRequest, opts ...grpc.CallOption) (*UpdateTopicCouncilResponse, error)
	DeleteTopicCouncil(ctx context.Context, in *DeleteTopicCouncilRequest, opts ...grpc.CallOption) (*DeleteTopicCouncilResponse, error)
	ListTopicCouncils(ctx context.Context, in *ListTopicCouncilsRequest, opts ...grpc.CallOption) (*ListTopicCouncilsResponse, error)
	// TopicCouncilSupervisor
	CreateTopicCouncilSupervisor(ctx context.Context, in *CreateTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*CreateTopicCouncilSupervisorResponse, error)
	GetTopicCouncilSupervisor(ctx context.Context, in *GetTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*GetTopicCouncilSupervisorResponse, error)
	UpdateTopicCouncilSupervisor(ctx context.Context, in *UpdateTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*UpdateTopicCouncilSupervisorResponse, error)
	DeleteTopicCouncilSupervisor(ctx context.Context, in *DeleteTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*DeleteTopicCouncilSupervisorResponse, error)
	ListTopicCouncilSupervisors(ctx context.Context, in *ListTopicCouncilSupervisorsRequest, opts ...grpc.CallOption) (*ListTopicCouncilSupervisorsResponse, error)
	// GradeReview
	CreateGradeReview(ctx context.Context, in *CreateGradeReviewRequest, opts ...grpc.CallOption) (*CreateGradeReviewResponse, error)
	GetGradeReview(ctx context.Context, in *GetGradeReviewRequest, opts ...grpc.CallOption) (*GetGradeReviewResponse, error)
	UpdateGradeReview(ctx context.Context, in *UpdateGradeReviewRequest, opts ...grpc.CallOption) (*UpdateGradeReviewResponse, error)
	DeleteGradeReview(ctx context.Context, in *DeleteGradeReviewRequest, opts ...grpc.CallOption) (*DeleteGradeReviewResponse, error)
	ListGradeReviews(ctx context.Context, in *ListGradeReviewsRequest, opts ...grpc.CallOption) (*ListGradeReviewsResponse, error)
}

type thesisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThesisServiceClient(cc grpc.ClientConnInterface) ThesisServiceClient {
	return &thesisServiceClient{cc}
}

func (c *thesisServiceClient) CreateMidterm(ctx context.Context, in *CreateMidtermRequest, opts ...grpc.CallOption) (*CreateMidtermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMidtermResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateMidterm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetMidterm(ctx context.Context, in *GetMidtermRequest, opts ...grpc.CallOption) (*GetMidtermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMidtermResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetMidterm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateMidterm(ctx context.Context, in *UpdateMidtermRequest, opts ...grpc.CallOption) (*UpdateMidtermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMidtermResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateMidterm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteMidterm(ctx context.Context, in *DeleteMidtermRequest, opts ...grpc.CallOption) (*DeleteMidtermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMidtermResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteMidterm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListMidterms(ctx context.Context, in *ListMidtermsRequest, opts ...grpc.CallOption) (*ListMidtermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMidtermsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListMidterms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateFinal(ctx context.Context, in *CreateFinalRequest, opts ...grpc.CallOption) (*CreateFinalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFinalResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateFinal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetFinal(ctx context.Context, in *GetFinalRequest, opts ...grpc.CallOption) (*GetFinalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFinalResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetFinal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateFinal(ctx context.Context, in *UpdateFinalRequest, opts ...grpc.CallOption) (*UpdateFinalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFinalResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateFinal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteFinal(ctx context.Context, in *DeleteFinalRequest, opts ...grpc.CallOption) (*DeleteFinalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFinalResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteFinal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListFinals(ctx context.Context, in *ListFinalsRequest, opts ...grpc.CallOption) (*ListFinalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFinalsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListFinals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateEnrollment(ctx context.Context, in *CreateEnrollmentRequest, opts ...grpc.CallOption) (*CreateEnrollmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnrollmentResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetEnrollment(ctx context.Context, in *GetEnrollmentRequest, opts ...grpc.CallOption) (*GetEnrollmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnrollmentResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateEnrollment(ctx context.Context, in *UpdateEnrollmentRequest, opts ...grpc.CallOption) (*UpdateEnrollmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnrollmentResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentRequest, opts ...grpc.CallOption) (*DeleteEnrollmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnrollmentResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteEnrollment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListEnrollments(ctx context.Context, in *ListEnrollmentsRequest, opts ...grpc.CallOption) (*ListEnrollmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnrollmentsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListEnrollments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetTopic(ctx context.Context, in *GetTopicRequest, opts ...grpc.CallOption) (*GetTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateTopic(ctx context.Context, in *UpdateTopicRequest, opts ...grpc.CallOption) (*UpdateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTopicResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateTopicCouncil(ctx context.Context, in *CreateTopicCouncilRequest, opts ...grpc.CallOption) (*CreateTopicCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicCouncilResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateTopicCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetTopicCouncil(ctx context.Context, in *GetTopicCouncilRequest, opts ...grpc.CallOption) (*GetTopicCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicCouncilResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetTopicCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateTopicCouncil(ctx context.Context, in *UpdateTopicCouncilRequest, opts ...grpc.CallOption) (*UpdateTopicCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTopicCouncilResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateTopicCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteTopicCouncil(ctx context.Context, in *DeleteTopicCouncilRequest, opts ...grpc.CallOption) (*DeleteTopicCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicCouncilResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteTopicCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListTopicCouncils(ctx context.Context, in *ListTopicCouncilsRequest, opts ...grpc.CallOption) (*ListTopicCouncilsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicCouncilsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListTopicCouncils_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateTopicCouncilSupervisor(ctx context.Context, in *CreateTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*CreateTopicCouncilSupervisorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicCouncilSupervisorResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateTopicCouncilSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetTopicCouncilSupervisor(ctx context.Context, in *GetTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*GetTopicCouncilSupervisorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicCouncilSupervisorResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetTopicCouncilSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateTopicCouncilSupervisor(ctx context.Context, in *UpdateTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*UpdateTopicCouncilSupervisorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTopicCouncilSupervisorResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateTopicCouncilSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteTopicCouncilSupervisor(ctx context.Context, in *DeleteTopicCouncilSupervisorRequest, opts ...grpc.CallOption) (*DeleteTopicCouncilSupervisorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTopicCouncilSupervisorResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteTopicCouncilSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListTopicCouncilSupervisors(ctx context.Context, in *ListTopicCouncilSupervisorsRequest, opts ...grpc.CallOption) (*ListTopicCouncilSupervisorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicCouncilSupervisorsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListTopicCouncilSupervisors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) CreateGradeReview(ctx context.Context, in *CreateGradeReviewRequest, opts ...grpc.CallOption) (*CreateGradeReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGradeReviewResponse)
	err := c.cc.Invoke(ctx, ThesisService_CreateGradeReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) GetGradeReview(ctx context.Context, in *GetGradeReviewRequest, opts ...grpc.CallOption) (*GetGradeReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeReviewResponse)
	err := c.cc.Invoke(ctx, ThesisService_GetGradeReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) UpdateGradeReview(ctx context.Context, in *UpdateGradeReviewRequest, opts ...grpc.CallOption) (*UpdateGradeReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGradeReviewResponse)
	err := c.cc.Invoke(ctx, ThesisService_UpdateGradeReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) DeleteGradeReview(ctx context.Context, in *DeleteGradeReviewRequest, opts ...grpc.CallOption) (*DeleteGradeReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGradeReviewResponse)
	err := c.cc.Invoke(ctx, ThesisService_DeleteGradeReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thesisServiceClient) ListGradeReviews(ctx context.Context, in *ListGradeReviewsRequest, opts ...grpc.CallOption) (*ListGradeReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradeReviewsResponse)
	err := c.cc.Invoke(ctx, ThesisService_ListGradeReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThesisServiceServer is the server API for ThesisService service.
// All implementations must embed UnimplementedThesisServiceServer
// for forward compatibility.
//
// ============= Service =============
type ThesisServiceServer interface {
	// Midterm
	CreateMidterm(context.Context, *CreateMidtermRequest) (*CreateMidtermResponse, error)
	GetMidterm(context.Context, *GetMidtermRequest) (*GetMidtermResponse, error)
	UpdateMidterm(context.Context, *UpdateMidtermRequest) (*UpdateMidtermResponse, error)
	DeleteMidterm(context.Context, *DeleteMidtermRequest) (*DeleteMidtermResponse, error)
	ListMidterms(context.Context, *ListMidtermsRequest) (*ListMidtermsResponse, error)
	// Final
	CreateFinal(context.Context, *CreateFinalRequest) (*CreateFinalResponse, error)
	GetFinal(context.Context, *GetFinalRequest) (*GetFinalResponse, error)
	UpdateFinal(context.Context, *UpdateFinalRequest) (*UpdateFinalResponse, error)
	DeleteFinal(context.Context, *DeleteFinalRequest) (*DeleteFinalResponse, error)
	ListFinals(context.Context, *ListFinalsRequest) (*ListFinalsResponse, error)
	// Enrollment
	CreateEnrollment(context.Context, *CreateEnrollmentRequest) (*CreateEnrollmentResponse, error)
	GetEnrollment(context.Context, *GetEnrollmentRequest) (*GetEnrollmentResponse, error)
	UpdateEnrollment(context.Context, *UpdateEnrollmentRequest) (*UpdateEnrollmentResponse, error)
	DeleteEnrollment(context.Context, *DeleteEnrollmentRequest) (*DeleteEnrollmentResponse, error)
	ListEnrollments(context.Context, *ListEnrollmentsRequest) (*ListEnrollmentsResponse, error)
	// Topic
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetTopic(context.Context, *GetTopicRequest) (*GetTopicResponse, error)
	UpdateTopic(context.Context, *UpdateTopicRequest) (*UpdateTopicResponse, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	// TopicCouncil
	CreateTopicCouncil(context.Context, *CreateTopicCouncilRequest) (*CreateTopicCouncilResponse, error)
	GetTopicCouncil(context.Context, *GetTopicCouncilRequest) (*GetTopicCouncilResponse, error)
	UpdateTopicCouncil(context.Context, *UpdateTopicCouncilRequest) (*UpdateTopicCouncilResponse, error)
	DeleteTopicCouncil(context.Context, *DeleteTopicCouncilRequest) (*DeleteTopicCouncilResponse, error)
	ListTopicCouncils(context.Context, *ListTopicCouncilsRequest) (*ListTopicCouncilsResponse, error)
	// TopicCouncilSupervisor
	CreateTopicCouncilSupervisor(context.Context, *CreateTopicCouncilSupervisorRequest) (*CreateTopicCouncilSupervisorResponse, error)
	GetTopicCouncilSupervisor(context.Context, *GetTopicCouncilSupervisorRequest) (*GetTopicCouncilSupervisorResponse, error)
	UpdateTopicCouncilSupervisor(context.Context, *UpdateTopicCouncilSupervisorRequest) (*UpdateTopicCouncilSupervisorResponse, error)
	DeleteTopicCouncilSupervisor(context.Context, *DeleteTopicCouncilSupervisorRequest) (*DeleteTopicCouncilSupervisorResponse, error)
	ListTopicCouncilSupervisors(context.Context, *ListTopicCouncilSupervisorsRequest) (*ListTopicCouncilSupervisorsResponse, error)
	// GradeReview
	CreateGradeReview(context.Context, *CreateGradeReviewRequest) (*CreateGradeReviewResponse, error)
	GetGradeReview(context.Context, *GetGradeReviewRequest) (*GetGradeReviewResponse, error)
	UpdateGradeReview(context.Context, *UpdateGradeReviewRequest) (*UpdateGradeReviewResponse, error)
	DeleteGradeReview(context.Context, *DeleteGradeReviewRequest) (*DeleteGradeReviewResponse, error)
	ListGradeReviews(context.Context, *ListGradeReviewsRequest) (*ListGradeReviewsResponse, error)
	mustEmbedUnimplementedThesisServiceServer()
}

// UnimplementedThesisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThesisServiceServer struct{}

func (UnimplementedThesisServiceServer) CreateMidterm(context.Context, *CreateMidtermRequest) (*CreateMidtermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMidterm not implemented")
}
func (UnimplementedThesisServiceServer) GetMidterm(context.Context, *GetMidtermRequest) (*GetMidtermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMidterm not implemented")
}
func (UnimplementedThesisServiceServer) UpdateMidterm(context.Context, *UpdateMidtermRequest) (*UpdateMidtermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMidterm not implemented")
}
func (UnimplementedThesisServiceServer) DeleteMidterm(context.Context, *DeleteMidtermRequest) (*DeleteMidtermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMidterm not implemented")
}
func (UnimplementedThesisServiceServer) ListMidterms(context.Context, *ListMidtermsRequest) (*ListMidtermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMidterms not implemented")
}
func (UnimplementedThesisServiceServer) CreateFinal(context.Context, *CreateFinalRequest) (*CreateFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFinal not implemented")
}
func (UnimplementedThesisServiceServer) GetFinal(context.Context, *GetFinalRequest) (*GetFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinal not implemented")
}
func (UnimplementedThesisServiceServer) UpdateFinal(context.Context, *UpdateFinalRequest) (*UpdateFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFinal not implemented")
}
func (UnimplementedThesisServiceServer) DeleteFinal(context.Context, *DeleteFinalRequest) (*DeleteFinalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFinal not implemented")
}
func (UnimplementedThesisServiceServer) ListFinals(context.Context, *ListFinalsRequest) (*ListFinalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFinals not implemented")
}
func (UnimplementedThesisServiceServer) CreateEnrollment(context.Context, *CreateEnrollmentRequest) (*CreateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollment not implemented")
}
func (UnimplementedThesisServiceServer) GetEnrollment(context.Context, *GetEnrollmentRequest) (*GetEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollment not implemented")
}
func (UnimplementedThesisServiceServer) UpdateEnrollment(context.Context, *UpdateEnrollmentRequest) (*UpdateEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnrollment not implemented")
}
func (UnimplementedThesisServiceServer) DeleteEnrollment(context.Context, *DeleteEnrollmentRequest) (*DeleteEnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollment not implemented")
}
func (UnimplementedThesisServiceServer) ListEnrollments(context.Context, *ListEnrollmentsRequest) (*ListEnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnrollments not implemented")
}
func (UnimplementedThesisServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedThesisServiceServer) GetTopic(context.Context, *GetTopicRequest) (*GetTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopic not implemented")
}
func (UnimplementedThesisServiceServer) UpdateTopic(context.Context, *UpdateTopicRequest) (*UpdateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopic not implemented")
}
func (UnimplementedThesisServiceServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedThesisServiceServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedThesisServiceServer) CreateTopicCouncil(context.Context, *CreateTopicCouncilRequest) (*CreateTopicCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopicCouncil not implemented")
}
func (UnimplementedThesisServiceServer) GetTopicCouncil(context.Context, *GetTopicCouncilRequest) (*GetTopicCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicCouncil not implemented")
}
func (UnimplementedThesisServiceServer) UpdateTopicCouncil(context.Context, *UpdateTopicCouncilRequest) (*UpdateTopicCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopicCouncil not implemented")
}
func (UnimplementedThesisServiceServer) DeleteTopicCouncil(context.Context, *DeleteTopicCouncilRequest) (*DeleteTopicCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicCouncil not implemented")
}
func (UnimplementedThesisServiceServer) ListTopicCouncils(context.Context, *ListTopicCouncilsRequest) (*ListTopicCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopicCouncils not implemented")
}
func (UnimplementedThesisServiceServer) CreateTopicCouncilSupervisor(context.Context, *CreateTopicCouncilSupervisorRequest) (*CreateTopicCouncilSupervisorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopicCouncilSupervisor not implemented")
}
func (UnimplementedThesisServiceServer) GetTopicCouncilSupervisor(context.Context, *GetTopicCouncilSupervisorRequest) (*GetTopicCouncilSupervisorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicCouncilSupervisor not implemented")
}
func (UnimplementedThesisServiceServer) UpdateTopicCouncilSupervisor(context.Context, *UpdateTopicCouncilSupervisorRequest) (*UpdateTopicCouncilSupervisorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopicCouncilSupervisor not implemented")
}
func (UnimplementedThesisServiceServer) DeleteTopicCouncilSupervisor(context.Context, *DeleteTopicCouncilSupervisorRequest) (*DeleteTopicCouncilSupervisorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicCouncilSupervisor not implemented")
}
func (UnimplementedThesisServiceServer) ListTopicCouncilSupervisors(context.Context, *ListTopicCouncilSupervisorsRequest) (*ListTopicCouncilSupervisorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopicCouncilSupervisors not implemented")
}
func (UnimplementedThesisServiceServer) CreateGradeReview(context.Context, *CreateGradeReviewRequest) (*CreateGradeReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeReview not implemented")
}
func (UnimplementedThesisServiceServer) GetGradeReview(context.Context, *GetGradeReviewRequest) (*GetGradeReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeReview not implemented")
}
func (UnimplementedThesisServiceServer) UpdateGradeReview(context.Context, *UpdateGradeReviewRequest) (*UpdateGradeReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeReview not implemented")
}
func (UnimplementedThesisServiceServer) DeleteGradeReview(context.Context, *DeleteGradeReviewRequest) (*DeleteGradeReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeReview not implemented")
}
func (UnimplementedThesisServiceServer) ListGradeReviews(context.Context, *ListGradeReviewsRequest) (*ListGradeReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGradeReviews not implemented")
}
func (UnimplementedThesisServiceServer) mustEmbedUnimplementedThesisServiceServer() {}
func (UnimplementedThesisServiceServer) testEmbeddedByValue()                       {}

// UnsafeThesisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThesisServiceServer will
// result in compilation errors.
type UnsafeThesisServiceServer interface {
	mustEmbedUnimplementedThesisServiceServer()
}

func RegisterThesisServiceServer(s grpc.ServiceRegistrar, srv ThesisServiceServer) {
	// If the following call pancis, it indicates UnimplementedThesisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThesisService_ServiceDesc, srv)
}

func _ThesisService_CreateMidterm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMidtermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateMidterm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateMidterm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateMidterm(ctx, req.(*CreateMidtermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetMidterm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMidtermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetMidterm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetMidterm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetMidterm(ctx, req.(*GetMidtermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateMidterm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMidtermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateMidterm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateMidterm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateMidterm(ctx, req.(*UpdateMidtermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteMidterm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMidtermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteMidterm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteMidterm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteMidterm(ctx, req.(*DeleteMidtermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListMidterms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMidtermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListMidterms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListMidterms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListMidterms(ctx, req.(*ListMidtermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateFinal(ctx, req.(*CreateFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetFinal(ctx, req.(*GetFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateFinal(ctx, req.(*UpdateFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteFinal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteFinal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteFinal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteFinal(ctx, req.(*DeleteFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListFinals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFinalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListFinals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListFinals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListFinals(ctx, req.(*ListFinalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateEnrollment(ctx, req.(*CreateEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetEnrollment(ctx, req.(*GetEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateEnrollment(ctx, req.(*UpdateEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteEnrollment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteEnrollment(ctx, req.(*DeleteEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnrollmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListEnrollments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListEnrollments(ctx, req.(*ListEnrollmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetTopic(ctx, req.(*GetTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateTopic(ctx, req.(*UpdateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateTopicCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateTopicCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateTopicCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateTopicCouncil(ctx, req.(*CreateTopicCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetTopicCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetTopicCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetTopicCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetTopicCouncil(ctx, req.(*GetTopicCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateTopicCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateTopicCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateTopicCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateTopicCouncil(ctx, req.(*UpdateTopicCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteTopicCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteTopicCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteTopicCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteTopicCouncil(ctx, req.(*DeleteTopicCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListTopicCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListTopicCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListTopicCouncils_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListTopicCouncils(ctx, req.(*ListTopicCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateTopicCouncilSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicCouncilSupervisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateTopicCouncilSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateTopicCouncilSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateTopicCouncilSupervisor(ctx, req.(*CreateTopicCouncilSupervisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetTopicCouncilSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicCouncilSupervisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetTopicCouncilSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetTopicCouncilSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetTopicCouncilSupervisor(ctx, req.(*GetTopicCouncilSupervisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateTopicCouncilSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopicCouncilSupervisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateTopicCouncilSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateTopicCouncilSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateTopicCouncilSupervisor(ctx, req.(*UpdateTopicCouncilSupervisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteTopicCouncilSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicCouncilSupervisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteTopicCouncilSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteTopicCouncilSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteTopicCouncilSupervisor(ctx, req.(*DeleteTopicCouncilSupervisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListTopicCouncilSupervisors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicCouncilSupervisorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListTopicCouncilSupervisors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListTopicCouncilSupervisors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListTopicCouncilSupervisors(ctx, req.(*ListTopicCouncilSupervisorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_CreateGradeReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).CreateGradeReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_CreateGradeReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).CreateGradeReview(ctx, req.(*CreateGradeReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_GetGradeReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).GetGradeReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_GetGradeReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).GetGradeReview(ctx, req.(*GetGradeReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_UpdateGradeReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).UpdateGradeReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_UpdateGradeReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).UpdateGradeReview(ctx, req.(*UpdateGradeReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_DeleteGradeReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).DeleteGradeReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_DeleteGradeReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).DeleteGradeReview(ctx, req.(*DeleteGradeReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThesisService_ListGradeReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradeReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThesisServiceServer).ListGradeReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThesisService_ListGradeReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThesisServiceServer).ListGradeReviews(ctx, req.(*ListGradeReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThesisService_ServiceDesc is the grpc.ServiceDesc for ThesisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThesisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thesis.ThesisService",
	HandlerType: (*ThesisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMidterm",
			Handler:    _ThesisService_CreateMidterm_Handler,
		},
		{
			MethodName: "GetMidterm",
			Handler:    _ThesisService_GetMidterm_Handler,
		},
		{
			MethodName: "UpdateMidterm",
			Handler:    _ThesisService_UpdateMidterm_Handler,
		},
		{
			MethodName: "DeleteMidterm",
			Handler:    _ThesisService_DeleteMidterm_Handler,
		},
		{
			MethodName: "ListMidterms",
			Handler:    _ThesisService_ListMidterms_Handler,
		},
		{
			MethodName: "CreateFinal",
			Handler:    _ThesisService_CreateFinal_Handler,
		},
		{
			MethodName: "GetFinal",
			Handler:    _ThesisService_GetFinal_Handler,
		},
		{
			MethodName: "UpdateFinal",
			Handler:    _ThesisService_UpdateFinal_Handler,
		},
		{
			MethodName: "DeleteFinal",
			Handler:    _ThesisService_DeleteFinal_Handler,
		},
		{
			MethodName: "ListFinals",
			Handler:    _ThesisService_ListFinals_Handler,
		},
		{
			MethodName: "CreateEnrollment",
			Handler:    _ThesisService_CreateEnrollment_Handler,
		},
		{
			MethodName: "GetEnrollment",
			Handler:    _ThesisService_GetEnrollment_Handler,
		},
		{
			MethodName: "UpdateEnrollment",
			Handler:    _ThesisService_UpdateEnrollment_Handler,
		},
		{
			MethodName: "DeleteEnrollment",
			Handler:    _ThesisService_DeleteEnrollment_Handler,
		},
		{
			MethodName: "ListEnrollments",
			Handler:    _ThesisService_ListEnrollments_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _ThesisService_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopic",
			Handler:    _ThesisService_GetTopic_Handler,
		},
		{
			MethodName: "UpdateTopic",
			Handler:    _ThesisService_UpdateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _ThesisService_DeleteTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _ThesisService_ListTopics_Handler,
		},
		{
			MethodName: "CreateTopicCouncil",
			Handler:    _ThesisService_CreateTopicCouncil_Handler,
		},
		{
			MethodName: "GetTopicCouncil",
			Handler:    _ThesisService_GetTopicCouncil_Handler,
		},
		{
			MethodName: "UpdateTopicCouncil",
			Handler:    _ThesisService_UpdateTopicCouncil_Handler,
		},
		{
			MethodName: "DeleteTopicCouncil",
			Handler:    _ThesisService_DeleteTopicCouncil_Handler,
		},
		{
			MethodName: "ListTopicCouncils",
			Handler:    _ThesisService_ListTopicCouncils_Handler,
		},
		{
			MethodName: "CreateTopicCouncilSupervisor",
			Handler:    _ThesisService_CreateTopicCouncilSupervisor_Handler,
		},
		{
			MethodName: "GetTopicCouncilSupervisor",
			Handler:    _ThesisService_GetTopicCouncilSupervisor_Handler,
		},
		{
			MethodName: "UpdateTopicCouncilSupervisor",
			Handler:    _ThesisService_UpdateTopicCouncilSupervisor_Handler,
		},
		{
			MethodName: "DeleteTopicCouncilSupervisor",
			Handler:    _ThesisService_DeleteTopicCouncilSupervisor_Handler,
		},
		{
			MethodName: "ListTopicCouncilSupervisors",
			Handler:    _ThesisService_ListTopicCouncilSupervisors_Handler,
		},
		{
			MethodName: "CreateGradeReview",
			Handler:    _ThesisService_CreateGradeReview_Handler,
		},
		{
			MethodName: "GetGradeReview",
			Handler:    _ThesisService_GetGradeReview_Handler,
		},
		{
			MethodName: "UpdateGradeReview",
			Handler:    _ThesisService_UpdateGradeReview_Handler,
		},
		{
			MethodName: "DeleteGradeReview",
			Handler:    _ThesisService_DeleteGradeReview_Handler,
		},
		{
			MethodName: "ListGradeReviews",
			Handler:    _ThesisService_ListGradeReviews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/thesis/thesis.proto",
}
