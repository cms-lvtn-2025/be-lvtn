// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/council/council.proto

package council

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CouncilService_CreateCouncil_FullMethodName          = "/council.CouncilService/CreateCouncil"
	CouncilService_GetCouncil_FullMethodName             = "/council.CouncilService/GetCouncil"
	CouncilService_UpdateCouncil_FullMethodName          = "/council.CouncilService/UpdateCouncil"
	CouncilService_DeleteCouncil_FullMethodName          = "/council.CouncilService/DeleteCouncil"
	CouncilService_ListCouncils_FullMethodName           = "/council.CouncilService/ListCouncils"
	CouncilService_CreateDefence_FullMethodName          = "/council.CouncilService/CreateDefence"
	CouncilService_GetDefence_FullMethodName             = "/council.CouncilService/GetDefence"
	CouncilService_UpdateDefence_FullMethodName          = "/council.CouncilService/UpdateDefence"
	CouncilService_DeleteDefence_FullMethodName          = "/council.CouncilService/DeleteDefence"
	CouncilService_ListDefences_FullMethodName           = "/council.CouncilService/ListDefences"
	CouncilService_CreateGradeDefences_FullMethodName    = "/council.CouncilService/CreateGradeDefences"
	CouncilService_GetGradeDefences_FullMethodName       = "/council.CouncilService/GetGradeDefences"
	CouncilService_UpdateGradeDefences_FullMethodName    = "/council.CouncilService/UpdateGradeDefences"
	CouncilService_DeleteGradeDefences_FullMethodName    = "/council.CouncilService/DeleteGradeDefences"
	CouncilService_ListGradeDefences_FullMethodName      = "/council.CouncilService/ListGradeDefences"
	CouncilService_CreateCouncilsSchedule_FullMethodName = "/council.CouncilService/CreateCouncilsSchedule"
	CouncilService_GetCouncilsSchedule_FullMethodName    = "/council.CouncilService/GetCouncilsSchedule"
	CouncilService_UpdateCouncilsSchedule_FullMethodName = "/council.CouncilService/UpdateCouncilsSchedule"
	CouncilService_DeleteCouncilsSchedule_FullMethodName = "/council.CouncilService/DeleteCouncilsSchedule"
	CouncilService_ListCouncilsSchedules_FullMethodName  = "/council.CouncilService/ListCouncilsSchedules"
)

// CouncilServiceClient is the client API for CouncilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============= Service =============
type CouncilServiceClient interface {
	// Council
	CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error)
	GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error)
	UpdateCouncil(ctx context.Context, in *UpdateCouncilRequest, opts ...grpc.CallOption) (*UpdateCouncilResponse, error)
	DeleteCouncil(ctx context.Context, in *DeleteCouncilRequest, opts ...grpc.CallOption) (*DeleteCouncilResponse, error)
	ListCouncils(ctx context.Context, in *ListCouncilsRequest, opts ...grpc.CallOption) (*ListCouncilsResponse, error)
	// Defence
	CreateDefence(ctx context.Context, in *CreateDefenceRequest, opts ...grpc.CallOption) (*CreateDefenceResponse, error)
	GetDefence(ctx context.Context, in *GetDefenceRequest, opts ...grpc.CallOption) (*GetDefenceResponse, error)
	UpdateDefence(ctx context.Context, in *UpdateDefenceRequest, opts ...grpc.CallOption) (*UpdateDefenceResponse, error)
	DeleteDefence(ctx context.Context, in *DeleteDefenceRequest, opts ...grpc.CallOption) (*DeleteDefenceResponse, error)
	ListDefences(ctx context.Context, in *ListDefencesRequest, opts ...grpc.CallOption) (*ListDefencesResponse, error)
	// GradeDefences
	CreateGradeDefences(ctx context.Context, in *CreateGradeDefencesRequest, opts ...grpc.CallOption) (*CreateGradeDefencesResponse, error)
	GetGradeDefences(ctx context.Context, in *GetGradeDefencesRequest, opts ...grpc.CallOption) (*GetGradeDefencesResponse, error)
	UpdateGradeDefences(ctx context.Context, in *UpdateGradeDefencesRequest, opts ...grpc.CallOption) (*UpdateGradeDefencesResponse, error)
	DeleteGradeDefences(ctx context.Context, in *DeleteGradeDefencesRequest, opts ...grpc.CallOption) (*DeleteGradeDefencesResponse, error)
	ListGradeDefences(ctx context.Context, in *ListGradeDefencesRequest, opts ...grpc.CallOption) (*ListGradeDefencesResponse, error)
	// CouncilsSchedule
	CreateCouncilsSchedule(ctx context.Context, in *CreateCouncilsScheduleRequest, opts ...grpc.CallOption) (*CreateCouncilsScheduleResponse, error)
	GetCouncilsSchedule(ctx context.Context, in *GetCouncilsScheduleRequest, opts ...grpc.CallOption) (*GetCouncilsScheduleResponse, error)
	UpdateCouncilsSchedule(ctx context.Context, in *UpdateCouncilsScheduleRequest, opts ...grpc.CallOption) (*UpdateCouncilsScheduleResponse, error)
	DeleteCouncilsSchedule(ctx context.Context, in *DeleteCouncilsScheduleRequest, opts ...grpc.CallOption) (*DeleteCouncilsScheduleResponse, error)
	ListCouncilsSchedules(ctx context.Context, in *ListCouncilsSchedulesRequest, opts ...grpc.CallOption) (*ListCouncilsSchedulesResponse, error)
}

type councilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouncilServiceClient(cc grpc.ClientConnInterface) CouncilServiceClient {
	return &councilServiceClient{cc}
}

func (c *councilServiceClient) CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateCouncil(ctx context.Context, in *UpdateCouncilRequest, opts ...grpc.CallOption) (*UpdateCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteCouncil(ctx context.Context, in *DeleteCouncilRequest, opts ...grpc.CallOption) (*DeleteCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListCouncils(ctx context.Context, in *ListCouncilsRequest, opts ...grpc.CallOption) (*ListCouncilsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouncilsResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListCouncils_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateDefence(ctx context.Context, in *CreateDefenceRequest, opts ...grpc.CallOption) (*CreateDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetDefence(ctx context.Context, in *GetDefenceRequest, opts ...grpc.CallOption) (*GetDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateDefence(ctx context.Context, in *UpdateDefenceRequest, opts ...grpc.CallOption) (*UpdateDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteDefence(ctx context.Context, in *DeleteDefenceRequest, opts ...grpc.CallOption) (*DeleteDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListDefences(ctx context.Context, in *ListDefencesRequest, opts ...grpc.CallOption) (*ListDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateGradeDefences(ctx context.Context, in *CreateGradeDefencesRequest, opts ...grpc.CallOption) (*CreateGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetGradeDefences(ctx context.Context, in *GetGradeDefencesRequest, opts ...grpc.CallOption) (*GetGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateGradeDefences(ctx context.Context, in *UpdateGradeDefencesRequest, opts ...grpc.CallOption) (*UpdateGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteGradeDefences(ctx context.Context, in *DeleteGradeDefencesRequest, opts ...grpc.CallOption) (*DeleteGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListGradeDefences(ctx context.Context, in *ListGradeDefencesRequest, opts ...grpc.CallOption) (*ListGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateCouncilsSchedule(ctx context.Context, in *CreateCouncilsScheduleRequest, opts ...grpc.CallOption) (*CreateCouncilsScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCouncilsScheduleResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateCouncilsSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetCouncilsSchedule(ctx context.Context, in *GetCouncilsScheduleRequest, opts ...grpc.CallOption) (*GetCouncilsScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouncilsScheduleResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetCouncilsSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateCouncilsSchedule(ctx context.Context, in *UpdateCouncilsScheduleRequest, opts ...grpc.CallOption) (*UpdateCouncilsScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCouncilsScheduleResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateCouncilsSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteCouncilsSchedule(ctx context.Context, in *DeleteCouncilsScheduleRequest, opts ...grpc.CallOption) (*DeleteCouncilsScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCouncilsScheduleResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteCouncilsSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListCouncilsSchedules(ctx context.Context, in *ListCouncilsSchedulesRequest, opts ...grpc.CallOption) (*ListCouncilsSchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouncilsSchedulesResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListCouncilsSchedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouncilServiceServer is the server API for CouncilService service.
// All implementations must embed UnimplementedCouncilServiceServer
// for forward compatibility.
//
// ============= Service =============
type CouncilServiceServer interface {
	// Council
	CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error)
	GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error)
	UpdateCouncil(context.Context, *UpdateCouncilRequest) (*UpdateCouncilResponse, error)
	DeleteCouncil(context.Context, *DeleteCouncilRequest) (*DeleteCouncilResponse, error)
	ListCouncils(context.Context, *ListCouncilsRequest) (*ListCouncilsResponse, error)
	// Defence
	CreateDefence(context.Context, *CreateDefenceRequest) (*CreateDefenceResponse, error)
	GetDefence(context.Context, *GetDefenceRequest) (*GetDefenceResponse, error)
	UpdateDefence(context.Context, *UpdateDefenceRequest) (*UpdateDefenceResponse, error)
	DeleteDefence(context.Context, *DeleteDefenceRequest) (*DeleteDefenceResponse, error)
	ListDefences(context.Context, *ListDefencesRequest) (*ListDefencesResponse, error)
	// GradeDefences
	CreateGradeDefences(context.Context, *CreateGradeDefencesRequest) (*CreateGradeDefencesResponse, error)
	GetGradeDefences(context.Context, *GetGradeDefencesRequest) (*GetGradeDefencesResponse, error)
	UpdateGradeDefences(context.Context, *UpdateGradeDefencesRequest) (*UpdateGradeDefencesResponse, error)
	DeleteGradeDefences(context.Context, *DeleteGradeDefencesRequest) (*DeleteGradeDefencesResponse, error)
	ListGradeDefences(context.Context, *ListGradeDefencesRequest) (*ListGradeDefencesResponse, error)
	// CouncilsSchedule
	CreateCouncilsSchedule(context.Context, *CreateCouncilsScheduleRequest) (*CreateCouncilsScheduleResponse, error)
	GetCouncilsSchedule(context.Context, *GetCouncilsScheduleRequest) (*GetCouncilsScheduleResponse, error)
	UpdateCouncilsSchedule(context.Context, *UpdateCouncilsScheduleRequest) (*UpdateCouncilsScheduleResponse, error)
	DeleteCouncilsSchedule(context.Context, *DeleteCouncilsScheduleRequest) (*DeleteCouncilsScheduleResponse, error)
	ListCouncilsSchedules(context.Context, *ListCouncilsSchedulesRequest) (*ListCouncilsSchedulesResponse, error)
	mustEmbedUnimplementedCouncilServiceServer()
}

// UnimplementedCouncilServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouncilServiceServer struct{}

func (UnimplementedCouncilServiceServer) CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateCouncil(context.Context, *UpdateCouncilRequest) (*UpdateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteCouncil(context.Context, *DeleteCouncilRequest) (*DeleteCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) ListCouncils(context.Context, *ListCouncilsRequest) (*ListCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCouncils not implemented")
}
func (UnimplementedCouncilServiceServer) CreateDefence(context.Context, *CreateDefenceRequest) (*CreateDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefence not implemented")
}
func (UnimplementedCouncilServiceServer) GetDefence(context.Context, *GetDefenceRequest) (*GetDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefence not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateDefence(context.Context, *UpdateDefenceRequest) (*UpdateDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefence not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteDefence(context.Context, *DeleteDefenceRequest) (*DeleteDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefence not implemented")
}
func (UnimplementedCouncilServiceServer) ListDefences(context.Context, *ListDefencesRequest) (*ListDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefences not implemented")
}
func (UnimplementedCouncilServiceServer) CreateGradeDefences(context.Context, *CreateGradeDefencesRequest) (*CreateGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) GetGradeDefences(context.Context, *GetGradeDefencesRequest) (*GetGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateGradeDefences(context.Context, *UpdateGradeDefencesRequest) (*UpdateGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteGradeDefences(context.Context, *DeleteGradeDefencesRequest) (*DeleteGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) ListGradeDefences(context.Context, *ListGradeDefencesRequest) (*ListGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) CreateCouncilsSchedule(context.Context, *CreateCouncilsScheduleRequest) (*CreateCouncilsScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouncilsSchedule not implemented")
}
func (UnimplementedCouncilServiceServer) GetCouncilsSchedule(context.Context, *GetCouncilsScheduleRequest) (*GetCouncilsScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncilsSchedule not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateCouncilsSchedule(context.Context, *UpdateCouncilsScheduleRequest) (*UpdateCouncilsScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouncilsSchedule not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteCouncilsSchedule(context.Context, *DeleteCouncilsScheduleRequest) (*DeleteCouncilsScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouncilsSchedule not implemented")
}
func (UnimplementedCouncilServiceServer) ListCouncilsSchedules(context.Context, *ListCouncilsSchedulesRequest) (*ListCouncilsSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCouncilsSchedules not implemented")
}
func (UnimplementedCouncilServiceServer) mustEmbedUnimplementedCouncilServiceServer() {}
func (UnimplementedCouncilServiceServer) testEmbeddedByValue()                        {}

// UnsafeCouncilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouncilServiceServer will
// result in compilation errors.
type UnsafeCouncilServiceServer interface {
	mustEmbedUnimplementedCouncilServiceServer()
}

func RegisterCouncilServiceServer(s grpc.ServiceRegistrar, srv CouncilServiceServer) {
	// If the following call pancis, it indicates UnimplementedCouncilServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CouncilService_ServiceDesc, srv)
}

func _CouncilService_CreateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateCouncil(ctx, req.(*CreateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetCouncil(ctx, req.(*GetCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateCouncil(ctx, req.(*UpdateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteCouncil(ctx, req.(*DeleteCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListCouncils_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListCouncils(ctx, req.(*ListCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateDefence(ctx, req.(*CreateDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetDefence(ctx, req.(*GetDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateDefence(ctx, req.(*UpdateDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteDefence(ctx, req.(*DeleteDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListDefences(ctx, req.(*ListDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateGradeDefences(ctx, req.(*CreateGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetGradeDefences(ctx, req.(*GetGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateGradeDefences(ctx, req.(*UpdateGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteGradeDefences(ctx, req.(*DeleteGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListGradeDefences(ctx, req.(*ListGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateCouncilsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouncilsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateCouncilsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateCouncilsSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateCouncilsSchedule(ctx, req.(*CreateCouncilsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetCouncilsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetCouncilsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetCouncilsSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetCouncilsSchedule(ctx, req.(*GetCouncilsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateCouncilsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouncilsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateCouncilsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateCouncilsSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateCouncilsSchedule(ctx, req.(*UpdateCouncilsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteCouncilsSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouncilsScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteCouncilsSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteCouncilsSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteCouncilsSchedule(ctx, req.(*DeleteCouncilsScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListCouncilsSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouncilsSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListCouncilsSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListCouncilsSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListCouncilsSchedules(ctx, req.(*ListCouncilsSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouncilService_ServiceDesc is the grpc.ServiceDesc for CouncilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouncilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "council.CouncilService",
	HandlerType: (*CouncilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCouncil",
			Handler:    _CouncilService_CreateCouncil_Handler,
		},
		{
			MethodName: "GetCouncil",
			Handler:    _CouncilService_GetCouncil_Handler,
		},
		{
			MethodName: "UpdateCouncil",
			Handler:    _CouncilService_UpdateCouncil_Handler,
		},
		{
			MethodName: "DeleteCouncil",
			Handler:    _CouncilService_DeleteCouncil_Handler,
		},
		{
			MethodName: "ListCouncils",
			Handler:    _CouncilService_ListCouncils_Handler,
		},
		{
			MethodName: "CreateDefence",
			Handler:    _CouncilService_CreateDefence_Handler,
		},
		{
			MethodName: "GetDefence",
			Handler:    _CouncilService_GetDefence_Handler,
		},
		{
			MethodName: "UpdateDefence",
			Handler:    _CouncilService_UpdateDefence_Handler,
		},
		{
			MethodName: "DeleteDefence",
			Handler:    _CouncilService_DeleteDefence_Handler,
		},
		{
			MethodName: "ListDefences",
			Handler:    _CouncilService_ListDefences_Handler,
		},
		{
			MethodName: "CreateGradeDefences",
			Handler:    _CouncilService_CreateGradeDefences_Handler,
		},
		{
			MethodName: "GetGradeDefences",
			Handler:    _CouncilService_GetGradeDefences_Handler,
		},
		{
			MethodName: "UpdateGradeDefences",
			Handler:    _CouncilService_UpdateGradeDefences_Handler,
		},
		{
			MethodName: "DeleteGradeDefences",
			Handler:    _CouncilService_DeleteGradeDefences_Handler,
		},
		{
			MethodName: "ListGradeDefences",
			Handler:    _CouncilService_ListGradeDefences_Handler,
		},
		{
			MethodName: "CreateCouncilsSchedule",
			Handler:    _CouncilService_CreateCouncilsSchedule_Handler,
		},
		{
			MethodName: "GetCouncilsSchedule",
			Handler:    _CouncilService_GetCouncilsSchedule_Handler,
		},
		{
			MethodName: "UpdateCouncilsSchedule",
			Handler:    _CouncilService_UpdateCouncilsSchedule_Handler,
		},
		{
			MethodName: "DeleteCouncilsSchedule",
			Handler:    _CouncilService_DeleteCouncilsSchedule_Handler,
		},
		{
			MethodName: "ListCouncilsSchedules",
			Handler:    _CouncilService_ListCouncilsSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/council/council.proto",
}
