// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/council/council.proto

package council

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CouncilService_CreateCouncil_FullMethodName               = "/council.CouncilService/CreateCouncil"
	CouncilService_GetCouncil_FullMethodName                  = "/council.CouncilService/GetCouncil"
	CouncilService_UpdateCouncil_FullMethodName               = "/council.CouncilService/UpdateCouncil"
	CouncilService_DeleteCouncil_FullMethodName               = "/council.CouncilService/DeleteCouncil"
	CouncilService_ListCouncils_FullMethodName                = "/council.CouncilService/ListCouncils"
	CouncilService_CreateDefence_FullMethodName               = "/council.CouncilService/CreateDefence"
	CouncilService_GetDefence_FullMethodName                  = "/council.CouncilService/GetDefence"
	CouncilService_UpdateDefence_FullMethodName               = "/council.CouncilService/UpdateDefence"
	CouncilService_DeleteDefence_FullMethodName               = "/council.CouncilService/DeleteDefence"
	CouncilService_ListDefences_FullMethodName                = "/council.CouncilService/ListDefences"
	CouncilService_CreateGradeDefence_FullMethodName          = "/council.CouncilService/CreateGradeDefence"
	CouncilService_GetGradeDefence_FullMethodName             = "/council.CouncilService/GetGradeDefence"
	CouncilService_UpdateGradeDefence_FullMethodName          = "/council.CouncilService/UpdateGradeDefence"
	CouncilService_DeleteGradeDefence_FullMethodName          = "/council.CouncilService/DeleteGradeDefence"
	CouncilService_ListGradeDefences_FullMethodName           = "/council.CouncilService/ListGradeDefences"
	CouncilService_CreateGradeDefenceCriterion_FullMethodName = "/council.CouncilService/CreateGradeDefenceCriterion"
	CouncilService_GetGradeDefenceCriterion_FullMethodName    = "/council.CouncilService/GetGradeDefenceCriterion"
	CouncilService_UpdateGradeDefenceCriterion_FullMethodName = "/council.CouncilService/UpdateGradeDefenceCriterion"
	CouncilService_DeleteGradeDefenceCriterion_FullMethodName = "/council.CouncilService/DeleteGradeDefenceCriterion"
	CouncilService_ListGradeDefenceCriteria_FullMethodName    = "/council.CouncilService/ListGradeDefenceCriteria"
)

// CouncilServiceClient is the client API for CouncilService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============= Service =============
type CouncilServiceClient interface {
	// Council
	CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error)
	GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error)
	UpdateCouncil(ctx context.Context, in *UpdateCouncilRequest, opts ...grpc.CallOption) (*UpdateCouncilResponse, error)
	DeleteCouncil(ctx context.Context, in *DeleteCouncilRequest, opts ...grpc.CallOption) (*DeleteCouncilResponse, error)
	ListCouncils(ctx context.Context, in *ListCouncilsRequest, opts ...grpc.CallOption) (*ListCouncilsResponse, error)
	// Defence
	CreateDefence(ctx context.Context, in *CreateDefenceRequest, opts ...grpc.CallOption) (*CreateDefenceResponse, error)
	GetDefence(ctx context.Context, in *GetDefenceRequest, opts ...grpc.CallOption) (*GetDefenceResponse, error)
	UpdateDefence(ctx context.Context, in *UpdateDefenceRequest, opts ...grpc.CallOption) (*UpdateDefenceResponse, error)
	DeleteDefence(ctx context.Context, in *DeleteDefenceRequest, opts ...grpc.CallOption) (*DeleteDefenceResponse, error)
	ListDefences(ctx context.Context, in *ListDefencesRequest, opts ...grpc.CallOption) (*ListDefencesResponse, error)
	// GradeDefence
	CreateGradeDefence(ctx context.Context, in *CreateGradeDefenceRequest, opts ...grpc.CallOption) (*CreateGradeDefenceResponse, error)
	GetGradeDefence(ctx context.Context, in *GetGradeDefenceRequest, opts ...grpc.CallOption) (*GetGradeDefenceResponse, error)
	UpdateGradeDefence(ctx context.Context, in *UpdateGradeDefenceRequest, opts ...grpc.CallOption) (*UpdateGradeDefenceResponse, error)
	DeleteGradeDefence(ctx context.Context, in *DeleteGradeDefenceRequest, opts ...grpc.CallOption) (*DeleteGradeDefenceResponse, error)
	ListGradeDefences(ctx context.Context, in *ListGradeDefencesRequest, opts ...grpc.CallOption) (*ListGradeDefencesResponse, error)
	// GradeDefenceCriterion
	CreateGradeDefenceCriterion(ctx context.Context, in *CreateGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*CreateGradeDefenceCriterionResponse, error)
	GetGradeDefenceCriterion(ctx context.Context, in *GetGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*GetGradeDefenceCriterionResponse, error)
	UpdateGradeDefenceCriterion(ctx context.Context, in *UpdateGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*UpdateGradeDefenceCriterionResponse, error)
	DeleteGradeDefenceCriterion(ctx context.Context, in *DeleteGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*DeleteGradeDefenceCriterionResponse, error)
	ListGradeDefenceCriteria(ctx context.Context, in *ListGradeDefenceCriteriaRequest, opts ...grpc.CallOption) (*ListGradeDefenceCriteriaResponse, error)
}

type councilServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouncilServiceClient(cc grpc.ClientConnInterface) CouncilServiceClient {
	return &councilServiceClient{cc}
}

func (c *councilServiceClient) CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateCouncil(ctx context.Context, in *UpdateCouncilRequest, opts ...grpc.CallOption) (*UpdateCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteCouncil(ctx context.Context, in *DeleteCouncilRequest, opts ...grpc.CallOption) (*DeleteCouncilResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCouncilResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteCouncil_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListCouncils(ctx context.Context, in *ListCouncilsRequest, opts ...grpc.CallOption) (*ListCouncilsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouncilsResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListCouncils_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateDefence(ctx context.Context, in *CreateDefenceRequest, opts ...grpc.CallOption) (*CreateDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetDefence(ctx context.Context, in *GetDefenceRequest, opts ...grpc.CallOption) (*GetDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateDefence(ctx context.Context, in *UpdateDefenceRequest, opts ...grpc.CallOption) (*UpdateDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteDefence(ctx context.Context, in *DeleteDefenceRequest, opts ...grpc.CallOption) (*DeleteDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListDefences(ctx context.Context, in *ListDefencesRequest, opts ...grpc.CallOption) (*ListDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateGradeDefence(ctx context.Context, in *CreateGradeDefenceRequest, opts ...grpc.CallOption) (*CreateGradeDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGradeDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateGradeDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetGradeDefence(ctx context.Context, in *GetGradeDefenceRequest, opts ...grpc.CallOption) (*GetGradeDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetGradeDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateGradeDefence(ctx context.Context, in *UpdateGradeDefenceRequest, opts ...grpc.CallOption) (*UpdateGradeDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGradeDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateGradeDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteGradeDefence(ctx context.Context, in *DeleteGradeDefenceRequest, opts ...grpc.CallOption) (*DeleteGradeDefenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGradeDefenceResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteGradeDefence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListGradeDefences(ctx context.Context, in *ListGradeDefencesRequest, opts ...grpc.CallOption) (*ListGradeDefencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradeDefencesResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListGradeDefences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) CreateGradeDefenceCriterion(ctx context.Context, in *CreateGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*CreateGradeDefenceCriterionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGradeDefenceCriterionResponse)
	err := c.cc.Invoke(ctx, CouncilService_CreateGradeDefenceCriterion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) GetGradeDefenceCriterion(ctx context.Context, in *GetGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*GetGradeDefenceCriterionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGradeDefenceCriterionResponse)
	err := c.cc.Invoke(ctx, CouncilService_GetGradeDefenceCriterion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) UpdateGradeDefenceCriterion(ctx context.Context, in *UpdateGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*UpdateGradeDefenceCriterionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGradeDefenceCriterionResponse)
	err := c.cc.Invoke(ctx, CouncilService_UpdateGradeDefenceCriterion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) DeleteGradeDefenceCriterion(ctx context.Context, in *DeleteGradeDefenceCriterionRequest, opts ...grpc.CallOption) (*DeleteGradeDefenceCriterionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGradeDefenceCriterionResponse)
	err := c.cc.Invoke(ctx, CouncilService_DeleteGradeDefenceCriterion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *councilServiceClient) ListGradeDefenceCriteria(ctx context.Context, in *ListGradeDefenceCriteriaRequest, opts ...grpc.CallOption) (*ListGradeDefenceCriteriaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGradeDefenceCriteriaResponse)
	err := c.cc.Invoke(ctx, CouncilService_ListGradeDefenceCriteria_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouncilServiceServer is the server API for CouncilService service.
// All implementations must embed UnimplementedCouncilServiceServer
// for forward compatibility.
//
// ============= Service =============
type CouncilServiceServer interface {
	// Council
	CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error)
	GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error)
	UpdateCouncil(context.Context, *UpdateCouncilRequest) (*UpdateCouncilResponse, error)
	DeleteCouncil(context.Context, *DeleteCouncilRequest) (*DeleteCouncilResponse, error)
	ListCouncils(context.Context, *ListCouncilsRequest) (*ListCouncilsResponse, error)
	// Defence
	CreateDefence(context.Context, *CreateDefenceRequest) (*CreateDefenceResponse, error)
	GetDefence(context.Context, *GetDefenceRequest) (*GetDefenceResponse, error)
	UpdateDefence(context.Context, *UpdateDefenceRequest) (*UpdateDefenceResponse, error)
	DeleteDefence(context.Context, *DeleteDefenceRequest) (*DeleteDefenceResponse, error)
	ListDefences(context.Context, *ListDefencesRequest) (*ListDefencesResponse, error)
	// GradeDefence
	CreateGradeDefence(context.Context, *CreateGradeDefenceRequest) (*CreateGradeDefenceResponse, error)
	GetGradeDefence(context.Context, *GetGradeDefenceRequest) (*GetGradeDefenceResponse, error)
	UpdateGradeDefence(context.Context, *UpdateGradeDefenceRequest) (*UpdateGradeDefenceResponse, error)
	DeleteGradeDefence(context.Context, *DeleteGradeDefenceRequest) (*DeleteGradeDefenceResponse, error)
	ListGradeDefences(context.Context, *ListGradeDefencesRequest) (*ListGradeDefencesResponse, error)
	// GradeDefenceCriterion
	CreateGradeDefenceCriterion(context.Context, *CreateGradeDefenceCriterionRequest) (*CreateGradeDefenceCriterionResponse, error)
	GetGradeDefenceCriterion(context.Context, *GetGradeDefenceCriterionRequest) (*GetGradeDefenceCriterionResponse, error)
	UpdateGradeDefenceCriterion(context.Context, *UpdateGradeDefenceCriterionRequest) (*UpdateGradeDefenceCriterionResponse, error)
	DeleteGradeDefenceCriterion(context.Context, *DeleteGradeDefenceCriterionRequest) (*DeleteGradeDefenceCriterionResponse, error)
	ListGradeDefenceCriteria(context.Context, *ListGradeDefenceCriteriaRequest) (*ListGradeDefenceCriteriaResponse, error)
	mustEmbedUnimplementedCouncilServiceServer()
}

// UnimplementedCouncilServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouncilServiceServer struct{}

func (UnimplementedCouncilServiceServer) CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateCouncil(context.Context, *UpdateCouncilRequest) (*UpdateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteCouncil(context.Context, *DeleteCouncilRequest) (*DeleteCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouncil not implemented")
}
func (UnimplementedCouncilServiceServer) ListCouncils(context.Context, *ListCouncilsRequest) (*ListCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCouncils not implemented")
}
func (UnimplementedCouncilServiceServer) CreateDefence(context.Context, *CreateDefenceRequest) (*CreateDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDefence not implemented")
}
func (UnimplementedCouncilServiceServer) GetDefence(context.Context, *GetDefenceRequest) (*GetDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefence not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateDefence(context.Context, *UpdateDefenceRequest) (*UpdateDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefence not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteDefence(context.Context, *DeleteDefenceRequest) (*DeleteDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDefence not implemented")
}
func (UnimplementedCouncilServiceServer) ListDefences(context.Context, *ListDefencesRequest) (*ListDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefences not implemented")
}
func (UnimplementedCouncilServiceServer) CreateGradeDefence(context.Context, *CreateGradeDefenceRequest) (*CreateGradeDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeDefence not implemented")
}
func (UnimplementedCouncilServiceServer) GetGradeDefence(context.Context, *GetGradeDefenceRequest) (*GetGradeDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeDefence not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateGradeDefence(context.Context, *UpdateGradeDefenceRequest) (*UpdateGradeDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeDefence not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteGradeDefence(context.Context, *DeleteGradeDefenceRequest) (*DeleteGradeDefenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeDefence not implemented")
}
func (UnimplementedCouncilServiceServer) ListGradeDefences(context.Context, *ListGradeDefencesRequest) (*ListGradeDefencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGradeDefences not implemented")
}
func (UnimplementedCouncilServiceServer) CreateGradeDefenceCriterion(context.Context, *CreateGradeDefenceCriterionRequest) (*CreateGradeDefenceCriterionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGradeDefenceCriterion not implemented")
}
func (UnimplementedCouncilServiceServer) GetGradeDefenceCriterion(context.Context, *GetGradeDefenceCriterionRequest) (*GetGradeDefenceCriterionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGradeDefenceCriterion not implemented")
}
func (UnimplementedCouncilServiceServer) UpdateGradeDefenceCriterion(context.Context, *UpdateGradeDefenceCriterionRequest) (*UpdateGradeDefenceCriterionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGradeDefenceCriterion not implemented")
}
func (UnimplementedCouncilServiceServer) DeleteGradeDefenceCriterion(context.Context, *DeleteGradeDefenceCriterionRequest) (*DeleteGradeDefenceCriterionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGradeDefenceCriterion not implemented")
}
func (UnimplementedCouncilServiceServer) ListGradeDefenceCriteria(context.Context, *ListGradeDefenceCriteriaRequest) (*ListGradeDefenceCriteriaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGradeDefenceCriteria not implemented")
}
func (UnimplementedCouncilServiceServer) mustEmbedUnimplementedCouncilServiceServer() {}
func (UnimplementedCouncilServiceServer) testEmbeddedByValue()                        {}

// UnsafeCouncilServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouncilServiceServer will
// result in compilation errors.
type UnsafeCouncilServiceServer interface {
	mustEmbedUnimplementedCouncilServiceServer()
}

func RegisterCouncilServiceServer(s grpc.ServiceRegistrar, srv CouncilServiceServer) {
	// If the following call pancis, it indicates UnimplementedCouncilServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CouncilService_ServiceDesc, srv)
}

func _CouncilService_CreateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateCouncil(ctx, req.(*CreateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetCouncil(ctx, req.(*GetCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateCouncil(ctx, req.(*UpdateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteCouncil(ctx, req.(*DeleteCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListCouncils_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListCouncils(ctx, req.(*ListCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateDefence(ctx, req.(*CreateDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetDefence(ctx, req.(*GetDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateDefence(ctx, req.(*UpdateDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteDefence(ctx, req.(*DeleteDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListDefences(ctx, req.(*ListDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateGradeDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateGradeDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateGradeDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateGradeDefence(ctx, req.(*CreateGradeDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetGradeDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetGradeDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetGradeDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetGradeDefence(ctx, req.(*GetGradeDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateGradeDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateGradeDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateGradeDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateGradeDefence(ctx, req.(*UpdateGradeDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteGradeDefence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeDefenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteGradeDefence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteGradeDefence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteGradeDefence(ctx, req.(*DeleteGradeDefenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListGradeDefences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradeDefencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListGradeDefences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListGradeDefences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListGradeDefences(ctx, req.(*ListGradeDefencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_CreateGradeDefenceCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGradeDefenceCriterionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).CreateGradeDefenceCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_CreateGradeDefenceCriterion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).CreateGradeDefenceCriterion(ctx, req.(*CreateGradeDefenceCriterionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_GetGradeDefenceCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGradeDefenceCriterionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).GetGradeDefenceCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_GetGradeDefenceCriterion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).GetGradeDefenceCriterion(ctx, req.(*GetGradeDefenceCriterionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_UpdateGradeDefenceCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGradeDefenceCriterionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).UpdateGradeDefenceCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_UpdateGradeDefenceCriterion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).UpdateGradeDefenceCriterion(ctx, req.(*UpdateGradeDefenceCriterionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_DeleteGradeDefenceCriterion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGradeDefenceCriterionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).DeleteGradeDefenceCriterion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_DeleteGradeDefenceCriterion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).DeleteGradeDefenceCriterion(ctx, req.(*DeleteGradeDefenceCriterionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouncilService_ListGradeDefenceCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGradeDefenceCriteriaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouncilServiceServer).ListGradeDefenceCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouncilService_ListGradeDefenceCriteria_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouncilServiceServer).ListGradeDefenceCriteria(ctx, req.(*ListGradeDefenceCriteriaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouncilService_ServiceDesc is the grpc.ServiceDesc for CouncilService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouncilService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "council.CouncilService",
	HandlerType: (*CouncilServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCouncil",
			Handler:    _CouncilService_CreateCouncil_Handler,
		},
		{
			MethodName: "GetCouncil",
			Handler:    _CouncilService_GetCouncil_Handler,
		},
		{
			MethodName: "UpdateCouncil",
			Handler:    _CouncilService_UpdateCouncil_Handler,
		},
		{
			MethodName: "DeleteCouncil",
			Handler:    _CouncilService_DeleteCouncil_Handler,
		},
		{
			MethodName: "ListCouncils",
			Handler:    _CouncilService_ListCouncils_Handler,
		},
		{
			MethodName: "CreateDefence",
			Handler:    _CouncilService_CreateDefence_Handler,
		},
		{
			MethodName: "GetDefence",
			Handler:    _CouncilService_GetDefence_Handler,
		},
		{
			MethodName: "UpdateDefence",
			Handler:    _CouncilService_UpdateDefence_Handler,
		},
		{
			MethodName: "DeleteDefence",
			Handler:    _CouncilService_DeleteDefence_Handler,
		},
		{
			MethodName: "ListDefences",
			Handler:    _CouncilService_ListDefences_Handler,
		},
		{
			MethodName: "CreateGradeDefence",
			Handler:    _CouncilService_CreateGradeDefence_Handler,
		},
		{
			MethodName: "GetGradeDefence",
			Handler:    _CouncilService_GetGradeDefence_Handler,
		},
		{
			MethodName: "UpdateGradeDefence",
			Handler:    _CouncilService_UpdateGradeDefence_Handler,
		},
		{
			MethodName: "DeleteGradeDefence",
			Handler:    _CouncilService_DeleteGradeDefence_Handler,
		},
		{
			MethodName: "ListGradeDefences",
			Handler:    _CouncilService_ListGradeDefences_Handler,
		},
		{
			MethodName: "CreateGradeDefenceCriterion",
			Handler:    _CouncilService_CreateGradeDefenceCriterion_Handler,
		},
		{
			MethodName: "GetGradeDefenceCriterion",
			Handler:    _CouncilService_GetGradeDefenceCriterion_Handler,
		},
		{
			MethodName: "UpdateGradeDefenceCriterion",
			Handler:    _CouncilService_UpdateGradeDefenceCriterion_Handler,
		},
		{
			MethodName: "DeleteGradeDefenceCriterion",
			Handler:    _CouncilService_DeleteGradeDefenceCriterion_Handler,
		},
		{
			MethodName: "ListGradeDefenceCriteria",
			Handler:    _CouncilService_ListGradeDefenceCriteria_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/council/council.proto",
}
