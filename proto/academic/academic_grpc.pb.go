// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/academic/academic.proto

package academic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AcademicService_CreateSemester_FullMethodName = "/academic.AcademicService/CreateSemester"
	AcademicService_GetSemester_FullMethodName    = "/academic.AcademicService/GetSemester"
	AcademicService_UpdateSemester_FullMethodName = "/academic.AcademicService/UpdateSemester"
	AcademicService_DeleteSemester_FullMethodName = "/academic.AcademicService/DeleteSemester"
	AcademicService_ListSemesters_FullMethodName  = "/academic.AcademicService/ListSemesters"
	AcademicService_CreateFaculty_FullMethodName  = "/academic.AcademicService/CreateFaculty"
	AcademicService_GetFaculty_FullMethodName     = "/academic.AcademicService/GetFaculty"
	AcademicService_UpdateFaculty_FullMethodName  = "/academic.AcademicService/UpdateFaculty"
	AcademicService_DeleteFaculty_FullMethodName  = "/academic.AcademicService/DeleteFaculty"
	AcademicService_ListFaculties_FullMethodName  = "/academic.AcademicService/ListFaculties"
	AcademicService_CreateMajor_FullMethodName    = "/academic.AcademicService/CreateMajor"
	AcademicService_GetMajor_FullMethodName       = "/academic.AcademicService/GetMajor"
	AcademicService_UpdateMajor_FullMethodName    = "/academic.AcademicService/UpdateMajor"
	AcademicService_DeleteMajor_FullMethodName    = "/academic.AcademicService/DeleteMajor"
	AcademicService_ListMajors_FullMethodName     = "/academic.AcademicService/ListMajors"
)

// AcademicServiceClient is the client API for AcademicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============= Service =============
type AcademicServiceClient interface {
	// Semester
	CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error)
	GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error)
	UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error)
	DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error)
	ListSemesters(ctx context.Context, in *ListSemestersRequest, opts ...grpc.CallOption) (*ListSemestersResponse, error)
	// Faculty
	CreateFaculty(ctx context.Context, in *CreateFacultyRequest, opts ...grpc.CallOption) (*CreateFacultyResponse, error)
	GetFaculty(ctx context.Context, in *GetFacultyRequest, opts ...grpc.CallOption) (*GetFacultyResponse, error)
	UpdateFaculty(ctx context.Context, in *UpdateFacultyRequest, opts ...grpc.CallOption) (*UpdateFacultyResponse, error)
	DeleteFaculty(ctx context.Context, in *DeleteFacultyRequest, opts ...grpc.CallOption) (*DeleteFacultyResponse, error)
	ListFaculties(ctx context.Context, in *ListFacultiesRequest, opts ...grpc.CallOption) (*ListFacultiesResponse, error)
	// Major
	CreateMajor(ctx context.Context, in *CreateMajorRequest, opts ...grpc.CallOption) (*CreateMajorResponse, error)
	GetMajor(ctx context.Context, in *GetMajorRequest, opts ...grpc.CallOption) (*GetMajorResponse, error)
	UpdateMajor(ctx context.Context, in *UpdateMajorRequest, opts ...grpc.CallOption) (*UpdateMajorResponse, error)
	DeleteMajor(ctx context.Context, in *DeleteMajorRequest, opts ...grpc.CallOption) (*DeleteMajorResponse, error)
	ListMajors(ctx context.Context, in *ListMajorsRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error)
}

type academicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcademicServiceClient(cc grpc.ClientConnInterface) AcademicServiceClient {
	return &academicServiceClient{cc}
}

func (c *academicServiceClient) CreateSemester(ctx context.Context, in *CreateSemesterRequest, opts ...grpc.CallOption) (*CreateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSemesterResponse)
	err := c.cc.Invoke(ctx, AcademicService_CreateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) GetSemester(ctx context.Context, in *GetSemesterRequest, opts ...grpc.CallOption) (*GetSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSemesterResponse)
	err := c.cc.Invoke(ctx, AcademicService_GetSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) UpdateSemester(ctx context.Context, in *UpdateSemesterRequest, opts ...grpc.CallOption) (*UpdateSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSemesterResponse)
	err := c.cc.Invoke(ctx, AcademicService_UpdateSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) DeleteSemester(ctx context.Context, in *DeleteSemesterRequest, opts ...grpc.CallOption) (*DeleteSemesterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSemesterResponse)
	err := c.cc.Invoke(ctx, AcademicService_DeleteSemester_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) ListSemesters(ctx context.Context, in *ListSemestersRequest, opts ...grpc.CallOption) (*ListSemestersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSemestersResponse)
	err := c.cc.Invoke(ctx, AcademicService_ListSemesters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) CreateFaculty(ctx context.Context, in *CreateFacultyRequest, opts ...grpc.CallOption) (*CreateFacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFacultyResponse)
	err := c.cc.Invoke(ctx, AcademicService_CreateFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) GetFaculty(ctx context.Context, in *GetFacultyRequest, opts ...grpc.CallOption) (*GetFacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFacultyResponse)
	err := c.cc.Invoke(ctx, AcademicService_GetFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) UpdateFaculty(ctx context.Context, in *UpdateFacultyRequest, opts ...grpc.CallOption) (*UpdateFacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFacultyResponse)
	err := c.cc.Invoke(ctx, AcademicService_UpdateFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) DeleteFaculty(ctx context.Context, in *DeleteFacultyRequest, opts ...grpc.CallOption) (*DeleteFacultyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFacultyResponse)
	err := c.cc.Invoke(ctx, AcademicService_DeleteFaculty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) ListFaculties(ctx context.Context, in *ListFacultiesRequest, opts ...grpc.CallOption) (*ListFacultiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFacultiesResponse)
	err := c.cc.Invoke(ctx, AcademicService_ListFaculties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) CreateMajor(ctx context.Context, in *CreateMajorRequest, opts ...grpc.CallOption) (*CreateMajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMajorResponse)
	err := c.cc.Invoke(ctx, AcademicService_CreateMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) GetMajor(ctx context.Context, in *GetMajorRequest, opts ...grpc.CallOption) (*GetMajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMajorResponse)
	err := c.cc.Invoke(ctx, AcademicService_GetMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) UpdateMajor(ctx context.Context, in *UpdateMajorRequest, opts ...grpc.CallOption) (*UpdateMajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMajorResponse)
	err := c.cc.Invoke(ctx, AcademicService_UpdateMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) DeleteMajor(ctx context.Context, in *DeleteMajorRequest, opts ...grpc.CallOption) (*DeleteMajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMajorResponse)
	err := c.cc.Invoke(ctx, AcademicService_DeleteMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicServiceClient) ListMajors(ctx context.Context, in *ListMajorsRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMajorsResponse)
	err := c.cc.Invoke(ctx, AcademicService_ListMajors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcademicServiceServer is the server API for AcademicService service.
// All implementations must embed UnimplementedAcademicServiceServer
// for forward compatibility.
//
// ============= Service =============
type AcademicServiceServer interface {
	// Semester
	CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error)
	GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error)
	UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error)
	DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error)
	ListSemesters(context.Context, *ListSemestersRequest) (*ListSemestersResponse, error)
	// Faculty
	CreateFaculty(context.Context, *CreateFacultyRequest) (*CreateFacultyResponse, error)
	GetFaculty(context.Context, *GetFacultyRequest) (*GetFacultyResponse, error)
	UpdateFaculty(context.Context, *UpdateFacultyRequest) (*UpdateFacultyResponse, error)
	DeleteFaculty(context.Context, *DeleteFacultyRequest) (*DeleteFacultyResponse, error)
	ListFaculties(context.Context, *ListFacultiesRequest) (*ListFacultiesResponse, error)
	// Major
	CreateMajor(context.Context, *CreateMajorRequest) (*CreateMajorResponse, error)
	GetMajor(context.Context, *GetMajorRequest) (*GetMajorResponse, error)
	UpdateMajor(context.Context, *UpdateMajorRequest) (*UpdateMajorResponse, error)
	DeleteMajor(context.Context, *DeleteMajorRequest) (*DeleteMajorResponse, error)
	ListMajors(context.Context, *ListMajorsRequest) (*ListMajorsResponse, error)
	mustEmbedUnimplementedAcademicServiceServer()
}

// UnimplementedAcademicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAcademicServiceServer struct{}

func (UnimplementedAcademicServiceServer) CreateSemester(context.Context, *CreateSemesterRequest) (*CreateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSemester not implemented")
}
func (UnimplementedAcademicServiceServer) GetSemester(context.Context, *GetSemesterRequest) (*GetSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSemester not implemented")
}
func (UnimplementedAcademicServiceServer) UpdateSemester(context.Context, *UpdateSemesterRequest) (*UpdateSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSemester not implemented")
}
func (UnimplementedAcademicServiceServer) DeleteSemester(context.Context, *DeleteSemesterRequest) (*DeleteSemesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSemester not implemented")
}
func (UnimplementedAcademicServiceServer) ListSemesters(context.Context, *ListSemestersRequest) (*ListSemestersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSemesters not implemented")
}
func (UnimplementedAcademicServiceServer) CreateFaculty(context.Context, *CreateFacultyRequest) (*CreateFacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFaculty not implemented")
}
func (UnimplementedAcademicServiceServer) GetFaculty(context.Context, *GetFacultyRequest) (*GetFacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFaculty not implemented")
}
func (UnimplementedAcademicServiceServer) UpdateFaculty(context.Context, *UpdateFacultyRequest) (*UpdateFacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaculty not implemented")
}
func (UnimplementedAcademicServiceServer) DeleteFaculty(context.Context, *DeleteFacultyRequest) (*DeleteFacultyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaculty not implemented")
}
func (UnimplementedAcademicServiceServer) ListFaculties(context.Context, *ListFacultiesRequest) (*ListFacultiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaculties not implemented")
}
func (UnimplementedAcademicServiceServer) CreateMajor(context.Context, *CreateMajorRequest) (*CreateMajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMajor not implemented")
}
func (UnimplementedAcademicServiceServer) GetMajor(context.Context, *GetMajorRequest) (*GetMajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMajor not implemented")
}
func (UnimplementedAcademicServiceServer) UpdateMajor(context.Context, *UpdateMajorRequest) (*UpdateMajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMajor not implemented")
}
func (UnimplementedAcademicServiceServer) DeleteMajor(context.Context, *DeleteMajorRequest) (*DeleteMajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMajor not implemented")
}
func (UnimplementedAcademicServiceServer) ListMajors(context.Context, *ListMajorsRequest) (*ListMajorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMajors not implemented")
}
func (UnimplementedAcademicServiceServer) mustEmbedUnimplementedAcademicServiceServer() {}
func (UnimplementedAcademicServiceServer) testEmbeddedByValue()                         {}

// UnsafeAcademicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcademicServiceServer will
// result in compilation errors.
type UnsafeAcademicServiceServer interface {
	mustEmbedUnimplementedAcademicServiceServer()
}

func RegisterAcademicServiceServer(s grpc.ServiceRegistrar, srv AcademicServiceServer) {
	// If the following call pancis, it indicates UnimplementedAcademicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AcademicService_ServiceDesc, srv)
}

func _AcademicService_CreateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).CreateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_CreateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).CreateSemester(ctx, req.(*CreateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_GetSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).GetSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_GetSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).GetSemester(ctx, req.(*GetSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_UpdateSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).UpdateSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_UpdateSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).UpdateSemester(ctx, req.(*UpdateSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_DeleteSemester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSemesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).DeleteSemester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_DeleteSemester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).DeleteSemester(ctx, req.(*DeleteSemesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_ListSemesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSemestersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).ListSemesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_ListSemesters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).ListSemesters(ctx, req.(*ListSemestersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_CreateFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).CreateFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_CreateFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).CreateFaculty(ctx, req.(*CreateFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_GetFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).GetFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_GetFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).GetFaculty(ctx, req.(*GetFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_UpdateFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).UpdateFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_UpdateFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).UpdateFaculty(ctx, req.(*UpdateFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_DeleteFaculty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacultyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).DeleteFaculty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_DeleteFaculty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).DeleteFaculty(ctx, req.(*DeleteFacultyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_ListFaculties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFacultiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).ListFaculties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_ListFaculties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).ListFaculties(ctx, req.(*ListFacultiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_CreateMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).CreateMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_CreateMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).CreateMajor(ctx, req.(*CreateMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_GetMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).GetMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_GetMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).GetMajor(ctx, req.(*GetMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_UpdateMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).UpdateMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_UpdateMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).UpdateMajor(ctx, req.(*UpdateMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_DeleteMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).DeleteMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_DeleteMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).DeleteMajor(ctx, req.(*DeleteMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicService_ListMajors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMajorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicServiceServer).ListMajors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AcademicService_ListMajors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicServiceServer).ListMajors(ctx, req.(*ListMajorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AcademicService_ServiceDesc is the grpc.ServiceDesc for AcademicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcademicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "academic.AcademicService",
	HandlerType: (*AcademicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSemester",
			Handler:    _AcademicService_CreateSemester_Handler,
		},
		{
			MethodName: "GetSemester",
			Handler:    _AcademicService_GetSemester_Handler,
		},
		{
			MethodName: "UpdateSemester",
			Handler:    _AcademicService_UpdateSemester_Handler,
		},
		{
			MethodName: "DeleteSemester",
			Handler:    _AcademicService_DeleteSemester_Handler,
		},
		{
			MethodName: "ListSemesters",
			Handler:    _AcademicService_ListSemesters_Handler,
		},
		{
			MethodName: "CreateFaculty",
			Handler:    _AcademicService_CreateFaculty_Handler,
		},
		{
			MethodName: "GetFaculty",
			Handler:    _AcademicService_GetFaculty_Handler,
		},
		{
			MethodName: "UpdateFaculty",
			Handler:    _AcademicService_UpdateFaculty_Handler,
		},
		{
			MethodName: "DeleteFaculty",
			Handler:    _AcademicService_DeleteFaculty_Handler,
		},
		{
			MethodName: "ListFaculties",
			Handler:    _AcademicService_ListFaculties_Handler,
		},
		{
			MethodName: "CreateMajor",
			Handler:    _AcademicService_CreateMajor_Handler,
		},
		{
			MethodName: "GetMajor",
			Handler:    _AcademicService_GetMajor_Handler,
		},
		{
			MethodName: "UpdateMajor",
			Handler:    _AcademicService_UpdateMajor_Handler,
		},
		{
			MethodName: "DeleteMajor",
			Handler:    _AcademicService_DeleteMajor_Handler,
		},
		{
			MethodName: "ListMajors",
			Handler:    _AcademicService_ListMajors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/academic/academic.proto",
}
