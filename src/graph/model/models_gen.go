// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Council struct {
	Total         *int32          `json:"total,omitempty"`
	ID            string          `json:"id"`
	Title         string          `json:"title"`
	MajorCode     string          `json:"majorCode"`
	SemesterCode  string          `json:"semesterCode"`
	TimeStart     *time.Time      `json:"timeStart,omitempty"`
	CreatedAt     *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time      `json:"updatedAt,omitempty"`
	CreatedBy     *string         `json:"createdBy,omitempty"`
	UpdatedBy     *string         `json:"updatedBy,omitempty"`
	Defences      []*Defence      `json:"defences,omitempty"`
	TopicCouncils []*TopicCouncil `json:"topicCouncils,omitempty"`
}

// Defence view cho Council Member
type CouncilDefence struct {
	ID            string                `json:"id"`
	Title         string                `json:"title"`
	CouncilCode   string                `json:"councilCode"`
	TeacherCode   string                `json:"teacherCode"`
	Position      DefencePosition       `json:"position"`
	CreatedAt     *time.Time            `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time            `json:"updatedAt,omitempty"`
	Council       *CouncilMemberCouncil `json:"council,omitempty"`
	Teacher       *Teacher              `json:"teacher,omitempty"`
	GradeDefences []*GradeDefence       `json:"gradeDefences,omitempty"`
}

type CouncilDefenceListResponse struct {
	Total int32             `json:"total"`
	Data  []*CouncilDefence `json:"data"`
}

// Enrollment view cho Council Member
// Council member được xem để chấm điểm
type CouncilEnrollment struct {
	ID               string               `json:"id"`
	Title            string               `json:"title"`
	StudentCode      string               `json:"studentCode"`
	TopicCouncilCode string               `json:"topicCouncilCode"`
	FinalCode        *string              `json:"finalCode,omitempty"`
	GradeReviewCode  *string              `json:"gradeReviewCode,omitempty"`
	MidtermCode      *string              `json:"midtermCode,omitempty"`
	CreatedAt        *time.Time           `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time           `json:"updatedAt,omitempty"`
	Student          *Student             `json:"student,omitempty"`
	TopicCouncil     *CouncilTopicCouncil `json:"topicCouncil,omitempty"`
	Midterm          *Midterm             `json:"midterm,omitempty"`
	Final            *Final               `json:"final,omitempty"`
	GradeReview      *GradeReview         `json:"gradeReview,omitempty"`
	GradeDefences    []*GradeDefence      `json:"gradeDefences,omitempty"`
}

type CouncilEnrollmentListResponse struct {
	Total int32                `json:"total"`
	Data  []*CouncilEnrollment `json:"data"`
}

type CouncilListResponse struct {
	Total int32      `json:"total"`
	Data  []*Council `json:"data"`
}

// Council view cho Council Member
type CouncilMemberCouncil struct {
	ID            string                 `json:"id"`
	Title         string                 `json:"title"`
	MajorCode     string                 `json:"majorCode"`
	SemesterCode  string                 `json:"semesterCode"`
	TimeStart     *time.Time             `json:"timeStart,omitempty"`
	CreatedAt     *time.Time             `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time             `json:"updatedAt,omitempty"`
	CreatedBy     *string                `json:"createdBy,omitempty"`
	UpdatedBy     *string                `json:"updatedBy,omitempty"`
	Major         *MajorInfo             `json:"major,omitempty"`
	Semester      *SemesterInfo          `json:"semester,omitempty"`
	Defences      []*CouncilDefence      `json:"defences,omitempty"`
	TopicCouncils []*CouncilTopicCouncil `json:"topicCouncils,omitempty"`
}

// TopicCouncil view cho Council Member
type CouncilTopicCouncil struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Stage       TopicStage                `json:"stage"`
	TopicCode   string                    `json:"topicCode"`
	CouncilCode *string                   `json:"councilCode,omitempty"`
	TimeStart   time.Time                 `json:"timeStart"`
	TimeEnd     time.Time                 `json:"timeEnd"`
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time                `json:"updatedAt,omitempty"`
	Topic       *Topic                    `json:"topic,omitempty"`
	Council     *CouncilMemberCouncil     `json:"council,omitempty"`
	Enrollments []*CouncilEnrollment      `json:"enrollments,omitempty"`
	Supervisors []*TopicCouncilSupervisor `json:"supervisors,omitempty"`
}

type CouncilTopicCouncilListResponse struct {
	Total int32                  `json:"total"`
	Data  []*CouncilTopicCouncil `json:"data"`
}

type CreateCouncilInput struct {
	Title        string `json:"title"`
	MajorCode    string `json:"majorCode"`
	SemesterCode string `json:"semesterCode"`
}

type CreateDefenceInput struct {
	Title       string          `json:"title"`
	CouncilCode string          `json:"councilCode"`
	TeacherCode string          `json:"teacherCode"`
	Position    DefencePosition `json:"position"`
}

type CreateFacultyInput struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

type CreateGradeDefenceCriterionInput struct {
	GradeDefenceCode string `json:"gradeDefenceCode"`
	Name             string `json:"name"`
	Score            string `json:"score"`
	MaxScore         string `json:"maxScore"`
}

type CreateGradeDefenceInput struct {
	DefenceCode    string  `json:"defenceCode"`
	EnrollmentCode string  `json:"enrollmentCode"`
	Note           *string `json:"note,omitempty"`
	TotalScore     *int32  `json:"totalScore,omitempty"`
}

type CreateMajorInput struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	FacultyCode string `json:"facultyCode"`
}

type CreateSemesterInput struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

type CreateStudentInput struct {
	ID           string  `json:"id"`
	Email        string  `json:"email"`
	Phone        string  `json:"phone"`
	Username     string  `json:"username"`
	Gender       Gender  `json:"gender"`
	MajorCode    string  `json:"majorCode"`
	ClassCode    *string `json:"classCode,omitempty"`
	SemesterCode string  `json:"semesterCode"`
}

type CreateTeacherInput struct {
	ID           string `json:"id"`
	Email        string `json:"email"`
	Username     string `json:"username"`
	Gender       Gender `json:"gender"`
	MajorCode    string `json:"majorCode"`
	SemesterCode string `json:"semesterCode"`
}

type Defence struct {
	ID            string          `json:"id"`
	Title         string          `json:"title"`
	CouncilCode   string          `json:"councilCode"`
	TeacherCode   string          `json:"teacherCode"`
	Position      DefencePosition `json:"position"`
	CreatedAt     *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time      `json:"updatedAt,omitempty"`
	CreatedBy     *string         `json:"createdBy,omitempty"`
	UpdatedBy     *string         `json:"updatedBy,omitempty"`
	Council       *Council        `json:"council,omitempty"`
	Teacher       *Teacher        `json:"teacher,omitempty"`
	GradeDefences []*GradeDefence `json:"gradeDefences,omitempty"`
}

type DefenceListResponse struct {
	Total int32      `json:"total"`
	Data  []*Defence `json:"data"`
}

type Enrollment struct {
	ID               string          `json:"id"`
	Title            string          `json:"title"`
	StudentCode      string          `json:"studentCode"`
	TopicCouncilCode string          `json:"topicCouncilCode"`
	FinalCode        *string         `json:"finalCode,omitempty"`
	GradeReviewCode  *string         `json:"gradeReviewCode,omitempty"`
	MidtermCode      *string         `json:"midtermCode,omitempty"`
	CreatedAt        *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time      `json:"updatedAt,omitempty"`
	CreatedBy        *string         `json:"createdBy,omitempty"`
	UpdatedBy        *string         `json:"updatedBy,omitempty"`
	Student          *Student        `json:"student,omitempty"`
	Midterm          *Midterm        `json:"midterm,omitempty"`
	Final            *Final          `json:"final,omitempty"`
	TopicCouncil     *TopicCouncil   `json:"topicCouncil,omitempty"`
	GradeReview      *GradeReview    `json:"gradeReview,omitempty"`
	GradeDefences    []*GradeDefence `json:"gradeDefences,omitempty"`
}

type EnrollmentListResponse struct {
	Total int32         `json:"total"`
	Data  []*Enrollment `json:"data"`
}

type Faculty struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	CreatedBy *string    `json:"createdBy,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
	Majors    []*Major   `json:"majors"`
}

type FacultyListResponse struct {
	Total int32      `json:"total"`
	Data  []*Faculty `json:"data"`
}

type File struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	File      *string    `json:"file,omitempty"`
	Status    FileStatus `json:"status"`
	Table     FileTable  `json:"table"`
	Option    *string    `json:"option,omitempty"`
	TableID   string     `json:"tableId"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	CreatedBy *string    `json:"createdBy,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
}

type FileListResponse struct {
	Total int32   `json:"total"`
	Data  []*File `json:"data"`
}

type FilterConditionInput struct {
	Field    string         `json:"field"`
	Operator FilterOperator `json:"operator"`
	Values   []string       `json:"values,omitempty"`
}

type FilterCriteriaInput struct {
	Condition *FilterConditionInput `json:"condition,omitempty"`
	Group     *FilterGroupInput     `json:"group,omitempty"`
}

type FilterGroupInput struct {
	Logic   *LogicalCondition      `json:"logic,omitempty"`
	Filters []*FilterCriteriaInput `json:"filters"`
}

type Final struct {
	ID              string      `json:"id"`
	Title           string      `json:"title"`
	SupervisorGrade *int32      `json:"supervisorGrade,omitempty"`
	DepartmentGrade *int32      `json:"departmentGrade,omitempty"`
	FinalGrade      *int32      `json:"finalGrade,omitempty"`
	Status          FinalStatus `json:"status"`
	Notes           *string     `json:"notes,omitempty"`
	CompletionDate  *time.Time  `json:"completionDate,omitempty"`
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	CreatedBy       *string     `json:"createdBy,omitempty"`
	UpdatedBy       *string     `json:"updatedBy,omitempty"`
}

type FinalListResponse struct {
	Total int32    `json:"total"`
	Data  []*Final `json:"data"`
}

type GradeDefence struct {
	ID             string                   `json:"id"`
	DefenceCode    string                   `json:"defenceCode"`
	EnrollmentCode string                   `json:"enrollmentCode"`
	Note           *string                  `json:"note,omitempty"`
	TotalScore     *int32                   `json:"totalScore,omitempty"`
	CreatedAt      *time.Time               `json:"createdAt,omitempty"`
	UpdatedAt      *time.Time               `json:"updatedAt,omitempty"`
	CreatedBy      *string                  `json:"createdBy,omitempty"`
	UpdatedBy      *string                  `json:"updatedBy,omitempty"`
	Defence        *Defence                 `json:"defence,omitempty"`
	Enrollment     *Enrollment              `json:"enrollment,omitempty"`
	Criteria       []*GradeDefenceCriterion `json:"criteria,omitempty"`
}

type GradeDefenceCriterion struct {
	ID               string        `json:"id"`
	GradeDefenceCode string        `json:"gradeDefenceCode"`
	Name             *string       `json:"name,omitempty"`
	Score            *string       `json:"score,omitempty"`
	MaxScore         *string       `json:"maxScore,omitempty"`
	CreatedAt        *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time    `json:"updatedAt,omitempty"`
	CreatedBy        *string       `json:"createdBy,omitempty"`
	UpdatedBy        *string       `json:"updatedBy,omitempty"`
	GradeDefence     *GradeDefence `json:"gradeDefence,omitempty"`
}

type GradeDefenceCriterionListResponse struct {
	Total int32                    `json:"total"`
	Data  []*GradeDefenceCriterion `json:"data"`
}

type GradeDefenceListResponse struct {
	Total int32           `json:"total"`
	Data  []*GradeDefence `json:"data"`
}

type GradeFinalInput struct {
	SupervisorGrade int32       `json:"supervisorGrade"`
	Status          FinalStatus `json:"status"`
	Notes           *string     `json:"notes,omitempty"`
}

type GradeMidtermInput struct {
	Grade    int32         `json:"grade"`
	Status   MidtermStatus `json:"status"`
	Feedback *string       `json:"feedback,omitempty"`
}

type GradeReview struct {
	ID             string      `json:"id"`
	Title          string      `json:"title"`
	ReviewGrade    *int32      `json:"reviewGrade,omitempty"`
	TeacherCode    string      `json:"teacherCode"`
	Status         FinalStatus `json:"status"`
	Notes          *string     `json:"notes,omitempty"`
	CompletionDate *time.Time  `json:"completionDate,omitempty"`
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	CreatedBy      *string     `json:"createdBy,omitempty"`
	UpdatedBy      *string     `json:"updatedBy,omitempty"`
	Teacher        *Teacher    `json:"teacher,omitempty"`
}

type GradeReviewListResponse struct {
	Total int32          `json:"total"`
	Data  []*GradeReview `json:"data"`
}

type Major struct {
	ID          string     `json:"id"`
	Title       string     `json:"title"`
	FacultyCode string     `json:"facultyCode"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
	CreatedBy   *string    `json:"createdBy,omitempty"`
	UpdatedBy   *string    `json:"updatedBy,omitempty"`
	Topics      []*Topic   `json:"topics,omitempty"`
}

// Major info - Restricted type để tránh circular query
// Không có relationships (topics, faculty) để tránh vòng lặp
// Dùng chung cho tất cả custom types
type MajorInfo struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	FacultyCode string `json:"facultyCode"`
}

type MajorListResponse struct {
	Total int32    `json:"total"`
	Data  []*Major `json:"data"`
}

type Midterm struct {
	ID        string        `json:"id"`
	Title     string        `json:"title"`
	Grade     *int32        `json:"grade,omitempty"`
	Status    MidtermStatus `json:"status"`
	Feedback  *string       `json:"feedback,omitempty"`
	CreatedAt *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt *time.Time    `json:"updatedAt,omitempty"`
	CreatedBy *string       `json:"createdBy,omitempty"`
	UpdatedBy *string       `json:"updatedBy,omitempty"`
}

type MidtermListResponse struct {
	Total int32      `json:"total"`
	Data  []*Midterm `json:"data"`
}

type Mutation struct {
}

type PaginationInput struct {
	Page       *int32  `json:"page,omitempty"`
	PageSize   *int32  `json:"pageSize,omitempty"`
	SortBy     *string `json:"sortBy,omitempty"`
	Descending *bool   `json:"descending,omitempty"`
}

type Query struct {
}

// Enrollment view cho Reviewer
// Reviewer được xem để chấm phản biện
type ReviewerEnrollment struct {
	ID               string                `json:"id"`
	Title            string                `json:"title"`
	StudentCode      string                `json:"studentCode"`
	TopicCouncilCode string                `json:"topicCouncilCode"`
	GradeReviewCode  *string               `json:"gradeReviewCode,omitempty"`
	MidtermCode      *string               `json:"midtermCode,omitempty"`
	FinalCode        *string               `json:"finalCode,omitempty"`
	CreatedAt        *time.Time            `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time            `json:"updatedAt,omitempty"`
	Student          *Student              `json:"student,omitempty"`
	TopicCouncil     *ReviewerTopicCouncil `json:"topicCouncil,omitempty"`
	Midterm          *Midterm              `json:"midterm,omitempty"`
	Final            *Final                `json:"final,omitempty"`
	GradeReview      *GradeReview          `json:"gradeReview,omitempty"`
}

// Grade_review assignment cho Reviewer
// Đây là bảng nguồn - query từ đây: SELECT * FROM Grade_review WHERE teacher_code = current_user
type ReviewerGradeReview struct {
	ID             string              `json:"id"`
	Title          string              `json:"title"`
	TeacherCode    string              `json:"teacherCode"`
	ReviewGrade    *int32              `json:"reviewGrade,omitempty"`
	Status         FinalStatus         `json:"status"`
	Notes          *string             `json:"notes,omitempty"`
	CompletionDate *time.Time          `json:"completionDate,omitempty"`
	CreatedAt      *time.Time          `json:"createdAt,omitempty"`
	UpdatedAt      *time.Time          `json:"updatedAt,omitempty"`
	Enrollment     *ReviewerEnrollment `json:"enrollment,omitempty"`
}

type ReviewerGradeReviewListResponse struct {
	Total int32                  `json:"total"`
	Data  []*ReviewerGradeReview `json:"data"`
}

// Topic view cho Reviewer
// Reviewer chỉ xem thông tin cơ bản của topic
type ReviewerTopic struct {
	ID        string      `json:"id"`
	Title     string      `json:"title"`
	Status    TopicStatus `json:"status"`
	MajorCode string      `json:"majorCode"`
	Major     *MajorInfo  `json:"major,omitempty"`
	Files     []*File     `json:"files,omitempty"`
}

// TopicCouncil view cho Reviewer
type ReviewerTopicCouncil struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Stage       TopicStage                `json:"stage"`
	TopicCode   string                    `json:"topicCode"`
	TimeStart   time.Time                 `json:"timeStart"`
	TimeEnd     time.Time                 `json:"timeEnd"`
	Topic       *ReviewerTopic            `json:"topic,omitempty"`
	Supervisors []*TopicCouncilSupervisor `json:"supervisors,omitempty"`
}

type RoleSystem struct {
	ID           string         `json:"id"`
	Title        string         `json:"title"`
	TeacherCode  *string        `json:"teacherCode,omitempty"`
	Role         RoleSystemRole `json:"role"`
	SemesterCode string         `json:"semesterCode"`
	Activate     bool           `json:"activate"`
	CreatedAt    *time.Time     `json:"createdAt,omitempty"`
	UpdatedAt    *time.Time     `json:"updatedAt,omitempty"`
	CreatedBy    *string        `json:"createdBy,omitempty"`
	UpdatedBy    *string        `json:"updatedBy,omitempty"`
	Teacher      *Teacher       `json:"teacher,omitempty"`
	Semester     *Semester      `json:"semester,omitempty"`
}

type RoleSystemListResponse struct {
	Total int32         `json:"total"`
	Data  []*RoleSystem `json:"data"`
}

type SearchRequestInput struct {
	Pagination *PaginationInput       `json:"pagination,omitempty"`
	Filters    []*FilterCriteriaInput `json:"filters,omitempty"`
}

type Semester struct {
	ID        string     `json:"id"`
	Title     string     `json:"title"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	CreatedBy *string    `json:"createdBy,omitempty"`
	UpdatedBy *string    `json:"updatedBy,omitempty"`
	Students  []*Student `json:"students,omitempty"`
	Teachers  []*Teacher `json:"teachers,omitempty"`
	Topics    []*Topic   `json:"topics,omitempty"`
}

// Semester info - Restricted type để tránh circular query
// Không có relationships (students, teachers, topics) để tránh vòng lặp
// Dùng chung cho tất cả custom types
type SemesterInfo struct {
	ID    string `json:"id"`
	Title string `json:"title"`
}

type SemesterListResponse struct {
	Total int32       `json:"total"`
	Data  []*Semester `json:"data"`
}

type Student struct {
	ID           string        `json:"id"`
	Email        string        `json:"email"`
	Phone        string        `json:"phone"`
	Username     string        `json:"username"`
	Gender       *Gender       `json:"gender,omitempty"`
	MajorCode    string        `json:"majorCode"`
	ClassCode    *string       `json:"classCode,omitempty"`
	SemesterCode string        `json:"semesterCode"`
	CreatedAt    *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt    *time.Time    `json:"updatedAt,omitempty"`
	CreatedBy    *string       `json:"createdBy,omitempty"`
	UpdatedBy    *string       `json:"updatedBy,omitempty"`
	Enrollments  []*Enrollment `json:"enrollments,omitempty"`
}

// Council view cho Student
// Student xem được thông tin hội đồng: tên, thời gian, thành viên
// KHÔNG có field 'topicCouncils' để tránh xem topic của người khác
type StudentCouncil struct {
	ID           string                `json:"id"`
	Title        string                `json:"title"`
	MajorCode    string                `json:"majorCode"`
	SemesterCode string                `json:"semesterCode"`
	TimeStart    *time.Time            `json:"timeStart,omitempty"`
	CreatedAt    *time.Time            `json:"createdAt,omitempty"`
	UpdatedAt    *time.Time            `json:"updatedAt,omitempty"`
	Major        *MajorInfo            `json:"major,omitempty"`
	Semester     *SemesterInfo         `json:"semester,omitempty"`
	Defences     []*StudentDefenceInfo `json:"defences,omitempty"`
}

// Defence info cho Student
// Student xem được thông tin thành viên hội đồng
type StudentDefenceInfo struct {
	ID        string              `json:"id"`
	Title     string              `json:"title"`
	Position  DefencePosition     `json:"position"`
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
	Teacher   *StudentTeacherInfo `json:"teacher,omitempty"`
}

type StudentDefenceInfoListResponse struct {
	Total int32                 `json:"total"`
	Data  []*StudentDefenceInfo `json:"data"`
}

// Enrollment view cho Student
// KHÔNG có field 'student' vì student tự query của mình
type StudentEnrollment struct {
	ID               string                 `json:"id"`
	Title            string                 `json:"title"`
	StudentCode      string                 `json:"studentCode"`
	TopicCouncilCode string                 `json:"topicCouncilCode"`
	FinalCode        *string                `json:"finalCode,omitempty"`
	GradeReviewCode  *string                `json:"gradeReviewCode,omitempty"`
	MidtermCode      *string                `json:"midtermCode,omitempty"`
	CreatedAt        *time.Time             `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time             `json:"updatedAt,omitempty"`
	CreatedBy        *string                `json:"createdBy,omitempty"`
	UpdatedBy        *string                `json:"updatedBy,omitempty"`
	TopicCouncil     *StudentTopicCouncil   `json:"topicCouncil,omitempty"`
	Midterm          *Midterm               `json:"midterm,omitempty"`
	Final            *Final                 `json:"final,omitempty"`
	GradeReview      *GradeReview           `json:"gradeReview,omitempty"`
	GradeDefences    []*StudentGradeDefence `json:"gradeDefences,omitempty"`
}

type StudentEnrollmentListResponse struct {
	Total int32                `json:"total"`
	Data  []*StudentEnrollment `json:"data"`
}

// GradeDefence view cho Student
// Student xem được điểm defence của mình
type StudentGradeDefence struct {
	ID             string                   `json:"id"`
	DefenceCode    string                   `json:"defenceCode"`
	EnrollmentCode string                   `json:"enrollmentCode"`
	Note           *string                  `json:"note,omitempty"`
	TotalScore     *int32                   `json:"totalScore,omitempty"`
	CreatedAt      *time.Time               `json:"createdAt,omitempty"`
	UpdatedAt      *time.Time               `json:"updatedAt,omitempty"`
	Criteria       []*GradeDefenceCriterion `json:"criteria,omitempty"`
	Defence        *StudentDefenceInfo      `json:"defence,omitempty"`
}

type StudentGradeDefenceListResponse struct {
	Total int32                  `json:"total"`
	Data  []*StudentGradeDefence `json:"data"`
}

type StudentListResponse struct {
	Total int32      `json:"total"`
	Data  []*Student `json:"data"`
}

// Teacher info view cho Student
// Student chỉ xem được thông tin cơ bản của giáo viên
// KHÔNG có field 'roles' vì sensitive
// KHÔNG có field 'major' relationship để tránh circular query
type StudentTeacherInfo struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	Username  string  `json:"username"`
	Gender    *Gender `json:"gender,omitempty"`
	MajorCode string  `json:"majorCode"`
}

// Topic view cho Student
// Chỉ xem thông tin cơ bản
// KHÔNG có field 'enrollments' vì không cần xem enrollment người khác
type StudentTopic struct {
	ID            string        `json:"id"`
	Title         string        `json:"title"`
	MajorCode     string        `json:"majorCode"`
	SemesterCode  string        `json:"semesterCode"`
	Status        TopicStatus   `json:"status"`
	PercentStage1 *int32        `json:"percentStage1,omitempty"`
	PercentStage2 *int32        `json:"percentStage2,omitempty"`
	CreatedAt     *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time    `json:"updatedAt,omitempty"`
	Major         *MajorInfo    `json:"major,omitempty"`
	Semester      *SemesterInfo `json:"semester,omitempty"`
	Files         []*File       `json:"files,omitempty"`
}

// TopicCouncil view cho Student
// CÓ field 'council' để xem thông tin hội đồng (tên, thời gian, thành viên)
// KHÔNG có field 'enrollments' vì không cần xem enrollment người khác
type StudentTopicCouncil struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Stage       TopicStage                `json:"stage"`
	TopicCode   string                    `json:"topicCode"`
	CouncilCode *string                   `json:"councilCode,omitempty"`
	TimeStart   time.Time                 `json:"timeStart"`
	TimeEnd     time.Time                 `json:"timeEnd"`
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time                `json:"updatedAt,omitempty"`
	Topic       *StudentTopic             `json:"topic,omitempty"`
	Supervisors []*StudentTopicSupervisor `json:"supervisors,omitempty"`
	Council     *StudentCouncil           `json:"council,omitempty"`
}

// TopicSupervisor view cho Student
// Student chỉ xem được thông tin giáo viên hướng dẫn cơ bản
type StudentTopicSupervisor struct {
	ID                    string              `json:"id"`
	TeacherSupervisorCode string              `json:"teacherSupervisorCode"`
	TopicCouncilCode      string              `json:"topicCouncilCode"`
	Teacher               *StudentTeacherInfo `json:"teacher,omitempty"`
}

type StudentTopicSupervisorListResponse struct {
	Total int32                     `json:"total"`
	Data  []*StudentTopicSupervisor `json:"data"`
}

type Subscription struct {
}

// Enrollment view cho Supervisor
// Supervisor được xem đầy đủ thông tin sinh viên và chấm điểm
type SupervisorEnrollment struct {
	ID               string                  `json:"id"`
	Title            string                  `json:"title"`
	StudentCode      string                  `json:"studentCode"`
	TopicCouncilCode string                  `json:"topicCouncilCode"`
	FinalCode        *string                 `json:"finalCode,omitempty"`
	GradeReviewCode  *string                 `json:"gradeReviewCode,omitempty"`
	MidtermCode      *string                 `json:"midtermCode,omitempty"`
	CreatedAt        *time.Time              `json:"createdAt,omitempty"`
	UpdatedAt        *time.Time              `json:"updatedAt,omitempty"`
	CreatedBy        *string                 `json:"createdBy,omitempty"`
	UpdatedBy        *string                 `json:"updatedBy,omitempty"`
	Student          *Student                `json:"student,omitempty"`
	TopicCouncil     *SupervisorTopicCouncil `json:"topicCouncil,omitempty"`
	Midterm          *Midterm                `json:"midterm,omitempty"`
	Final            *Final                  `json:"final,omitempty"`
	GradeReview      *GradeReview            `json:"gradeReview,omitempty"`
	GradeDefences    []*GradeDefence         `json:"gradeDefences,omitempty"`
}

type SupervisorEnrollmentListResponse struct {
	Total int32                   `json:"total"`
	Data  []*SupervisorEnrollment `json:"data"`
}

// Topic view cho Supervisor
// Supervisor được xem đầy đủ thông tin topic mình hướng dẫn
type SupervisorTopic struct {
	ID            string                    `json:"id"`
	Title         string                    `json:"title"`
	MajorCode     string                    `json:"majorCode"`
	SemesterCode  string                    `json:"semesterCode"`
	Status        TopicStatus               `json:"status"`
	PercentStage1 *int32                    `json:"percentStage1,omitempty"`
	PercentStage2 *int32                    `json:"percentStage2,omitempty"`
	CreatedAt     *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time                `json:"updatedAt,omitempty"`
	CreatedBy     *string                   `json:"createdBy,omitempty"`
	UpdatedBy     *string                   `json:"updatedBy,omitempty"`
	Major         *MajorInfo                `json:"major,omitempty"`
	Semester      *SemesterInfo             `json:"semester,omitempty"`
	Files         []*File                   `json:"files,omitempty"`
	TopicCouncils []*SupervisorTopicCouncil `json:"topicCouncils,omitempty"`
}

// TopicCouncil view cho Supervisor
type SupervisorTopicCouncil struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Stage       TopicStage                `json:"stage"`
	TopicCode   string                    `json:"topicCode"`
	CouncilCode *string                   `json:"councilCode,omitempty"`
	TimeStart   time.Time                 `json:"timeStart"`
	TimeEnd     time.Time                 `json:"timeEnd"`
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time                `json:"updatedAt,omitempty"`
	Topic       *SupervisorTopic          `json:"topic,omitempty"`
	Council     *Council                  `json:"council,omitempty"`
	Enrollments []*SupervisorEnrollment   `json:"enrollments,omitempty"`
	Supervisors []*TopicCouncilSupervisor `json:"supervisors,omitempty"`
}

// Topic_council_supervisor assignment cho Supervisor
// Đây là bảng nguồn - query từ đây: SELECT * FROM Topic_council_supervisor WHERE teacher_supervisor_code = current_user
type SupervisorTopicCouncilAssignment struct {
	ID                    string                  `json:"id"`
	TeacherSupervisorCode string                  `json:"teacherSupervisorCode"`
	TopicCouncilCode      string                  `json:"topicCouncilCode"`
	CreatedAt             *time.Time              `json:"createdAt,omitempty"`
	UpdatedAt             *time.Time              `json:"updatedAt,omitempty"`
	TopicCouncil          *SupervisorTopicCouncil `json:"topicCouncil,omitempty"`
}

type SupervisorTopicCouncilAssignmentListResponse struct {
	Total int32                               `json:"total"`
	Data  []*SupervisorTopicCouncilAssignment `json:"data"`
}

type SupervisorTopicCouncilListResponse struct {
	Total int32                     `json:"total"`
	Data  []*SupervisorTopicCouncil `json:"data"`
}

type Teacher struct {
	ID           string        `json:"id"`
	Email        string        `json:"email"`
	Username     string        `json:"username"`
	Gender       *Gender       `json:"gender,omitempty"`
	MajorCode    string        `json:"majorCode"`
	SemesterCode string        `json:"semesterCode"`
	CreatedAt    *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt    *time.Time    `json:"updatedAt,omitempty"`
	CreatedBy    *string       `json:"createdBy,omitempty"`
	UpdatedBy    *string       `json:"updatedBy,omitempty"`
	Roles        []*RoleSystem `json:"roles,omitempty"`
}

type TeacherListResponse struct {
	Total int32      `json:"total"`
	Data  []*Teacher `json:"data"`
}

type Topic struct {
	Total         *int32          `json:"total,omitempty"`
	ID            string          `json:"id"`
	Title         string          `json:"title"`
	MajorCode     string          `json:"majorCode"`
	SemesterCode  string          `json:"semesterCode"`
	Status        TopicStatus     `json:"status"`
	PercentStage1 *int32          `json:"percentStage1,omitempty"`
	PercentStage2 *int32          `json:"percentStage2,omitempty"`
	CreatedAt     *time.Time      `json:"createdAt,omitempty"`
	UpdatedAt     *time.Time      `json:"updatedAt,omitempty"`
	CreatedBy     *string         `json:"createdBy,omitempty"`
	UpdatedBy     *string         `json:"updatedBy,omitempty"`
	Files         []*File         `json:"files,omitempty"`
	TopicCouncils []*TopicCouncil `json:"topicCouncils,omitempty"`
}

type TopicCouncil struct {
	ID          string                    `json:"id"`
	Title       string                    `json:"title"`
	Stage       TopicStage                `json:"stage"`
	TopicCode   string                    `json:"topicCode"`
	CouncilCode *string                   `json:"councilCode,omitempty"`
	TimeStart   time.Time                 `json:"timeStart"`
	TimeEnd     time.Time                 `json:"timeEnd"`
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time                `json:"updatedAt,omitempty"`
	CreatedBy   *string                   `json:"createdBy,omitempty"`
	UpdatedBy   *string                   `json:"updatedBy,omitempty"`
	Topic       *Topic                    `json:"topic,omitempty"`
	Council     *Council                  `json:"council,omitempty"`
	Enrollments []*Enrollment             `json:"enrollments,omitempty"`
	Supervisors []*TopicCouncilSupervisor `json:"supervisors,omitempty"`
}

type TopicCouncilListResponse struct {
	Total int32           `json:"total"`
	Data  []*TopicCouncil `json:"data"`
}

type TopicCouncilSupervisor struct {
	ID                    string        `json:"id"`
	TeacherSupervisorCode string        `json:"teacherSupervisorCode"`
	TopicCouncilCode      string        `json:"topicCouncilCode"`
	CreatedAt             *time.Time    `json:"createdAt,omitempty"`
	UpdatedAt             *time.Time    `json:"updatedAt,omitempty"`
	CreatedBy             *string       `json:"createdBy,omitempty"`
	UpdatedBy             *string       `json:"updatedBy,omitempty"`
	Teacher               *Teacher      `json:"teacher,omitempty"`
	TopicCouncil          *TopicCouncil `json:"topicCouncil,omitempty"`
}

type TopicCouncilSupervisorListResponse struct {
	Total int32                     `json:"total"`
	Data  []*TopicCouncilSupervisor `json:"data"`
}

type TopicListResponse struct {
	Total int32    `json:"total"`
	Data  []*Topic `json:"data"`
}

type UpdateCouncilInput struct {
	Title     *string    `json:"title,omitempty"`
	TimeStart *time.Time `json:"timeStart,omitempty"`
}

type UpdateFacultyInput struct {
	Title *string `json:"title,omitempty"`
}

type UpdateGradeDefenceCriterionInput struct {
	Name     *string `json:"name,omitempty"`
	Score    *string `json:"score,omitempty"`
	MaxScore *string `json:"maxScore,omitempty"`
}

type UpdateGradeDefenceInput struct {
	Note       *string `json:"note,omitempty"`
	TotalScore *int32  `json:"totalScore,omitempty"`
}

type UpdateGradeReviewInput struct {
	ReviewGrade *int32       `json:"reviewGrade,omitempty"`
	Status      *FinalStatus `json:"status,omitempty"`
	Notes       *string      `json:"notes,omitempty"`
}

type UpdateMajorInput struct {
	Title       *string `json:"title,omitempty"`
	FacultyCode *string `json:"facultyCode,omitempty"`
}

type UpdateSemesterInput struct {
	Title *string `json:"title,omitempty"`
}

type UpdateStudentInput struct {
	Email        *string `json:"email,omitempty"`
	Phone        *string `json:"phone,omitempty"`
	Username     *string `json:"username,omitempty"`
	Gender       *Gender `json:"gender,omitempty"`
	MajorCode    *string `json:"majorCode,omitempty"`
	ClassCode    *string `json:"classCode,omitempty"`
	SemesterCode *string `json:"semesterCode,omitempty"`
}

type UpdateStudentProfileInput struct {
	Email    *string `json:"email,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	Username *string `json:"username,omitempty"`
}

type UpdateTeacherInput struct {
	Email        *string `json:"email,omitempty"`
	Username     *string `json:"username,omitempty"`
	Gender       *Gender `json:"gender,omitempty"`
	MajorCode    *string `json:"majorCode,omitempty"`
	SemesterCode *string `json:"semesterCode,omitempty"`
}

type UpdateTeacherProfileInput struct {
	Email    *string `json:"email,omitempty"`
	Username *string `json:"username,omitempty"`
}

type UpdateTopicInput struct {
	Title         *string      `json:"title,omitempty"`
	Status        *TopicStatus `json:"status,omitempty"`
	PercentStage1 *int32       `json:"percentStage1,omitempty"`
	PercentStage2 *int32       `json:"percentStage2,omitempty"`
}

type UploadFileInput struct {
	Title   string  `json:"title"`
	File    string  `json:"file"`
	TableID string  `json:"tableId"`
	Option  *string `json:"option,omitempty"`
}

// Vai trò trong hội đồng bảo vệ
type DefencePosition string

const (
	DefencePositionPresident DefencePosition = "PRESIDENT"
	DefencePositionSecretary DefencePosition = "SECRETARY"
	DefencePositionReviewer  DefencePosition = "REVIEWER"
	DefencePositionMember    DefencePosition = "MEMBER"
)

var AllDefencePosition = []DefencePosition{
	DefencePositionPresident,
	DefencePositionSecretary,
	DefencePositionReviewer,
	DefencePositionMember,
}

func (e DefencePosition) IsValid() bool {
	switch e {
	case DefencePositionPresident, DefencePositionSecretary, DefencePositionReviewer, DefencePositionMember:
		return true
	}
	return false
}

func (e DefencePosition) String() string {
	return string(e)
}

func (e *DefencePosition) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DefencePosition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DefencePosition", str)
	}
	return nil
}

func (e DefencePosition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DefencePosition) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DefencePosition) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Trạng thái file
type FileStatus string

const (
	FileStatusFilePending FileStatus = "FILE_PENDING"
	FileStatusApproved    FileStatus = "APPROVED"
	FileStatusRejected    FileStatus = "REJECTED"
)

var AllFileStatus = []FileStatus{
	FileStatusFilePending,
	FileStatusApproved,
	FileStatusRejected,
}

func (e FileStatus) IsValid() bool {
	switch e {
	case FileStatusFilePending, FileStatusApproved, FileStatusRejected:
		return true
	}
	return false
}

func (e FileStatus) String() string {
	return string(e)
}

func (e *FileStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileStatus", str)
	}
	return nil
}

func (e FileStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FileStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FileStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Bảng đính kèm file
type FileTable string

const (
	FileTableTopic   FileTable = "TOPIC"
	FileTableMidterm FileTable = "MIDTERM"
	FileTableFinal   FileTable = "FINAL"
	FileTableOrder   FileTable = "ORDER"
)

var AllFileTable = []FileTable{
	FileTableTopic,
	FileTableMidterm,
	FileTableFinal,
	FileTableOrder,
}

func (e FileTable) IsValid() bool {
	switch e {
	case FileTableTopic, FileTableMidterm, FileTableFinal, FileTableOrder:
		return true
	}
	return false
}

func (e FileTable) String() string {
	return string(e)
}

func (e *FileTable) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FileTable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FileTable", str)
	}
	return nil
}

func (e FileTable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FileTable) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FileTable) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type FilterOperator string

const (
	FilterOperatorEqual            FilterOperator = "EQUAL"
	FilterOperatorNotEqual         FilterOperator = "NOT_EQUAL"
	FilterOperatorGreaterThan      FilterOperator = "GREATER_THAN"
	FilterOperatorGreaterThanEqual FilterOperator = "GREATER_THAN_EQUAL"
	FilterOperatorLessThan         FilterOperator = "LESS_THAN"
	FilterOperatorLessThanEqual    FilterOperator = "LESS_THAN_EQUAL"
	FilterOperatorLike             FilterOperator = "LIKE"
	FilterOperatorIn               FilterOperator = "IN"
	FilterOperatorNotIn            FilterOperator = "NOT_IN"
	FilterOperatorIsNull           FilterOperator = "IS_NULL"
	FilterOperatorIsNotNull        FilterOperator = "IS_NOT_NULL"
	FilterOperatorBetween          FilterOperator = "BETWEEN"
)

var AllFilterOperator = []FilterOperator{
	FilterOperatorEqual,
	FilterOperatorNotEqual,
	FilterOperatorGreaterThan,
	FilterOperatorGreaterThanEqual,
	FilterOperatorLessThan,
	FilterOperatorLessThanEqual,
	FilterOperatorLike,
	FilterOperatorIn,
	FilterOperatorNotIn,
	FilterOperatorIsNull,
	FilterOperatorIsNotNull,
	FilterOperatorBetween,
}

func (e FilterOperator) IsValid() bool {
	switch e {
	case FilterOperatorEqual, FilterOperatorNotEqual, FilterOperatorGreaterThan, FilterOperatorGreaterThanEqual, FilterOperatorLessThan, FilterOperatorLessThanEqual, FilterOperatorLike, FilterOperatorIn, FilterOperatorNotIn, FilterOperatorIsNull, FilterOperatorIsNotNull, FilterOperatorBetween:
		return true
	}
	return false
}

func (e FilterOperator) String() string {
	return string(e)
}

func (e *FilterOperator) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOperator", str)
	}
	return nil
}

func (e FilterOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FilterOperator) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FilterOperator) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Trạng thái đồ án cuối cùng
type FinalStatus string

const (
	FinalStatusPending   FinalStatus = "PENDING"
	FinalStatusPassed    FinalStatus = "PASSED"
	FinalStatusFailed    FinalStatus = "FAILED"
	FinalStatusCompleted FinalStatus = "COMPLETED"
)

var AllFinalStatus = []FinalStatus{
	FinalStatusPending,
	FinalStatusPassed,
	FinalStatusFailed,
	FinalStatusCompleted,
}

func (e FinalStatus) IsValid() bool {
	switch e {
	case FinalStatusPending, FinalStatusPassed, FinalStatusFailed, FinalStatusCompleted:
		return true
	}
	return false
}

func (e FinalStatus) String() string {
	return string(e)
}

func (e *FinalStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FinalStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FinalStatus", str)
	}
	return nil
}

func (e FinalStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *FinalStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e FinalStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Giới tính
type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOther  Gender = "OTHER"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Gender) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Gender) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type LogicalCondition string

const (
	LogicalConditionAnd LogicalCondition = "AND"
	LogicalConditionOr  LogicalCondition = "OR"
)

var AllLogicalCondition = []LogicalCondition{
	LogicalConditionAnd,
	LogicalConditionOr,
}

func (e LogicalCondition) IsValid() bool {
	switch e {
	case LogicalConditionAnd, LogicalConditionOr:
		return true
	}
	return false
}

func (e LogicalCondition) String() string {
	return string(e)
}

func (e *LogicalCondition) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LogicalCondition(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LogicalCondition", str)
	}
	return nil
}

func (e LogicalCondition) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *LogicalCondition) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e LogicalCondition) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Trạng thái giữa kỳ
type MidtermStatus string

const (
	MidtermStatusNotSubmitted MidtermStatus = "NOT_SUBMITTED"
	MidtermStatusSubmitted    MidtermStatus = "SUBMITTED"
	MidtermStatusPass         MidtermStatus = "PASS"
	MidtermStatusFail         MidtermStatus = "FAIL"
)

var AllMidtermStatus = []MidtermStatus{
	MidtermStatusNotSubmitted,
	MidtermStatusSubmitted,
	MidtermStatusPass,
	MidtermStatusFail,
}

func (e MidtermStatus) IsValid() bool {
	switch e {
	case MidtermStatusNotSubmitted, MidtermStatusSubmitted, MidtermStatusPass, MidtermStatusFail:
		return true
	}
	return false
}

func (e MidtermStatus) String() string {
	return string(e)
}

func (e *MidtermStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MidtermStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MidtermStatus", str)
	}
	return nil
}

func (e MidtermStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MidtermStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MidtermStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleTeacher Role = "TEACHER"
	RoleStudent Role = "STUDENT"
)

var AllRole = []Role{
	RoleTeacher,
	RoleStudent,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleTeacher, RoleStudent:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Vai trò STATIC trong hệ thống
// Role động (Supervisor, Reviewer, Council Member) được xác định qua:
// - Supervisor: bảng Topic_council_supervisor
// - Reviewer: bảng Grade_review
// - Council Member: bảng Defence
type RoleSystemRole string

const (
	RoleSystemRoleAcademicAffairsStaff RoleSystemRole = "ACADEMIC_AFFAIRS_STAFF"
	RoleSystemRoleDepartmentLecturer   RoleSystemRole = "DEPARTMENT_LECTURER"
	RoleSystemRoleTeacher              RoleSystemRole = "TEACHER"
)

var AllRoleSystemRole = []RoleSystemRole{
	RoleSystemRoleAcademicAffairsStaff,
	RoleSystemRoleDepartmentLecturer,
	RoleSystemRoleTeacher,
}

func (e RoleSystemRole) IsValid() bool {
	switch e {
	case RoleSystemRoleAcademicAffairsStaff, RoleSystemRoleDepartmentLecturer, RoleSystemRoleTeacher:
		return true
	}
	return false
}

func (e RoleSystemRole) String() string {
	return string(e)
}

func (e *RoleSystemRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RoleSystemRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RoleSystemRole", str)
	}
	return nil
}

func (e RoleSystemRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RoleSystemRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RoleSystemRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Giai đoạn đề tài
type TopicStage string

const (
	TopicStageStageDacn TopicStage = "STAGE_DACN"
	TopicStageStageLvtn TopicStage = "STAGE_LVTN"
)

var AllTopicStage = []TopicStage{
	TopicStageStageDacn,
	TopicStageStageLvtn,
}

func (e TopicStage) IsValid() bool {
	switch e {
	case TopicStageStageDacn, TopicStageStageLvtn:
		return true
	}
	return false
}

func (e TopicStage) String() string {
	return string(e)
}

func (e *TopicStage) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopicStage(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopicStage", str)
	}
	return nil
}

func (e TopicStage) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TopicStage) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TopicStage) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// Trạng thái đề tài
type TopicStatus string

const (
	TopicStatusSubmit         TopicStatus = "SUBMIT"
	TopicStatusTopicPending   TopicStatus = "TOPIC_PENDING"
	TopicStatusApproved1      TopicStatus = "APPROVED_1"
	TopicStatusApproved2      TopicStatus = "APPROVED_2"
	TopicStatusInProgress     TopicStatus = "IN_PROGRESS"
	TopicStatusTopicCompleted TopicStatus = "TOPIC_COMPLETED"
	TopicStatusRejected       TopicStatus = "REJECTED"
)

var AllTopicStatus = []TopicStatus{
	TopicStatusSubmit,
	TopicStatusTopicPending,
	TopicStatusApproved1,
	TopicStatusApproved2,
	TopicStatusInProgress,
	TopicStatusTopicCompleted,
	TopicStatusRejected,
}

func (e TopicStatus) IsValid() bool {
	switch e {
	case TopicStatusSubmit, TopicStatusTopicPending, TopicStatusApproved1, TopicStatusApproved2, TopicStatusInProgress, TopicStatusTopicCompleted, TopicStatusRejected:
		return true
	}
	return false
}

func (e TopicStatus) String() string {
	return string(e)
}

func (e *TopicStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TopicStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TopicStatus", str)
	}
	return nil
}

func (e TopicStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TopicStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TopicStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
