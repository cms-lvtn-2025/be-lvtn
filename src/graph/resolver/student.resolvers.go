package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// UpdateMyProfile is the resolver for the updateMyProfile field.
func (r *mutationResolver) UpdateMyProfile(ctx context.Context, input model.UpdateStudentProfileInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: UpdateMyProfile - updateMyProfile"))
}

// UploadMidtermFile is the resolver for the uploadMidtermFile field.
func (r *mutationResolver) UploadMidtermFile(ctx context.Context, input model.UploadFileInput) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UploadMidtermFile - uploadMidtermFile"))
}

// UploadFinalFile is the resolver for the uploadFinalFile field.
func (r *mutationResolver) UploadFinalFile(ctx context.Context, input model.UploadFileInput) (*model.File, error) {
	panic(fmt.Errorf("not implemented: UploadFinalFile - uploadFinalFile"))
}

// GetMyProfile is the resolver for the getMyProfile field.
func (r *queryResolver) GetMyProfile(ctx context.Context) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: GetMyProfile - getMyProfile"))
}

// GetMyEnrollments is the resolver for the getMyEnrollments field.
func (r *queryResolver) GetMyEnrollments(ctx context.Context, search *model.SearchRequestInput) ([]*model.StudentEnrollment, error) {
	panic(fmt.Errorf("not implemented: GetMyEnrollments - getMyEnrollments"))
}

// GetMyEnrollmentDetail is the resolver for the getMyEnrollmentDetail field.
func (r *queryResolver) GetMyEnrollmentDetail(ctx context.Context, id string) (*model.StudentEnrollment, error) {
	panic(fmt.Errorf("not implemented: GetMyEnrollmentDetail - getMyEnrollmentDetail"))
}

// GetMySemesters is the resolver for the getMySemesters field.
func (r *queryResolver) GetMySemesters(ctx context.Context, search *model.SearchRequestInput) ([]*model.Semester, error) {
	panic(fmt.Errorf("not implemented: GetMySemesters - getMySemesters"))
}

// Major is the resolver for the major field.
func (r *studentCouncilResolver) Major(ctx context.Context, obj *model.StudentCouncil) (*model.MajorInfo, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *studentCouncilResolver) Semester(ctx context.Context, obj *model.StudentCouncil) (*model.SemesterInfo, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Defences is the resolver for the defences field.
func (r *studentCouncilResolver) Defences(ctx context.Context, obj *model.StudentCouncil) ([]*model.StudentDefenceInfo, error) {
	panic(fmt.Errorf("not implemented: Defences - defences"))
}

// Teacher is the resolver for the teacher field.
func (r *studentDefenceInfoResolver) Teacher(ctx context.Context, obj *model.StudentDefenceInfo) (*model.StudentTeacherInfo, error) {
	panic(fmt.Errorf("not implemented: Teacher - teacher"))
}

// TopicCouncil is the resolver for the topicCouncil field.
func (r *studentEnrollmentResolver) TopicCouncil(ctx context.Context, obj *model.StudentEnrollment) (*model.StudentTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncil - topicCouncil"))
}

// Midterm is the resolver for the midterm field.
func (r *studentEnrollmentResolver) Midterm(ctx context.Context, obj *model.StudentEnrollment) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: Midterm - midterm"))
}

// Final is the resolver for the final field.
func (r *studentEnrollmentResolver) Final(ctx context.Context, obj *model.StudentEnrollment) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: Final - final"))
}

// GradeReview is the resolver for the gradeReview field.
func (r *studentEnrollmentResolver) GradeReview(ctx context.Context, obj *model.StudentEnrollment) (*model.GradeReview, error) {
	panic(fmt.Errorf("not implemented: GradeReview - gradeReview"))
}

// GradeDefences is the resolver for the gradeDefences field.
func (r *studentEnrollmentResolver) GradeDefences(ctx context.Context, obj *model.StudentEnrollment) ([]*model.StudentGradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefences - gradeDefences"))
}

// Criteria is the resolver for the criteria field.
func (r *studentGradeDefenceResolver) Criteria(ctx context.Context, obj *model.StudentGradeDefence) ([]*model.GradeDefenceCriterion, error) {
	panic(fmt.Errorf("not implemented: Criteria - criteria"))
}

// Defence is the resolver for the defence field.
func (r *studentGradeDefenceResolver) Defence(ctx context.Context, obj *model.StudentGradeDefence) (*model.StudentDefenceInfo, error) {
	panic(fmt.Errorf("not implemented: Defence - defence"))
}

// Major is the resolver for the major field.
func (r *studentTopicResolver) Major(ctx context.Context, obj *model.StudentTopic) (*model.MajorInfo, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *studentTopicResolver) Semester(ctx context.Context, obj *model.StudentTopic) (*model.SemesterInfo, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Files is the resolver for the files field.
func (r *studentTopicResolver) Files(ctx context.Context, obj *model.StudentTopic) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// Topic is the resolver for the topic field.
func (r *studentTopicCouncilResolver) Topic(ctx context.Context, obj *model.StudentTopicCouncil) (*model.StudentTopic, error) {
	panic(fmt.Errorf("not implemented: Topic - topic"))
}

// Supervisors is the resolver for the supervisors field.
func (r *studentTopicCouncilResolver) Supervisors(ctx context.Context, obj *model.StudentTopicCouncil) ([]*model.StudentTopicSupervisor, error) {
	panic(fmt.Errorf("not implemented: Supervisors - supervisors"))
}

// Council is the resolver for the council field.
func (r *studentTopicCouncilResolver) Council(ctx context.Context, obj *model.StudentTopicCouncil) (*model.StudentCouncil, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Teacher is the resolver for the teacher field.
func (r *studentTopicSupervisorResolver) Teacher(ctx context.Context, obj *model.StudentTopicSupervisor) (*model.StudentTeacherInfo, error) {
	panic(fmt.Errorf("not implemented: Teacher - teacher"))
}

// StudentCouncil returns generated.StudentCouncilResolver implementation.
func (r *Resolver) StudentCouncil() generated.StudentCouncilResolver {
	return &studentCouncilResolver{r}
}

// StudentDefenceInfo returns generated.StudentDefenceInfoResolver implementation.
func (r *Resolver) StudentDefenceInfo() generated.StudentDefenceInfoResolver {
	return &studentDefenceInfoResolver{r}
}

// StudentEnrollment returns generated.StudentEnrollmentResolver implementation.
func (r *Resolver) StudentEnrollment() generated.StudentEnrollmentResolver {
	return &studentEnrollmentResolver{r}
}

// StudentGradeDefence returns generated.StudentGradeDefenceResolver implementation.
func (r *Resolver) StudentGradeDefence() generated.StudentGradeDefenceResolver {
	return &studentGradeDefenceResolver{r}
}

// StudentTopic returns generated.StudentTopicResolver implementation.
func (r *Resolver) StudentTopic() generated.StudentTopicResolver { return &studentTopicResolver{r} }

// StudentTopicCouncil returns generated.StudentTopicCouncilResolver implementation.
func (r *Resolver) StudentTopicCouncil() generated.StudentTopicCouncilResolver {
	return &studentTopicCouncilResolver{r}
}

// StudentTopicSupervisor returns generated.StudentTopicSupervisorResolver implementation.
func (r *Resolver) StudentTopicSupervisor() generated.StudentTopicSupervisorResolver {
	return &studentTopicSupervisorResolver{r}
}

type studentCouncilResolver struct{ *Resolver }
type studentDefenceInfoResolver struct{ *Resolver }
type studentEnrollmentResolver struct{ *Resolver }
type studentGradeDefenceResolver struct{ *Resolver }
type studentTopicResolver struct{ *Resolver }
type studentTopicCouncilResolver struct{ *Resolver }
type studentTopicSupervisorResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *studentTeacherInfoResolver) Major(ctx context.Context, obj *model.StudentTeacherInfo) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}
func (r *Resolver) StudentTeacherInfo() generated.StudentTeacherInfoResolver {
	return &studentTeacherInfoResolver{r}
}
type studentTeacherInfoResolver struct{ *Resolver }
*/
