package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/model"
	"time"
)

// CreateTeacher is the resolver for the createTeacher field.
func (r *mutationResolver) CreateTeacher(ctx context.Context, input model.CreateTeacherInput) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: CreateTeacher - createTeacher"))
}

// UpdateTeacher is the resolver for the updateTeacher field.
func (r *mutationResolver) UpdateTeacher(ctx context.Context, id string, input model.UpdateTeacherInput) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: UpdateTeacher - updateTeacher"))
}

// DeleteTeacher is the resolver for the deleteTeacher field.
func (r *mutationResolver) DeleteTeacher(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTeacher - deleteTeacher"))
}

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input model.CreateStudentInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: CreateStudent - createStudent"))
}

// UpdateStudent is the resolver for the updateStudent field.
func (r *mutationResolver) UpdateStudent(ctx context.Context, id string, input model.UpdateStudentInput) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: UpdateStudent - updateStudent"))
}

// DeleteStudent is the resolver for the deleteStudent field.
func (r *mutationResolver) DeleteStudent(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteStudent - deleteStudent"))
}

// CreateSemester is the resolver for the createSemester field.
func (r *mutationResolver) CreateSemester(ctx context.Context, input model.CreateSemesterInput) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: CreateSemester - createSemester"))
}

// UpdateSemester is the resolver for the updateSemester field.
func (r *mutationResolver) UpdateSemester(ctx context.Context, id string, input model.UpdateSemesterInput) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: UpdateSemester - updateSemester"))
}

// DeleteSemester is the resolver for the deleteSemester field.
func (r *mutationResolver) DeleteSemester(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSemester - deleteSemester"))
}

// CreateMajor is the resolver for the createMajor field.
func (r *mutationResolver) CreateMajor(ctx context.Context, input model.CreateMajorInput) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: CreateMajor - createMajor"))
}

// UpdateMajor is the resolver for the updateMajor field.
func (r *mutationResolver) UpdateMajor(ctx context.Context, id string, input model.UpdateMajorInput) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: UpdateMajor - updateMajor"))
}

// DeleteMajor is the resolver for the deleteMajor field.
func (r *mutationResolver) DeleteMajor(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMajor - deleteMajor"))
}

// CreateFaculty is the resolver for the createFaculty field.
func (r *mutationResolver) CreateFaculty(ctx context.Context, input model.CreateFacultyInput) (*model.Faculty, error) {
	panic(fmt.Errorf("not implemented: CreateFaculty - createFaculty"))
}

// UpdateFaculty is the resolver for the updateFaculty field.
func (r *mutationResolver) UpdateFaculty(ctx context.Context, id string, input model.UpdateFacultyInput) (*model.Faculty, error) {
	panic(fmt.Errorf("not implemented: UpdateFaculty - updateFaculty"))
}

// DeleteFaculty is the resolver for the deleteFaculty field.
func (r *mutationResolver) DeleteFaculty(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFaculty - deleteFaculty"))
}

// ApproveCouncil is the resolver for the approveCouncil field.
func (r *mutationResolver) ApproveCouncil(ctx context.Context, id string, timeStart time.Time) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: ApproveCouncil - approveCouncil"))
}

// UpdateCouncil is the resolver for the updateCouncil field.
func (r *mutationResolver) UpdateCouncil(ctx context.Context, id string, input model.UpdateCouncilInput) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: UpdateCouncil - updateCouncil"))
}

// DeleteCouncil is the resolver for the deleteCouncil field.
func (r *mutationResolver) DeleteCouncil(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCouncil - deleteCouncil"))
}

// ApproveTopic is the resolver for the approveTopic field.
func (r *mutationResolver) ApproveTopic(ctx context.Context, id string) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: ApproveTopic - approveTopic"))
}

// RejectTopic is the resolver for the rejectTopic field.
func (r *mutationResolver) RejectTopic(ctx context.Context, id string, reason *string) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: RejectTopic - rejectTopic"))
}

// UpdateTopic is the resolver for the updateTopic field.
func (r *mutationResolver) UpdateTopic(ctx context.Context, id string, input model.UpdateTopicInput) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: UpdateTopic - updateTopic"))
}

// DeleteTopic is the resolver for the deleteTopic field.
func (r *mutationResolver) DeleteTopic(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTopic - deleteTopic"))
}

// GetListTeachers is the resolver for the getListTeachers field.
func (r *queryResolver) GetListTeachers(ctx context.Context, search model.SearchRequestInput) (*model.TeacherListResponse, error) {
	panic(fmt.Errorf("not implemented: GetListTeachers - getListTeachers"))
}

// GetListStudents is the resolver for the getListStudents field.
func (r *queryResolver) GetListStudents(ctx context.Context, search model.SearchRequestInput) (*model.StudentListResponse, error) {
	panic(fmt.Errorf("not implemented: GetListStudents - getListStudents"))
}

// GetStudentDetail is the resolver for the getStudentDetail field.
func (r *queryResolver) GetStudentDetail(ctx context.Context, id string) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: GetStudentDetail - getStudentDetail"))
}

// GetTeacherDetail is the resolver for the getTeacherDetail field.
func (r *queryResolver) GetTeacherDetail(ctx context.Context, id string) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: GetTeacherDetail - getTeacherDetail"))
}

// GetAllSemesters is the resolver for the getAllSemesters field.
func (r *queryResolver) GetAllSemesters(ctx context.Context, search model.SearchRequestInput) (*model.SemesterListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllSemesters - getAllSemesters"))
}

// GetAllMajors is the resolver for the getAllMajors field.
func (r *queryResolver) GetAllMajors(ctx context.Context, search model.SearchRequestInput) (*model.MajorListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllMajors - getAllMajors"))
}

// GetAllFaculties is the resolver for the getAllFaculties field.
func (r *queryResolver) GetAllFaculties(ctx context.Context, search model.SearchRequestInput) (*model.FacultyListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllFaculties - getAllFaculties"))
}

// GetAllTopics is the resolver for the getAllTopics field.
func (r *queryResolver) GetAllTopics(ctx context.Context, search model.SearchRequestInput) (*model.TopicListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllTopics - getAllTopics"))
}

// GetTopicDetail is the resolver for the getTopicDetail field.
func (r *queryResolver) GetTopicDetail(ctx context.Context, id string) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: GetTopicDetail - getTopicDetail"))
}

// GetAllEnrollments is the resolver for the getAllEnrollments field.
func (r *queryResolver) GetAllEnrollments(ctx context.Context, search model.SearchRequestInput) (*model.EnrollmentListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllEnrollments - getAllEnrollments"))
}

// GetEnrollmentDetail is the resolver for the getEnrollmentDetail field.
func (r *queryResolver) GetEnrollmentDetail(ctx context.Context, id string) (*model.Enrollment, error) {
	panic(fmt.Errorf("not implemented: GetEnrollmentDetail - getEnrollmentDetail"))
}

// GetAllCouncils is the resolver for the getAllCouncils field.
func (r *queryResolver) GetAllCouncils(ctx context.Context, search model.SearchRequestInput) (*model.CouncilListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllCouncils - getAllCouncils"))
}

// GetCouncilDetail is the resolver for the getCouncilDetail field.
func (r *queryResolver) GetCouncilDetail(ctx context.Context, id string) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: GetCouncilDetail - getCouncilDetail"))
}

// GetDefencesByCouncil is the resolver for the getDefencesByCouncil field.
func (r *queryResolver) GetDefencesByCouncil(ctx context.Context, councilID string) (*model.DefenceListResponse, error) {
	panic(fmt.Errorf("not implemented: GetDefencesByCouncil - getDefencesByCouncil"))
}

// GetAllGradeDefences is the resolver for the getAllGradeDefences field.
func (r *queryResolver) GetAllGradeDefences(ctx context.Context, search model.SearchRequestInput) (*model.GradeDefenceListResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllGradeDefences - getAllGradeDefences"))
}
