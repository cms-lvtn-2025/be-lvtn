package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Major is the resolver for the major field.
func (r *studentResolver) Major(ctx context.Context, obj *model.Student) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *studentResolver) Semester(ctx context.Context, obj *model.Student) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Enrollments is the resolver for the enrollments field.
func (r *studentResolver) Enrollments(ctx context.Context, obj *model.Student) ([]*model.Enrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollments - enrollments"))
}

// Major is the resolver for the major field.
func (r *teacherResolver) Major(ctx context.Context, obj *model.Teacher) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *teacherResolver) Semester(ctx context.Context, obj *model.Teacher) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Roles is the resolver for the roles field.
func (r *teacherResolver) Roles(ctx context.Context, obj *model.Teacher) ([]*model.RoleSystem, error) {
	return r.Ctrl.GetRole(ctx, obj.ID)
}

// TopicsSupervised is the resolver for the topicsSupervised field.
func (r *teacherResolver) TopicsSupervised(ctx context.Context, obj *model.Teacher) ([]*model.Topic, error) {
	panic(fmt.Errorf("not implemented: TopicsSupervised - topicsSupervised"))
}

// Student returns generated.StudentResolver implementation.
func (r *Resolver) Student() generated.StudentResolver { return &studentResolver{r} }

// Teacher returns generated.TeacherResolver implementation.
func (r *Resolver) Teacher() generated.TeacherResolver { return &teacherResolver{r} }

type studentResolver struct{ *Resolver }
type teacherResolver struct{ *Resolver }
