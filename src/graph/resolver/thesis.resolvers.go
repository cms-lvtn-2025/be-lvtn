package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Student is the resolver for the student field.
func (r *enrollmentResolver) Student(ctx context.Context, obj *model.Enrollment) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// Midterm is the resolver for the midterm field.
func (r *enrollmentResolver) Midterm(ctx context.Context, obj *model.Enrollment) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: Midterm - midterm"))
}

// Final is the resolver for the final field.
func (r *enrollmentResolver) Final(ctx context.Context, obj *model.Enrollment) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: Final - final"))
}

// Enrollment is the resolver for the enrollment field.
func (r *topicResolver) Enrollment(ctx context.Context, obj *model.Topic) ([]*model.Enrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollment - enrollment"))
}

// TeacherSupervisor is the resolver for the teacherSupervisor field.
func (r *topicResolver) TeacherSupervisor(ctx context.Context, obj *model.Topic) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: TeacherSupervisor - teacherSupervisor"))
}

// Enrollment returns generated.EnrollmentResolver implementation.
func (r *Resolver) Enrollment() generated.EnrollmentResolver { return &enrollmentResolver{r} }

// Topic returns generated.TopicResolver implementation.
func (r *Resolver) Topic() generated.TopicResolver { return &topicResolver{r} }

type enrollmentResolver struct{ *Resolver }
type topicResolver struct{ *Resolver }
