package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/dataloader"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Student is the resolver for the student field.
func (r *enrollmentResolver) Student(ctx context.Context, obj *model.Enrollment) (*model.Student, error) {
	// TODO: Implement student lookup via dataloader or direct call
	// For now, return nil to avoid panics
	return nil, nil
}

// Midterm is the resolver for the midterm field.
func (r *enrollmentResolver) Midterm(ctx context.Context, obj *model.Enrollment) (*model.Midterm, error) {
	// Check if MidtermCode is nil or empty
	if obj.MidtermCode == nil || *obj.MidtermCode == "" {
		return nil, nil
	}

	// Try to use DataLoader first
	loaders := dataloader.GetLoaders(ctx)
	if loaders != nil && loaders.MidtermByID != nil {
		midterm, err := loaders.MidtermByID.Load(ctx, *obj.MidtermCode)
		if err != nil {
			// Log error but return nil instead of propagating error
			// This prevents GraphQL from crashing on partial failures
			//fmt.Printf("[Resolver] Failed to load midterm %s: %v\n", *obj.MidtermCode, err)
			return nil, nil
		}
		return midterm, nil
	}

	// Fallback to direct call if DataLoader is not available
	midterm, err := r.Ctrl.GetMidterm(ctx, obj.MidtermCode)
	if err != nil {
		fmt.Printf("[Resolver] Failed to get midterm %s: %v\n", *obj.MidtermCode, err)
		return nil, nil
	}
	return midterm, nil
}

// Final is the resolver for the final field.
func (r *enrollmentResolver) Final(ctx context.Context, obj *model.Enrollment) (*model.Final, error) {
	// TODO: Implement final lookup via dataloader or direct call
	// For now, return nil to avoid panics
	return nil, nil
}

// Enrollment returns generated.EnrollmentResolver implementation.
func (r *Resolver) Enrollment() generated.EnrollmentResolver { return &enrollmentResolver{r} }

type enrollmentResolver struct{ *Resolver }
