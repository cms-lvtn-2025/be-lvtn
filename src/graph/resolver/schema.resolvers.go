package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// GetInfoStudent is the resolver for the getInfoStudent field.
func (r *queryResolver) GetInfoStudent(ctx context.Context) (*model.Student, error) {
	return r.Ctrl.GetInfoStudent(ctx)
}

// GetInfoTeacher is the resolver for the getInfoTeacher field.
func (r *queryResolver) GetInfoTeacher(ctx context.Context) (*model.Teacher, error) {
	return r.Ctrl.GetInfoTeacher(ctx)
}

// GetListTopic is the resolver for the getListTopic field.
func (r *queryResolver) GetListTopic(ctx context.Context, search model.SearchRequestInput) ([]*model.Topic, error) {
	return r.Ctrl.GetTopics(ctx, search)
}

// GetListCouncil is the resolver for the getListCouncil field.
func (r *queryResolver) GetListCouncil(ctx context.Context, search model.SearchRequestInput) ([]*model.Council, error) {
	panic(fmt.Errorf("not implemented: GetListCouncil - getListCouncil"))
}

// GetTopics is the resolver for the getTopics field.
func (r *queryResolver) GetTopics(ctx context.Context, page *int32, pageSize *int32, sortBy *string, descending *bool) ([]*model.Topic, error) {
	// Build SearchRequestInput from simple parameters
	search := model.SearchRequestInput{
		Pagination: &model.PaginationInput{
			Page:       page,
			PageSize:   pageSize,
			SortBy:     sortBy,
			Descending: descending,
		},
		Filters: nil, // No filters for simple query
	}
	return r.Ctrl.GetTopics(ctx, search)
}

// GetCouncils is the resolver for the getCouncils field.
func (r *queryResolver) GetCouncils(ctx context.Context, page *int32, pageSize *int32, sortBy *string, descending *bool) ([]*model.Council, error) {
	// Build SearchRequestInput from simple parameters
	search := model.SearchRequestInput{
		Pagination: &model.PaginationInput{
			Page:       page,
			PageSize:   pageSize,
			SortBy:     sortBy,
			Descending: descending,
		},
		Filters: nil, // No filters for simple query
	}
	return r.Ctrl.GetListCouncil(ctx, search)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
