package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Council is the resolver for the council field.
func (r *councilDefenceResolver) Council(ctx context.Context, obj *model.CouncilDefence) (*model.CouncilMemberCouncil, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Teacher is the resolver for the teacher field.
func (r *councilDefenceResolver) Teacher(ctx context.Context, obj *model.CouncilDefence) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: Teacher - teacher"))
}

// GradeDefences is the resolver for the gradeDefences field.
func (r *councilDefenceResolver) GradeDefences(ctx context.Context, obj *model.CouncilDefence) ([]*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefences - gradeDefences"))
}

// Student is the resolver for the student field.
func (r *councilEnrollmentResolver) Student(ctx context.Context, obj *model.CouncilEnrollment) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// TopicCouncil is the resolver for the topicCouncil field.
func (r *councilEnrollmentResolver) TopicCouncil(ctx context.Context, obj *model.CouncilEnrollment) (*model.CouncilTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncil - topicCouncil"))
}

// Midterm is the resolver for the midterm field.
func (r *councilEnrollmentResolver) Midterm(ctx context.Context, obj *model.CouncilEnrollment) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: Midterm - midterm"))
}

// Final is the resolver for the final field.
func (r *councilEnrollmentResolver) Final(ctx context.Context, obj *model.CouncilEnrollment) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: Final - final"))
}

// GradeReview is the resolver for the gradeReview field.
func (r *councilEnrollmentResolver) GradeReview(ctx context.Context, obj *model.CouncilEnrollment) (*model.GradeReview, error) {
	panic(fmt.Errorf("not implemented: GradeReview - gradeReview"))
}

// GradeDefences is the resolver for the gradeDefences field.
func (r *councilEnrollmentResolver) GradeDefences(ctx context.Context, obj *model.CouncilEnrollment) ([]*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefences - gradeDefences"))
}

// Major is the resolver for the major field.
func (r *councilMemberCouncilResolver) Major(ctx context.Context, obj *model.CouncilMemberCouncil) (*model.MajorInfo, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *councilMemberCouncilResolver) Semester(ctx context.Context, obj *model.CouncilMemberCouncil) (*model.SemesterInfo, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Defences is the resolver for the defences field.
func (r *councilMemberCouncilResolver) Defences(ctx context.Context, obj *model.CouncilMemberCouncil) ([]*model.CouncilDefence, error) {
	panic(fmt.Errorf("not implemented: Defences - defences"))
}

// TopicCouncils is the resolver for the topicCouncils field.
func (r *councilMemberCouncilResolver) TopicCouncils(ctx context.Context, obj *model.CouncilMemberCouncil) ([]*model.CouncilTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncils - topicCouncils"))
}

// Topic is the resolver for the topic field.
func (r *councilTopicCouncilResolver) Topic(ctx context.Context, obj *model.CouncilTopicCouncil) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: Topic - topic"))
}

// Council is the resolver for the council field.
func (r *councilTopicCouncilResolver) Council(ctx context.Context, obj *model.CouncilTopicCouncil) (*model.CouncilMemberCouncil, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Enrollments is the resolver for the enrollments field.
func (r *councilTopicCouncilResolver) Enrollments(ctx context.Context, obj *model.CouncilTopicCouncil) ([]*model.CouncilEnrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollments - enrollments"))
}

// Supervisors is the resolver for the supervisors field.
func (r *councilTopicCouncilResolver) Supervisors(ctx context.Context, obj *model.CouncilTopicCouncil) ([]*model.TopicCouncilSupervisor, error) {
	panic(fmt.Errorf("not implemented: Supervisors - supervisors"))
}

// UpdateMyTeacherProfile is the resolver for the updateMyTeacherProfile field.
func (r *mutationResolver) UpdateMyTeacherProfile(ctx context.Context, input model.UpdateTeacherProfileInput) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: UpdateMyTeacherProfile - updateMyTeacherProfile"))
}

// GradeMidterm is the resolver for the gradeMidterm field.
func (r *mutationResolver) GradeMidterm(ctx context.Context, enrollmentID string, input model.GradeMidtermInput) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: GradeMidterm - gradeMidterm"))
}

// FeedbackMidterm is the resolver for the feedbackMidterm field.
func (r *mutationResolver) FeedbackMidterm(ctx context.Context, midtermID string, feedback string) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: FeedbackMidterm - feedbackMidterm"))
}

// GradeFinal is the resolver for the gradeFinal field.
func (r *mutationResolver) GradeFinal(ctx context.Context, enrollmentID string, input model.GradeFinalInput) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: GradeFinal - gradeFinal"))
}

// FeedbackFinal is the resolver for the feedbackFinal field.
func (r *mutationResolver) FeedbackFinal(ctx context.Context, finalID string, notes string) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: FeedbackFinal - feedbackFinal"))
}

// ApproveMidtermFile is the resolver for the approveMidtermFile field.
func (r *mutationResolver) ApproveMidtermFile(ctx context.Context, fileID string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: ApproveMidtermFile - approveMidtermFile"))
}

// RejectMidtermFile is the resolver for the rejectMidtermFile field.
func (r *mutationResolver) RejectMidtermFile(ctx context.Context, fileID string, reason *string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: RejectMidtermFile - rejectMidtermFile"))
}

// ApproveFinalFile is the resolver for the approveFinalFile field.
func (r *mutationResolver) ApproveFinalFile(ctx context.Context, fileID string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: ApproveFinalFile - approveFinalFile"))
}

// RejectFinalFile is the resolver for the rejectFinalFile field.
func (r *mutationResolver) RejectFinalFile(ctx context.Context, fileID string, reason *string) (*model.File, error) {
	panic(fmt.Errorf("not implemented: RejectFinalFile - rejectFinalFile"))
}

// CreateGradeDefence is the resolver for the createGradeDefence field.
func (r *mutationResolver) CreateGradeDefence(ctx context.Context, input model.CreateGradeDefenceInput) (*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: CreateGradeDefence - createGradeDefence"))
}

// UpdateGradeDefence is the resolver for the updateGradeDefence field.
func (r *mutationResolver) UpdateGradeDefence(ctx context.Context, id string, input model.UpdateGradeDefenceInput) (*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: UpdateGradeDefence - updateGradeDefence"))
}

// AddGradeDefenceCriterion is the resolver for the addGradeDefenceCriterion field.
func (r *mutationResolver) AddGradeDefenceCriterion(ctx context.Context, input model.CreateGradeDefenceCriterionInput) (*model.GradeDefenceCriterion, error) {
	panic(fmt.Errorf("not implemented: AddGradeDefenceCriterion - addGradeDefenceCriterion"))
}

// UpdateGradeDefenceCriterion is the resolver for the updateGradeDefenceCriterion field.
func (r *mutationResolver) UpdateGradeDefenceCriterion(ctx context.Context, id string, input model.UpdateGradeDefenceCriterionInput) (*model.GradeDefenceCriterion, error) {
	panic(fmt.Errorf("not implemented: UpdateGradeDefenceCriterion - updateGradeDefenceCriterion"))
}

// DeleteGradeDefenceCriterion is the resolver for the deleteGradeDefenceCriterion field.
func (r *mutationResolver) DeleteGradeDefenceCriterion(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteGradeDefenceCriterion - deleteGradeDefenceCriterion"))
}

// UpdateGradeReview is the resolver for the updateGradeReview field.
func (r *mutationResolver) UpdateGradeReview(ctx context.Context, id string, input model.UpdateGradeReviewInput) (*model.ReviewerGradeReview, error) {
	panic(fmt.Errorf("not implemented: UpdateGradeReview - updateGradeReview"))
}

// CompleteGradeReview is the resolver for the completeGradeReview field.
func (r *mutationResolver) CompleteGradeReview(ctx context.Context, id string) (*model.ReviewerGradeReview, error) {
	panic(fmt.Errorf("not implemented: CompleteGradeReview - completeGradeReview"))
}

// GetMyTeacherProfile is the resolver for the getMyTeacherProfile field.
func (r *queryResolver) GetMyTeacherProfile(ctx context.Context) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: GetMyTeacherProfile - getMyTeacherProfile"))
}

// GetMySupervisedTopicCouncils is the resolver for the getMySupervisedTopicCouncils field.
func (r *queryResolver) GetMySupervisedTopicCouncils(ctx context.Context, search *model.SearchRequestInput) (*model.SupervisorTopicCouncilAssignmentListResponse, error) {
	panic(fmt.Errorf("not implemented: GetMySupervisedTopicCouncils - getMySupervisedTopicCouncils"))
}

// GetMySupervisedTopicCouncilDetail is the resolver for the getMySupervisedTopicCouncilDetail field.
func (r *queryResolver) GetMySupervisedTopicCouncilDetail(ctx context.Context, id string) (*model.SupervisorTopicCouncilAssignment, error) {
	panic(fmt.Errorf("not implemented: GetMySupervisedTopicCouncilDetail - getMySupervisedTopicCouncilDetail"))
}

// GetMyDefences is the resolver for the getMyDefences field.
func (r *queryResolver) GetMyDefences(ctx context.Context, search *model.SearchRequestInput) (*model.CouncilDefenceListResponse, error) {
	panic(fmt.Errorf("not implemented: GetMyDefences - getMyDefences"))
}

// GetMyDefenceDetail is the resolver for the getMyDefenceDetail field.
func (r *queryResolver) GetMyDefenceDetail(ctx context.Context, id string) (*model.CouncilDefence, error) {
	panic(fmt.Errorf("not implemented: GetMyDefenceDetail - getMyDefenceDetail"))
}

// GetMyGradeReviews is the resolver for the getMyGradeReviews field.
func (r *queryResolver) GetMyGradeReviews(ctx context.Context, search *model.SearchRequestInput) (*model.ReviewerGradeReviewListResponse, error) {
	panic(fmt.Errorf("not implemented: GetMyGradeReviews - getMyGradeReviews"))
}

// GetMyGradeReviewDetail is the resolver for the getMyGradeReviewDetail field.
func (r *queryResolver) GetMyGradeReviewDetail(ctx context.Context, id string) (*model.ReviewerGradeReview, error) {
	panic(fmt.Errorf("not implemented: GetMyGradeReviewDetail - getMyGradeReviewDetail"))
}

// Student is the resolver for the student field.
func (r *reviewerEnrollmentResolver) Student(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// TopicCouncil is the resolver for the topicCouncil field.
func (r *reviewerEnrollmentResolver) TopicCouncil(ctx context.Context, obj *model.ReviewerEnrollment) (*model.ReviewerTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncil - topicCouncil"))
}

// Midterm is the resolver for the midterm field.
func (r *reviewerEnrollmentResolver) Midterm(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: Midterm - midterm"))
}

// Final is the resolver for the final field.
func (r *reviewerEnrollmentResolver) Final(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: Final - final"))
}

// GradeReview is the resolver for the gradeReview field.
func (r *reviewerEnrollmentResolver) GradeReview(ctx context.Context, obj *model.ReviewerEnrollment) (*model.GradeReview, error) {
	panic(fmt.Errorf("not implemented: GradeReview - gradeReview"))
}

// Enrollment is the resolver for the enrollment field.
func (r *reviewerGradeReviewResolver) Enrollment(ctx context.Context, obj *model.ReviewerGradeReview) (*model.ReviewerEnrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollment - enrollment"))
}

// Major is the resolver for the major field.
func (r *reviewerTopicResolver) Major(ctx context.Context, obj *model.ReviewerTopic) (*model.MajorInfo, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Files is the resolver for the files field.
func (r *reviewerTopicResolver) Files(ctx context.Context, obj *model.ReviewerTopic) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// Topic is the resolver for the topic field.
func (r *reviewerTopicCouncilResolver) Topic(ctx context.Context, obj *model.ReviewerTopicCouncil) (*model.ReviewerTopic, error) {
	panic(fmt.Errorf("not implemented: Topic - topic"))
}

// Supervisors is the resolver for the supervisors field.
func (r *reviewerTopicCouncilResolver) Supervisors(ctx context.Context, obj *model.ReviewerTopicCouncil) ([]*model.TopicCouncilSupervisor, error) {
	panic(fmt.Errorf("not implemented: Supervisors - supervisors"))
}

// Student is the resolver for the student field.
func (r *supervisorEnrollmentResolver) Student(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Student, error) {
	panic(fmt.Errorf("not implemented: Student - student"))
}

// TopicCouncil is the resolver for the topicCouncil field.
func (r *supervisorEnrollmentResolver) TopicCouncil(ctx context.Context, obj *model.SupervisorEnrollment) (*model.SupervisorTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncil - topicCouncil"))
}

// Midterm is the resolver for the midterm field.
func (r *supervisorEnrollmentResolver) Midterm(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Midterm, error) {
	panic(fmt.Errorf("not implemented: Midterm - midterm"))
}

// Final is the resolver for the final field.
func (r *supervisorEnrollmentResolver) Final(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Final, error) {
	panic(fmt.Errorf("not implemented: Final - final"))
}

// GradeReview is the resolver for the gradeReview field.
func (r *supervisorEnrollmentResolver) GradeReview(ctx context.Context, obj *model.SupervisorEnrollment) (*model.GradeReview, error) {
	panic(fmt.Errorf("not implemented: GradeReview - gradeReview"))
}

// GradeDefences is the resolver for the gradeDefences field.
func (r *supervisorEnrollmentResolver) GradeDefences(ctx context.Context, obj *model.SupervisorEnrollment) ([]*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefences - gradeDefences"))
}

// Major is the resolver for the major field.
func (r *supervisorTopicResolver) Major(ctx context.Context, obj *model.SupervisorTopic) (*model.MajorInfo, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *supervisorTopicResolver) Semester(ctx context.Context, obj *model.SupervisorTopic) (*model.SemesterInfo, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Files is the resolver for the files field.
func (r *supervisorTopicResolver) Files(ctx context.Context, obj *model.SupervisorTopic) ([]*model.File, error) {
	panic(fmt.Errorf("not implemented: Files - files"))
}

// TopicCouncils is the resolver for the topicCouncils field.
func (r *supervisorTopicResolver) TopicCouncils(ctx context.Context, obj *model.SupervisorTopic) ([]*model.SupervisorTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncils - topicCouncils"))
}

// Topic is the resolver for the topic field.
func (r *supervisorTopicCouncilResolver) Topic(ctx context.Context, obj *model.SupervisorTopicCouncil) (*model.SupervisorTopic, error) {
	panic(fmt.Errorf("not implemented: Topic - topic"))
}

// Council is the resolver for the council field.
func (r *supervisorTopicCouncilResolver) Council(ctx context.Context, obj *model.SupervisorTopicCouncil) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Enrollments is the resolver for the enrollments field.
func (r *supervisorTopicCouncilResolver) Enrollments(ctx context.Context, obj *model.SupervisorTopicCouncil) ([]*model.SupervisorEnrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollments - enrollments"))
}

// Supervisors is the resolver for the supervisors field.
func (r *supervisorTopicCouncilResolver) Supervisors(ctx context.Context, obj *model.SupervisorTopicCouncil) ([]*model.TopicCouncilSupervisor, error) {
	panic(fmt.Errorf("not implemented: Supervisors - supervisors"))
}

// TopicCouncil is the resolver for the topicCouncil field.
func (r *supervisorTopicCouncilAssignmentResolver) TopicCouncil(ctx context.Context, obj *model.SupervisorTopicCouncilAssignment) (*model.SupervisorTopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncil - topicCouncil"))
}

// CouncilDefence returns generated.CouncilDefenceResolver implementation.
func (r *Resolver) CouncilDefence() generated.CouncilDefenceResolver {
	return &councilDefenceResolver{r}
}

// CouncilEnrollment returns generated.CouncilEnrollmentResolver implementation.
func (r *Resolver) CouncilEnrollment() generated.CouncilEnrollmentResolver {
	return &councilEnrollmentResolver{r}
}

// CouncilMemberCouncil returns generated.CouncilMemberCouncilResolver implementation.
func (r *Resolver) CouncilMemberCouncil() generated.CouncilMemberCouncilResolver {
	return &councilMemberCouncilResolver{r}
}

// CouncilTopicCouncil returns generated.CouncilTopicCouncilResolver implementation.
func (r *Resolver) CouncilTopicCouncil() generated.CouncilTopicCouncilResolver {
	return &councilTopicCouncilResolver{r}
}

// ReviewerEnrollment returns generated.ReviewerEnrollmentResolver implementation.
func (r *Resolver) ReviewerEnrollment() generated.ReviewerEnrollmentResolver {
	return &reviewerEnrollmentResolver{r}
}

// ReviewerGradeReview returns generated.ReviewerGradeReviewResolver implementation.
func (r *Resolver) ReviewerGradeReview() generated.ReviewerGradeReviewResolver {
	return &reviewerGradeReviewResolver{r}
}

// ReviewerTopic returns generated.ReviewerTopicResolver implementation.
func (r *Resolver) ReviewerTopic() generated.ReviewerTopicResolver { return &reviewerTopicResolver{r} }

// ReviewerTopicCouncil returns generated.ReviewerTopicCouncilResolver implementation.
func (r *Resolver) ReviewerTopicCouncil() generated.ReviewerTopicCouncilResolver {
	return &reviewerTopicCouncilResolver{r}
}

// SupervisorEnrollment returns generated.SupervisorEnrollmentResolver implementation.
func (r *Resolver) SupervisorEnrollment() generated.SupervisorEnrollmentResolver {
	return &supervisorEnrollmentResolver{r}
}

// SupervisorTopic returns generated.SupervisorTopicResolver implementation.
func (r *Resolver) SupervisorTopic() generated.SupervisorTopicResolver {
	return &supervisorTopicResolver{r}
}

// SupervisorTopicCouncil returns generated.SupervisorTopicCouncilResolver implementation.
func (r *Resolver) SupervisorTopicCouncil() generated.SupervisorTopicCouncilResolver {
	return &supervisorTopicCouncilResolver{r}
}

// SupervisorTopicCouncilAssignment returns generated.SupervisorTopicCouncilAssignmentResolver implementation.
func (r *Resolver) SupervisorTopicCouncilAssignment() generated.SupervisorTopicCouncilAssignmentResolver {
	return &supervisorTopicCouncilAssignmentResolver{r}
}

type councilDefenceResolver struct{ *Resolver }
type councilEnrollmentResolver struct{ *Resolver }
type councilMemberCouncilResolver struct{ *Resolver }
type councilTopicCouncilResolver struct{ *Resolver }
type reviewerEnrollmentResolver struct{ *Resolver }
type reviewerGradeReviewResolver struct{ *Resolver }
type reviewerTopicResolver struct{ *Resolver }
type reviewerTopicCouncilResolver struct{ *Resolver }
type supervisorEnrollmentResolver struct{ *Resolver }
type supervisorTopicResolver struct{ *Resolver }
type supervisorTopicCouncilResolver struct{ *Resolver }
type supervisorTopicCouncilAssignmentResolver struct{ *Resolver }
