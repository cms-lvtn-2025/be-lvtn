package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Major is the resolver for the major field.
func (r *councilResolver) Major(ctx context.Context, obj *model.Council) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}

// Semester is the resolver for the semester field.
func (r *councilResolver) Semester(ctx context.Context, obj *model.Council) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}

// Defences is the resolver for the defences field.
func (r *councilResolver) Defences(ctx context.Context, obj *model.Council) ([]*model.Defence, error) {
	panic(fmt.Errorf("not implemented: Defences - defences"))
}

// Council is the resolver for the council field.
func (r *defenceResolver) Council(ctx context.Context, obj *model.Defence) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Teacher is the resolver for the teacher field.
func (r *defenceResolver) Teacher(ctx context.Context, obj *model.Defence) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: Teacher - teacher"))
}

// Council returns generated.CouncilResolver implementation.
func (r *Resolver) Council() generated.CouncilResolver { return &councilResolver{r} }

// Defence returns generated.DefenceResolver implementation.
func (r *Resolver) Defence() generated.DefenceResolver { return &defenceResolver{r} }

type councilResolver struct{ *Resolver }
type defenceResolver struct{ *Resolver }
