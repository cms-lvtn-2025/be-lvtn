package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"
	"thaily/src/graph/generated"
	"thaily/src/graph/model"
)

// Defences is the resolver for the defences field.
func (r *councilResolver) Defences(ctx context.Context, obj *model.Council) ([]*model.Defence, error) {
	panic(fmt.Errorf("not implemented: Defences - defences"))
}

// TopicCouncils is the resolver for the topicCouncils field.
func (r *councilResolver) TopicCouncils(ctx context.Context, obj *model.Council) ([]*model.TopicCouncil, error) {
	panic(fmt.Errorf("not implemented: TopicCouncils - topicCouncils"))
}

// Council is the resolver for the council field.
func (r *defenceResolver) Council(ctx context.Context, obj *model.Defence) (*model.Council, error) {
	panic(fmt.Errorf("not implemented: Council - council"))
}

// Teacher is the resolver for the teacher field.
func (r *defenceResolver) Teacher(ctx context.Context, obj *model.Defence) (*model.Teacher, error) {
	panic(fmt.Errorf("not implemented: Teacher - teacher"))
}

// GradeDefences is the resolver for the gradeDefences field.
func (r *defenceResolver) GradeDefences(ctx context.Context, obj *model.Defence) ([]*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefences - gradeDefences"))
}

// Defence is the resolver for the defence field.
func (r *gradeDefenceResolver) Defence(ctx context.Context, obj *model.GradeDefence) (*model.Defence, error) {
	panic(fmt.Errorf("not implemented: Defence - defence"))
}

// Enrollment is the resolver for the enrollment field.
func (r *gradeDefenceResolver) Enrollment(ctx context.Context, obj *model.GradeDefence) (*model.Enrollment, error) {
	panic(fmt.Errorf("not implemented: Enrollment - enrollment"))
}

// Criteria is the resolver for the criteria field.
func (r *gradeDefenceResolver) Criteria(ctx context.Context, obj *model.GradeDefence) ([]*model.GradeDefenceCriterion, error) {
	panic(fmt.Errorf("not implemented: Criteria - criteria"))
}

// GradeDefence is the resolver for the gradeDefence field.
func (r *gradeDefenceCriterionResolver) GradeDefence(ctx context.Context, obj *model.GradeDefenceCriterion) (*model.GradeDefence, error) {
	panic(fmt.Errorf("not implemented: GradeDefence - gradeDefence"))
}

// Council returns generated.CouncilResolver implementation.
func (r *Resolver) Council() generated.CouncilResolver { return &councilResolver{r} }

// Defence returns generated.DefenceResolver implementation.
func (r *Resolver) Defence() generated.DefenceResolver { return &defenceResolver{r} }

// GradeDefence returns generated.GradeDefenceResolver implementation.
func (r *Resolver) GradeDefence() generated.GradeDefenceResolver { return &gradeDefenceResolver{r} }

// GradeDefenceCriterion returns generated.GradeDefenceCriterionResolver implementation.
func (r *Resolver) GradeDefenceCriterion() generated.GradeDefenceCriterionResolver {
	return &gradeDefenceCriterionResolver{r}
}

type councilResolver struct{ *Resolver }
type defenceResolver struct{ *Resolver }
type gradeDefenceResolver struct{ *Resolver }
type gradeDefenceCriterionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *councilResolver) Major(ctx context.Context, obj *model.Council) (*model.Major, error) {
	panic(fmt.Errorf("not implemented: Major - major"))
}
func (r *councilResolver) Semester(ctx context.Context, obj *model.Council) (*model.Semester, error) {
	panic(fmt.Errorf("not implemented: Semester - semester"))
}
*/
