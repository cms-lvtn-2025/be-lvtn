// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateFacultyInput(ctx context.Context, obj any) (model.CreateFacultyInput, error) {
	var it model.CreateFacultyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMajorInput(ctx context.Context, obj any) (model.CreateMajorInput, error) {
	var it model.CreateMajorInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "facultyCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "facultyCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSemesterInput(ctx context.Context, obj any) (model.CreateSemesterInput, error) {
	var it model.CreateSemesterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateStudentInput(ctx context.Context, obj any) (model.CreateStudentInput, error) {
	var it model.CreateStudentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "email", "phone", "username", "gender", "majorCode", "classCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNGender2thailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "classCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTeacherInput(ctx context.Context, obj any) (model.CreateTeacherInput, error) {
	var it model.CreateTeacherInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "email", "username", "gender", "majorCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNGender2thailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCouncilInput(ctx context.Context, obj any) (model.UpdateCouncilInput, error) {
	var it model.UpdateCouncilInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "timeStart"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "timeStart":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeStart"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeStart = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFacultyInput(ctx context.Context, obj any) (model.UpdateFacultyInput, error) {
	var it model.UpdateFacultyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMajorInput(ctx context.Context, obj any) (model.UpdateMajorInput, error) {
	var it model.UpdateMajorInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "facultyCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "facultyCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSemesterInput(ctx context.Context, obj any) (model.UpdateSemesterInput, error) {
	var it model.UpdateSemesterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateStudentInput(ctx context.Context, obj any) (model.UpdateStudentInput, error) {
	var it model.UpdateStudentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phone", "username", "gender", "majorCode", "classCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "classCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTeacherInput(ctx context.Context, obj any) (model.UpdateTeacherInput, error) {
	var it model.UpdateTeacherInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "username", "gender", "majorCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicInput(ctx context.Context, obj any) (model.UpdateTopicInput, error) {
	var it model.UpdateTopicInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "status", "percentStage1", "percentStage2"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOTopicStatus2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "percentStage1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentStage1"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PercentStage1 = data
		case "percentStage2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentStage2"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PercentStage2 = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateFacultyInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateFacultyInput(ctx context.Context, v any) (model.CreateFacultyInput, error) {
	res, err := ec.unmarshalInputCreateFacultyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMajorInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateMajorInput(ctx context.Context, v any) (model.CreateMajorInput, error) {
	res, err := ec.unmarshalInputCreateMajorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSemesterInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateSemesterInput(ctx context.Context, v any) (model.CreateSemesterInput, error) {
	res, err := ec.unmarshalInputCreateSemesterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateStudentInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateStudentInput(ctx context.Context, v any) (model.CreateStudentInput, error) {
	res, err := ec.unmarshalInputCreateStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTeacherInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateTeacherInput(ctx context.Context, v any) (model.CreateTeacherInput, error) {
	res, err := ec.unmarshalInputCreateTeacherInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateCouncilInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateCouncilInput(ctx context.Context, v any) (model.UpdateCouncilInput, error) {
	res, err := ec.unmarshalInputUpdateCouncilInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFacultyInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateFacultyInput(ctx context.Context, v any) (model.UpdateFacultyInput, error) {
	res, err := ec.unmarshalInputUpdateFacultyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMajorInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateMajorInput(ctx context.Context, v any) (model.UpdateMajorInput, error) {
	res, err := ec.unmarshalInputUpdateMajorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSemesterInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateSemesterInput(ctx context.Context, v any) (model.UpdateSemesterInput, error) {
	res, err := ec.unmarshalInputUpdateSemesterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateStudentInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateStudentInput(ctx context.Context, v any) (model.UpdateStudentInput, error) {
	res, err := ec.unmarshalInputUpdateStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTeacherInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateTeacherInput(ctx context.Context, v any) (model.UpdateTeacherInput, error) {
	res, err := ec.unmarshalInputUpdateTeacherInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateTopicInput(ctx context.Context, v any) (model.UpdateTopicInput, error) {
	res, err := ec.unmarshalInputUpdateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
