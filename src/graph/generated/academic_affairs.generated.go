// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CouncilListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.CouncilListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.CouncilListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Council_total(ctx, field)
			case "id":
				return ec.fieldContext_Council_id(ctx, field)
			case "title":
				return ec.fieldContext_Council_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Council_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Council_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_Council_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_Council_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Council_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Council_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Council_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Council_major(ctx, field)
			case "semester":
				return ec.fieldContext_Council_semester(ctx, field)
			case "defences":
				return ec.fieldContext_Council_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Council_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Council", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnrollmentListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.EnrollmentListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EnrollmentListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EnrollmentListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnrollmentListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EnrollmentListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.EnrollmentListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_EnrollmentListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_EnrollmentListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EnrollmentListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Enrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_Enrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_Enrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_Enrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_Enrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_Enrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_Enrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Enrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Enrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_Enrollment_student(ctx, field)
			case "midterm":
				return ec.fieldContext_Enrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_Enrollment_final(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_Enrollment_topicCouncil(ctx, field)
			case "gradeReview":
				return ec.fieldContext_Enrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_Enrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.FacultyListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacultyListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacultyListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FacultyListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.FacultyListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_FacultyListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNFaculty2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFacultyᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_FacultyListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FacultyListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "title":
				return ec.fieldContext_Faculty_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Faculty_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Faculty_updatedBy(ctx, field)
			case "majors":
				return ec.fieldContext_Faculty_majors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MajorListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.MajorListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MajorListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MajorListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MajorListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MajorListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.MajorListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_MajorListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNMajor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_MajorListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MajorListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Major_id(ctx, field)
			case "title":
				return ec.fieldContext_Major_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_Major_facultyCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Major_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Major_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Major_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Major_updatedBy(ctx, field)
			case "faculty":
				return ec.fieldContext_Major_faculty(ctx, field)
			case "topics":
				return ec.fieldContext_Major_topics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Major", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SemesterListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.SemesterListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SemesterListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SemesterListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SemesterListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SemesterListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.SemesterListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SemesterListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNSemester2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SemesterListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SemesterListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Semester_id(ctx, field)
			case "title":
				return ec.fieldContext_Semester_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Semester_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Semester_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Semester_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Semester_updatedBy(ctx, field)
			case "students":
				return ec.fieldContext_Semester_students(ctx, field)
			case "teachers":
				return ec.fieldContext_Semester_teachers(ctx, field)
			case "topics":
				return ec.fieldContext_Semester_topics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Semester", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.StudentListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.StudentListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNStudent2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeacherListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.TeacherListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TeacherListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TeacherListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeacherListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TeacherListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.TeacherListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TeacherListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTeacher2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacherᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TeacherListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TeacherListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Teacher_major(ctx, field)
			case "semester":
				return ec.fieldContext_Teacher_semester(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			case "topicsSupervised":
				return ec.fieldContext_Teacher_topicsSupervised(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicListResponse_total(ctx context.Context, field graphql.CollectedField, obj *model.TopicListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicListResponse_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalNInt2int32,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicListResponse_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicListResponse_data(ctx context.Context, field graphql.CollectedField, obj *model.TopicListResponse) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicListResponse_data,
		func(ctx context.Context) (any, error) {
			return obj.Data, nil
		},
		nil,
		ec.marshalNTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicListResponse_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicListResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "percentStage1":
				return ec.fieldContext_Topic_percentStage1(ctx, field)
			case "percentStage2":
				return ec.fieldContext_Topic_percentStage2(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Topic_major(ctx, field)
			case "semester":
				return ec.fieldContext_Topic_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Topic_enrollments(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "topicSupervisors":
				return ec.fieldContext_Topic_topicSupervisors(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Topic_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateFacultyInput(ctx context.Context, obj any) (model.CreateFacultyInput, error) {
	var it model.CreateFacultyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMajorInput(ctx context.Context, obj any) (model.CreateMajorInput, error) {
	var it model.CreateMajorInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "facultyCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "facultyCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSemesterInput(ctx context.Context, obj any) (model.CreateSemesterInput, error) {
	var it model.CreateSemesterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateStudentInput(ctx context.Context, obj any) (model.CreateStudentInput, error) {
	var it model.CreateStudentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "email", "phone", "username", "gender", "majorCode", "classCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNGender2thailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "classCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTeacherInput(ctx context.Context, obj any) (model.CreateTeacherInput, error) {
	var it model.CreateTeacherInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "email", "username", "gender", "majorCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNGender2thailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCouncilInput(ctx context.Context, obj any) (model.UpdateCouncilInput, error) {
	var it model.UpdateCouncilInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "timeStart"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "timeStart":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timeStart"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.TimeStart = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateFacultyInput(ctx context.Context, obj any) (model.UpdateFacultyInput, error) {
	var it model.UpdateFacultyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMajorInput(ctx context.Context, obj any) (model.UpdateMajorInput, error) {
	var it model.UpdateMajorInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "facultyCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "facultyCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("facultyCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FacultyCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSemesterInput(ctx context.Context, obj any) (model.UpdateSemesterInput, error) {
	var it model.UpdateSemesterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateStudentInput(ctx context.Context, obj any) (model.UpdateStudentInput, error) {
	var it model.UpdateStudentInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phone", "username", "gender", "majorCode", "classCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "classCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("classCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClassCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTeacherInput(ctx context.Context, obj any) (model.UpdateTeacherInput, error) {
	var it model.UpdateTeacherInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "username", "gender", "majorCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		case "gender":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTopicInput(ctx context.Context, obj any) (model.UpdateTopicInput, error) {
	var it model.UpdateTopicInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "status", "percentStage1", "percentStage2"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOTopicStatus2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "percentStage1":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentStage1"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PercentStage1 = data
		case "percentStage2":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentStage2"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PercentStage2 = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var councilListResponseImplementors = []string{"CouncilListResponse"}

func (ec *executionContext) _CouncilListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CouncilListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CouncilListResponse")
		case "total":
			out.Values[i] = ec._CouncilListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._CouncilListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var enrollmentListResponseImplementors = []string{"EnrollmentListResponse"}

func (ec *executionContext) _EnrollmentListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.EnrollmentListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enrollmentListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EnrollmentListResponse")
		case "total":
			out.Values[i] = ec._EnrollmentListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._EnrollmentListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var facultyListResponseImplementors = []string{"FacultyListResponse"}

func (ec *executionContext) _FacultyListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.FacultyListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facultyListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FacultyListResponse")
		case "total":
			out.Values[i] = ec._FacultyListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._FacultyListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var majorListResponseImplementors = []string{"MajorListResponse"}

func (ec *executionContext) _MajorListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MajorListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, majorListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MajorListResponse")
		case "total":
			out.Values[i] = ec._MajorListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._MajorListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var semesterListResponseImplementors = []string{"SemesterListResponse"}

func (ec *executionContext) _SemesterListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SemesterListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, semesterListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SemesterListResponse")
		case "total":
			out.Values[i] = ec._SemesterListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._SemesterListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentListResponseImplementors = []string{"StudentListResponse"}

func (ec *executionContext) _StudentListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.StudentListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentListResponse")
		case "total":
			out.Values[i] = ec._StudentListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._StudentListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var teacherListResponseImplementors = []string{"TeacherListResponse"}

func (ec *executionContext) _TeacherListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TeacherListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, teacherListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TeacherListResponse")
		case "total":
			out.Values[i] = ec._TeacherListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._TeacherListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topicListResponseImplementors = []string{"TopicListResponse"}

func (ec *executionContext) _TopicListResponse(ctx context.Context, sel ast.SelectionSet, obj *model.TopicListResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicListResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicListResponse")
		case "total":
			out.Values[i] = ec._TopicListResponse_total(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._TopicListResponse_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCouncilListResponse2thailyᚋsrcᚋgraphᚋmodelᚐCouncilListResponse(ctx context.Context, sel ast.SelectionSet, v model.CouncilListResponse) graphql.Marshaler {
	return ec._CouncilListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCouncilListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilListResponse(ctx context.Context, sel ast.SelectionSet, v *model.CouncilListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CouncilListResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateFacultyInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateFacultyInput(ctx context.Context, v any) (model.CreateFacultyInput, error) {
	res, err := ec.unmarshalInputCreateFacultyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateMajorInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateMajorInput(ctx context.Context, v any) (model.CreateMajorInput, error) {
	res, err := ec.unmarshalInputCreateMajorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSemesterInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateSemesterInput(ctx context.Context, v any) (model.CreateSemesterInput, error) {
	res, err := ec.unmarshalInputCreateSemesterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateStudentInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateStudentInput(ctx context.Context, v any) (model.CreateStudentInput, error) {
	res, err := ec.unmarshalInputCreateStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateTeacherInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateTeacherInput(ctx context.Context, v any) (model.CreateTeacherInput, error) {
	res, err := ec.unmarshalInputCreateTeacherInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEnrollmentListResponse2thailyᚋsrcᚋgraphᚋmodelᚐEnrollmentListResponse(ctx context.Context, sel ast.SelectionSet, v model.EnrollmentListResponse) graphql.Marshaler {
	return ec._EnrollmentListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNEnrollmentListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentListResponse(ctx context.Context, sel ast.SelectionSet, v *model.EnrollmentListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EnrollmentListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNFacultyListResponse2thailyᚋsrcᚋgraphᚋmodelᚐFacultyListResponse(ctx context.Context, sel ast.SelectionSet, v model.FacultyListResponse) graphql.Marshaler {
	return ec._FacultyListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNFacultyListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFacultyListResponse(ctx context.Context, sel ast.SelectionSet, v *model.FacultyListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FacultyListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNMajorListResponse2thailyᚋsrcᚋgraphᚋmodelᚐMajorListResponse(ctx context.Context, sel ast.SelectionSet, v model.MajorListResponse) graphql.Marshaler {
	return ec._MajorListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNMajorListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorListResponse(ctx context.Context, sel ast.SelectionSet, v *model.MajorListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MajorListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNSemesterListResponse2thailyᚋsrcᚋgraphᚋmodelᚐSemesterListResponse(ctx context.Context, sel ast.SelectionSet, v model.SemesterListResponse) graphql.Marshaler {
	return ec._SemesterListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSemesterListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterListResponse(ctx context.Context, sel ast.SelectionSet, v *model.SemesterListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SemesterListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentListResponse2thailyᚋsrcᚋgraphᚋmodelᚐStudentListResponse(ctx context.Context, sel ast.SelectionSet, v model.StudentListResponse) graphql.Marshaler {
	return ec._StudentListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNStudentListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentListResponse(ctx context.Context, sel ast.SelectionSet, v *model.StudentListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTeacherListResponse2thailyᚋsrcᚋgraphᚋmodelᚐTeacherListResponse(ctx context.Context, sel ast.SelectionSet, v model.TeacherListResponse) graphql.Marshaler {
	return ec._TeacherListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTeacherListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacherListResponse(ctx context.Context, sel ast.SelectionSet, v *model.TeacherListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TeacherListResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicListResponse2thailyᚋsrcᚋgraphᚋmodelᚐTopicListResponse(ctx context.Context, sel ast.SelectionSet, v model.TopicListResponse) graphql.Marshaler {
	return ec._TopicListResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopicListResponse2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicListResponse(ctx context.Context, sel ast.SelectionSet, v *model.TopicListResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicListResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateCouncilInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateCouncilInput(ctx context.Context, v any) (model.UpdateCouncilInput, error) {
	res, err := ec.unmarshalInputUpdateCouncilInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateFacultyInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateFacultyInput(ctx context.Context, v any) (model.UpdateFacultyInput, error) {
	res, err := ec.unmarshalInputUpdateFacultyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMajorInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateMajorInput(ctx context.Context, v any) (model.UpdateMajorInput, error) {
	res, err := ec.unmarshalInputUpdateMajorInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateSemesterInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateSemesterInput(ctx context.Context, v any) (model.UpdateSemesterInput, error) {
	res, err := ec.unmarshalInputUpdateSemesterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateStudentInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateStudentInput(ctx context.Context, v any) (model.UpdateStudentInput, error) {
	res, err := ec.unmarshalInputUpdateStudentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTeacherInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateTeacherInput(ctx context.Context, v any) (model.UpdateTeacherInput, error) {
	res, err := ec.unmarshalInputUpdateTeacherInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTopicInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateTopicInput(ctx context.Context, v any) (model.UpdateTopicInput, error) {
	res, err := ec.unmarshalInputUpdateTopicInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
