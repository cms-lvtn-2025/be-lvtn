// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type CouncilDefenceResolver interface {
	Council(ctx context.Context, obj *model.CouncilDefence) (*model.CouncilMemberCouncil, error)
	Teacher(ctx context.Context, obj *model.CouncilDefence) (*model.Teacher, error)
	GradeDefences(ctx context.Context, obj *model.CouncilDefence) ([]*model.GradeDefence, error)
}
type CouncilEnrollmentResolver interface {
	Student(ctx context.Context, obj *model.CouncilEnrollment) (*model.Student, error)
	TopicCouncil(ctx context.Context, obj *model.CouncilEnrollment) (*model.CouncilTopicCouncil, error)
	Midterm(ctx context.Context, obj *model.CouncilEnrollment) (*model.Midterm, error)
	Final(ctx context.Context, obj *model.CouncilEnrollment) (*model.Final, error)
	GradeReview(ctx context.Context, obj *model.CouncilEnrollment) (*model.GradeReview, error)
	GradeDefences(ctx context.Context, obj *model.CouncilEnrollment) ([]*model.GradeDefence, error)
}
type CouncilMemberCouncilResolver interface {
	Major(ctx context.Context, obj *model.CouncilMemberCouncil) (*model.MajorInfo, error)
	Semester(ctx context.Context, obj *model.CouncilMemberCouncil) (*model.SemesterInfo, error)
	Defences(ctx context.Context, obj *model.CouncilMemberCouncil) ([]*model.CouncilDefence, error)
	TopicCouncils(ctx context.Context, obj *model.CouncilMemberCouncil) ([]*model.CouncilTopicCouncil, error)
}
type CouncilTopicCouncilResolver interface {
	Topic(ctx context.Context, obj *model.CouncilTopicCouncil) (*model.Topic, error)
	Council(ctx context.Context, obj *model.CouncilTopicCouncil) (*model.CouncilMemberCouncil, error)
	Enrollments(ctx context.Context, obj *model.CouncilTopicCouncil) ([]*model.CouncilEnrollment, error)
	Supervisors(ctx context.Context, obj *model.CouncilTopicCouncil) ([]*model.TopicCouncilSupervisor, error)
}
type ReviewerEnrollmentResolver interface {
	Student(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Student, error)
	TopicCouncil(ctx context.Context, obj *model.ReviewerEnrollment) (*model.ReviewerTopicCouncil, error)
	Midterm(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Midterm, error)
	Final(ctx context.Context, obj *model.ReviewerEnrollment) (*model.Final, error)
	GradeReview(ctx context.Context, obj *model.ReviewerEnrollment) (*model.GradeReview, error)
}
type ReviewerTopicResolver interface {
	Major(ctx context.Context, obj *model.ReviewerTopic) (*model.MajorInfo, error)
	Files(ctx context.Context, obj *model.ReviewerTopic) ([]*model.File, error)
}
type ReviewerTopicCouncilResolver interface {
	Topic(ctx context.Context, obj *model.ReviewerTopicCouncil) (*model.ReviewerTopic, error)
	Supervisors(ctx context.Context, obj *model.ReviewerTopicCouncil) ([]*model.TopicCouncilSupervisor, error)
}
type SupervisorEnrollmentResolver interface {
	Student(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Student, error)
	TopicCouncil(ctx context.Context, obj *model.SupervisorEnrollment) (*model.SupervisorTopicCouncil, error)
	Midterm(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Midterm, error)
	Final(ctx context.Context, obj *model.SupervisorEnrollment) (*model.Final, error)
	GradeReview(ctx context.Context, obj *model.SupervisorEnrollment) (*model.GradeReview, error)
	GradeDefences(ctx context.Context, obj *model.SupervisorEnrollment) ([]*model.GradeDefence, error)
}
type SupervisorTopicResolver interface {
	Major(ctx context.Context, obj *model.SupervisorTopic) (*model.MajorInfo, error)
	Semester(ctx context.Context, obj *model.SupervisorTopic) (*model.SemesterInfo, error)
	Enrollments(ctx context.Context, obj *model.SupervisorTopic) ([]*model.SupervisorEnrollment, error)
	Files(ctx context.Context, obj *model.SupervisorTopic) ([]*model.File, error)
	TopicSupervisors(ctx context.Context, obj *model.SupervisorTopic) ([]*model.TopicSupervisor, error)
	TopicCouncils(ctx context.Context, obj *model.SupervisorTopic) ([]*model.SupervisorTopicCouncil, error)
}
type SupervisorTopicCouncilResolver interface {
	Topic(ctx context.Context, obj *model.SupervisorTopicCouncil) (*model.SupervisorTopic, error)
	Council(ctx context.Context, obj *model.SupervisorTopicCouncil) (*model.Council, error)
	Enrollments(ctx context.Context, obj *model.SupervisorTopicCouncil) ([]*model.SupervisorEnrollment, error)
	Supervisors(ctx context.Context, obj *model.SupervisorTopicCouncil) ([]*model.TopicCouncilSupervisor, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CouncilDefence_id(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_title(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_teacherCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_teacherCode,
		func(ctx context.Context) (any, error) {
			return obj.TeacherCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_teacherCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_position(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_position,
		func(ctx context.Context) (any, error) {
			return obj.Position, nil
		},
		nil,
		ec.marshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DefencePosition does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_council(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilDefence().Council(ctx, obj)
		},
		nil,
		ec.marshalOCouncilMemberCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilMemberCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilMemberCouncil_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_CouncilMemberCouncil_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_CouncilMemberCouncil_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_CouncilMemberCouncil_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilMemberCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilMemberCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CouncilMemberCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CouncilMemberCouncil_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_CouncilMemberCouncil_major(ctx, field)
			case "semester":
				return ec.fieldContext_CouncilMemberCouncil_semester(ctx, field)
			case "defences":
				return ec.fieldContext_CouncilMemberCouncil_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_CouncilMemberCouncil_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilMemberCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_teacher(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilDefence().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOTeacher2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacher,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Teacher_major(ctx, field)
			case "semester":
				return ec.fieldContext_Teacher_semester(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			case "topicsSupervised":
				return ec.fieldContext_Teacher_topicsSupervised(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilDefence_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.CouncilDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilDefence_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilDefence().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilDefence_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_id(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_title(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_studentCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_studentCode,
		func(ctx context.Context) (any, error) {
			return obj.StudentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_studentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_finalCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_finalCode,
		func(ctx context.Context) (any, error) {
			return obj.FinalCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_finalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_gradeReviewCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_gradeReviewCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeReviewCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_gradeReviewCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_midtermCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_midtermCode,
		func(ctx context.Context) (any, error) {
			return obj.MidtermCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_midtermCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_student(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_student,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().Student(ctx, obj)
		},
		nil,
		ec.marshalOStudent2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_student(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOCouncilTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_CouncilTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_CouncilTopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_CouncilTopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_CouncilTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_CouncilTopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilTopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilTopicCouncil_updatedAt(ctx, field)
			case "topic":
				return ec.fieldContext_CouncilTopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_CouncilTopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_CouncilTopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_CouncilTopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_midterm(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_midterm,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().Midterm(ctx, obj)
		},
		nil,
		ec.marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_midterm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Midterm_id(ctx, field)
			case "title":
				return ec.fieldContext_Midterm_title(ctx, field)
			case "grade":
				return ec.fieldContext_Midterm_grade(ctx, field)
			case "status":
				return ec.fieldContext_Midterm_status(ctx, field)
			case "feedback":
				return ec.fieldContext_Midterm_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Midterm_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Midterm_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Midterm_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Midterm_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Midterm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_final(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_final,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().Final(ctx, obj)
		},
		nil,
		ec.marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_final(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Final_id(ctx, field)
			case "title":
				return ec.fieldContext_Final_title(ctx, field)
			case "supervisorGrade":
				return ec.fieldContext_Final_supervisorGrade(ctx, field)
			case "departmentGrade":
				return ec.fieldContext_Final_departmentGrade(ctx, field)
			case "finalGrade":
				return ec.fieldContext_Final_finalGrade(ctx, field)
			case "status":
				return ec.fieldContext_Final_status(ctx, field)
			case "notes":
				return ec.fieldContext_Final_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_Final_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Final_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Final_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Final_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Final_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Final", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_gradeReview(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_gradeReview,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().GradeReview(ctx, obj)
		},
		nil,
		ec.marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_gradeReview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeReview_id(ctx, field)
			case "title":
				return ec.fieldContext_GradeReview_title(ctx, field)
			case "reviewGrade":
				return ec.fieldContext_GradeReview_reviewGrade(ctx, field)
			case "teacherCode":
				return ec.fieldContext_GradeReview_teacherCode(ctx, field)
			case "status":
				return ec.fieldContext_GradeReview_status(ctx, field)
			case "notes":
				return ec.fieldContext_GradeReview_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_GradeReview_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeReview_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeReview_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeReview_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeReview_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_GradeReview_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilEnrollment_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.CouncilEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilEnrollment_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilEnrollment().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilEnrollment_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_major(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_major,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilMemberCouncil().Major(ctx, obj)
		},
		nil,
		ec.marshalOMajorInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_major(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MajorInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_MajorInfo_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_MajorInfo_facultyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MajorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_semester(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_semester,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilMemberCouncil().Semester(ctx, obj)
		},
		nil,
		ec.marshalOSemesterInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_semester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SemesterInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_SemesterInfo_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SemesterInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_defences(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_defences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilMemberCouncil().Defences(ctx, obj)
		},
		nil,
		ec.marshalOCouncilDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_defences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilDefence_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilDefence_title(ctx, field)
			case "councilCode":
				return ec.fieldContext_CouncilDefence_councilCode(ctx, field)
			case "teacherCode":
				return ec.fieldContext_CouncilDefence_teacherCode(ctx, field)
			case "position":
				return ec.fieldContext_CouncilDefence_position(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilDefence_updatedAt(ctx, field)
			case "council":
				return ec.fieldContext_CouncilDefence_council(ctx, field)
			case "teacher":
				return ec.fieldContext_CouncilDefence_teacher(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_CouncilDefence_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilMemberCouncil_topicCouncils(ctx context.Context, field graphql.CollectedField, obj *model.CouncilMemberCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilMemberCouncil_topicCouncils,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilMemberCouncil().TopicCouncils(ctx, obj)
		},
		nil,
		ec.marshalOCouncilTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncilᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilMemberCouncil_topicCouncils(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilMemberCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_CouncilTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_CouncilTopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_CouncilTopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_CouncilTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_CouncilTopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilTopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilTopicCouncil_updatedAt(ctx, field)
			case "topic":
				return ec.fieldContext_CouncilTopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_CouncilTopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_CouncilTopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_CouncilTopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_stage(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_stage,
		func(ctx context.Context) (any, error) {
			return obj.Stage, nil
		},
		nil,
		ec.marshalNTopicStage2thailyᚋsrcᚋgraphᚋmodelᚐTopicStage,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_topicCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_topicCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_topicCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_timeEnd(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_timeEnd,
		func(ctx context.Context) (any, error) {
			return obj.TimeEnd, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_timeEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_topic(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilTopicCouncil().Topic(ctx, obj)
		},
		nil,
		ec.marshalOTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "percentStage1":
				return ec.fieldContext_Topic_percentStage1(ctx, field)
			case "percentStage2":
				return ec.fieldContext_Topic_percentStage2(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Topic_major(ctx, field)
			case "semester":
				return ec.fieldContext_Topic_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Topic_enrollments(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "topicSupervisors":
				return ec.fieldContext_Topic_topicSupervisors(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Topic_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_council(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilTopicCouncil().Council(ctx, obj)
		},
		nil,
		ec.marshalOCouncilMemberCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilMemberCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilMemberCouncil_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_CouncilMemberCouncil_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_CouncilMemberCouncil_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_CouncilMemberCouncil_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilMemberCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilMemberCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_CouncilMemberCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_CouncilMemberCouncil_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_CouncilMemberCouncil_major(ctx, field)
			case "semester":
				return ec.fieldContext_CouncilMemberCouncil_semester(ctx, field)
			case "defences":
				return ec.fieldContext_CouncilMemberCouncil_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_CouncilMemberCouncil_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilMemberCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_enrollments(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_enrollments,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilTopicCouncil().Enrollments(ctx, obj)
		},
		nil,
		ec.marshalOCouncilEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollmentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_enrollments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CouncilEnrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_CouncilEnrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_CouncilEnrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_CouncilEnrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_CouncilEnrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_CouncilEnrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_CouncilEnrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_CouncilEnrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CouncilEnrollment_updatedAt(ctx, field)
			case "student":
				return ec.fieldContext_CouncilEnrollment_student(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_CouncilEnrollment_topicCouncil(ctx, field)
			case "midterm":
				return ec.fieldContext_CouncilEnrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_CouncilEnrollment_final(ctx, field)
			case "gradeReview":
				return ec.fieldContext_CouncilEnrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_CouncilEnrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CouncilEnrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CouncilTopicCouncil_supervisors(ctx context.Context, field graphql.CollectedField, obj *model.CouncilTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CouncilTopicCouncil_supervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.CouncilTopicCouncil().Supervisors(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CouncilTopicCouncil_supervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CouncilTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncilSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_TopicCouncilSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncilCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncilSupervisor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncilSupervisor_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncilSupervisor_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncilSupervisor_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_TopicCouncilSupervisor_teacher(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncil(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncilSupervisor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_title(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_studentCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_studentCode,
		func(ctx context.Context) (any, error) {
			return obj.StudentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_studentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_gradeReviewCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_gradeReviewCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeReviewCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_gradeReviewCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_midtermCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_midtermCode,
		func(ctx context.Context) (any, error) {
			return obj.MidtermCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_midtermCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_finalCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_finalCode,
		func(ctx context.Context) (any, error) {
			return obj.FinalCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_finalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_student(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_student,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerEnrollment().Student(ctx, obj)
		},
		nil,
		ec.marshalOStudent2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_student(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerEnrollment().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOReviewerTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ReviewerTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_ReviewerTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_ReviewerTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_ReviewerTopicCouncil_topicCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_ReviewerTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_ReviewerTopicCouncil_timeEnd(ctx, field)
			case "topic":
				return ec.fieldContext_ReviewerTopicCouncil_topic(ctx, field)
			case "supervisors":
				return ec.fieldContext_ReviewerTopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewerTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_midterm(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_midterm,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerEnrollment().Midterm(ctx, obj)
		},
		nil,
		ec.marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_midterm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Midterm_id(ctx, field)
			case "title":
				return ec.fieldContext_Midterm_title(ctx, field)
			case "grade":
				return ec.fieldContext_Midterm_grade(ctx, field)
			case "status":
				return ec.fieldContext_Midterm_status(ctx, field)
			case "feedback":
				return ec.fieldContext_Midterm_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Midterm_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Midterm_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Midterm_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Midterm_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Midterm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_final(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_final,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerEnrollment().Final(ctx, obj)
		},
		nil,
		ec.marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_final(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Final_id(ctx, field)
			case "title":
				return ec.fieldContext_Final_title(ctx, field)
			case "supervisorGrade":
				return ec.fieldContext_Final_supervisorGrade(ctx, field)
			case "departmentGrade":
				return ec.fieldContext_Final_departmentGrade(ctx, field)
			case "finalGrade":
				return ec.fieldContext_Final_finalGrade(ctx, field)
			case "status":
				return ec.fieldContext_Final_status(ctx, field)
			case "notes":
				return ec.fieldContext_Final_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_Final_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Final_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Final_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Final_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Final_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Final", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerEnrollment_gradeReview(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerEnrollment_gradeReview,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerEnrollment().GradeReview(ctx, obj)
		},
		nil,
		ec.marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerEnrollment_gradeReview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeReview_id(ctx, field)
			case "title":
				return ec.fieldContext_GradeReview_title(ctx, field)
			case "reviewGrade":
				return ec.fieldContext_GradeReview_reviewGrade(ctx, field)
			case "teacherCode":
				return ec.fieldContext_GradeReview_teacherCode(ctx, field)
			case "status":
				return ec.fieldContext_GradeReview_status(ctx, field)
			case "notes":
				return ec.fieldContext_GradeReview_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_GradeReview_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeReview_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeReview_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeReview_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeReview_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_GradeReview_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_title(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_status(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_major(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_major,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerTopic().Major(ctx, obj)
		},
		nil,
		ec.marshalOMajorInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_major(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MajorInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_MajorInfo_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_MajorInfo_facultyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MajorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopic_files(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopic_files,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerTopic().Files(ctx, obj)
		},
		nil,
		ec.marshalOFile2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFileᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopic_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "title":
				return ec.fieldContext_File_title(ctx, field)
			case "file":
				return ec.fieldContext_File_file(ctx, field)
			case "status":
				return ec.fieldContext_File_status(ctx, field)
			case "table":
				return ec.fieldContext_File_table(ctx, field)
			case "option":
				return ec.fieldContext_File_option(ctx, field)
			case "tableId":
				return ec.fieldContext_File_tableId(ctx, field)
			case "createdAt":
				return ec.fieldContext_File_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_File_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_File_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_File_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_stage(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_stage,
		func(ctx context.Context) (any, error) {
			return obj.Stage, nil
		},
		nil,
		ec.marshalNTopicStage2thailyᚋsrcᚋgraphᚋmodelᚐTopicStage,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_topicCode(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_topicCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_topicCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_timeEnd(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_timeEnd,
		func(ctx context.Context) (any, error) {
			return obj.TimeEnd, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_timeEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_topic(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerTopicCouncil().Topic(ctx, obj)
		},
		nil,
		ec.marshalOReviewerTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ReviewerTopic_id(ctx, field)
			case "title":
				return ec.fieldContext_ReviewerTopic_title(ctx, field)
			case "status":
				return ec.fieldContext_ReviewerTopic_status(ctx, field)
			case "majorCode":
				return ec.fieldContext_ReviewerTopic_majorCode(ctx, field)
			case "major":
				return ec.fieldContext_ReviewerTopic_major(ctx, field)
			case "files":
				return ec.fieldContext_ReviewerTopic_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ReviewerTopic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ReviewerTopicCouncil_supervisors(ctx context.Context, field graphql.CollectedField, obj *model.ReviewerTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_ReviewerTopicCouncil_supervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.ReviewerTopicCouncil().Supervisors(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_ReviewerTopicCouncil_supervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ReviewerTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncilSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_TopicCouncilSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncilCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncilSupervisor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncilSupervisor_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncilSupervisor_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncilSupervisor_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_TopicCouncilSupervisor_teacher(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncil(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncilSupervisor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_id(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_title(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_studentCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_studentCode,
		func(ctx context.Context) (any, error) {
			return obj.StudentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_studentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_finalCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_finalCode,
		func(ctx context.Context) (any, error) {
			return obj.FinalCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_finalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_gradeReviewCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_gradeReviewCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeReviewCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_gradeReviewCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_midtermCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_midtermCode,
		func(ctx context.Context) (any, error) {
			return obj.MidtermCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_midtermCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_student(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_student,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().Student(ctx, obj)
		},
		nil,
		ec.marshalOStudent2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_student(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOSupervisorTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SupervisorTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_SupervisorTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_SupervisorTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_SupervisorTopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_SupervisorTopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_SupervisorTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_SupervisorTopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_SupervisorTopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SupervisorTopicCouncil_updatedAt(ctx, field)
			case "topic":
				return ec.fieldContext_SupervisorTopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_SupervisorTopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_SupervisorTopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_SupervisorTopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SupervisorTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_midterm(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_midterm,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().Midterm(ctx, obj)
		},
		nil,
		ec.marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_midterm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Midterm_id(ctx, field)
			case "title":
				return ec.fieldContext_Midterm_title(ctx, field)
			case "grade":
				return ec.fieldContext_Midterm_grade(ctx, field)
			case "status":
				return ec.fieldContext_Midterm_status(ctx, field)
			case "feedback":
				return ec.fieldContext_Midterm_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Midterm_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Midterm_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Midterm_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Midterm_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Midterm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_final(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_final,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().Final(ctx, obj)
		},
		nil,
		ec.marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_final(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Final_id(ctx, field)
			case "title":
				return ec.fieldContext_Final_title(ctx, field)
			case "supervisorGrade":
				return ec.fieldContext_Final_supervisorGrade(ctx, field)
			case "departmentGrade":
				return ec.fieldContext_Final_departmentGrade(ctx, field)
			case "finalGrade":
				return ec.fieldContext_Final_finalGrade(ctx, field)
			case "status":
				return ec.fieldContext_Final_status(ctx, field)
			case "notes":
				return ec.fieldContext_Final_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_Final_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Final_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Final_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Final_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Final_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Final", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_gradeReview(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_gradeReview,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().GradeReview(ctx, obj)
		},
		nil,
		ec.marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_gradeReview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeReview_id(ctx, field)
			case "title":
				return ec.fieldContext_GradeReview_title(ctx, field)
			case "reviewGrade":
				return ec.fieldContext_GradeReview_reviewGrade(ctx, field)
			case "teacherCode":
				return ec.fieldContext_GradeReview_teacherCode(ctx, field)
			case "status":
				return ec.fieldContext_GradeReview_status(ctx, field)
			case "notes":
				return ec.fieldContext_GradeReview_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_GradeReview_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeReview_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeReview_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeReview_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeReview_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_GradeReview_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorEnrollment_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorEnrollment_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorEnrollment().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorEnrollment_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_id(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_title(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_status(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_percentStage1(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_percentStage1,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage1, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_percentStage1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_percentStage2(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_percentStage2,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage2, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_percentStage2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_major(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_major,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().Major(ctx, obj)
		},
		nil,
		ec.marshalOMajorInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_major(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MajorInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_MajorInfo_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_MajorInfo_facultyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MajorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_semester(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_semester,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().Semester(ctx, obj)
		},
		nil,
		ec.marshalOSemesterInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_semester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SemesterInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_SemesterInfo_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SemesterInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_enrollments(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_enrollments,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().Enrollments(ctx, obj)
		},
		nil,
		ec.marshalOSupervisorEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollmentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_enrollments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SupervisorEnrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_SupervisorEnrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_SupervisorEnrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_SupervisorEnrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_SupervisorEnrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_SupervisorEnrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_SupervisorEnrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_SupervisorEnrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SupervisorEnrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_SupervisorEnrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_SupervisorEnrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_SupervisorEnrollment_student(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_SupervisorEnrollment_topicCouncil(ctx, field)
			case "midterm":
				return ec.fieldContext_SupervisorEnrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_SupervisorEnrollment_final(ctx, field)
			case "gradeReview":
				return ec.fieldContext_SupervisorEnrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_SupervisorEnrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SupervisorEnrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_files(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_files,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().Files(ctx, obj)
		},
		nil,
		ec.marshalOFile2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFileᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "title":
				return ec.fieldContext_File_title(ctx, field)
			case "file":
				return ec.fieldContext_File_file(ctx, field)
			case "status":
				return ec.fieldContext_File_status(ctx, field)
			case "table":
				return ec.fieldContext_File_table(ctx, field)
			case "option":
				return ec.fieldContext_File_option(ctx, field)
			case "tableId":
				return ec.fieldContext_File_tableId(ctx, field)
			case "createdAt":
				return ec.fieldContext_File_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_File_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_File_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_File_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_topicSupervisors(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_topicSupervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().TopicSupervisors(ctx, obj)
		},
		nil,
		ec.marshalOTopicSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_topicSupervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_TopicSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCode":
				return ec.fieldContext_TopicSupervisor_topicCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicSupervisor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicSupervisor_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicSupervisor_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicSupervisor_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_TopicSupervisor_teacher(ctx, field)
			case "topic":
				return ec.fieldContext_TopicSupervisor_topic(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicSupervisor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopic_topicCouncils(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopic_topicCouncils,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopic().TopicCouncils(ctx, obj)
		},
		nil,
		ec.marshalOSupervisorTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncilᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopic_topicCouncils(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SupervisorTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_SupervisorTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_SupervisorTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_SupervisorTopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_SupervisorTopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_SupervisorTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_SupervisorTopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_SupervisorTopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SupervisorTopicCouncil_updatedAt(ctx, field)
			case "topic":
				return ec.fieldContext_SupervisorTopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_SupervisorTopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_SupervisorTopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_SupervisorTopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SupervisorTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_stage(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_stage,
		func(ctx context.Context) (any, error) {
			return obj.Stage, nil
		},
		nil,
		ec.marshalNTopicStage2thailyᚋsrcᚋgraphᚋmodelᚐTopicStage,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_topicCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_topicCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_topicCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_timeEnd(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_timeEnd,
		func(ctx context.Context) (any, error) {
			return obj.TimeEnd, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_timeEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_topic(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopicCouncil().Topic(ctx, obj)
		},
		nil,
		ec.marshalOSupervisorTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SupervisorTopic_id(ctx, field)
			case "title":
				return ec.fieldContext_SupervisorTopic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_SupervisorTopic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_SupervisorTopic_semesterCode(ctx, field)
			case "status":
				return ec.fieldContext_SupervisorTopic_status(ctx, field)
			case "percentStage1":
				return ec.fieldContext_SupervisorTopic_percentStage1(ctx, field)
			case "percentStage2":
				return ec.fieldContext_SupervisorTopic_percentStage2(ctx, field)
			case "createdAt":
				return ec.fieldContext_SupervisorTopic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SupervisorTopic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_SupervisorTopic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_SupervisorTopic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_SupervisorTopic_major(ctx, field)
			case "semester":
				return ec.fieldContext_SupervisorTopic_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_SupervisorTopic_enrollments(ctx, field)
			case "files":
				return ec.fieldContext_SupervisorTopic_files(ctx, field)
			case "topicSupervisors":
				return ec.fieldContext_SupervisorTopic_topicSupervisors(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_SupervisorTopic_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SupervisorTopic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_council(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopicCouncil().Council(ctx, obj)
		},
		nil,
		ec.marshalOCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Council_total(ctx, field)
			case "id":
				return ec.fieldContext_Council_id(ctx, field)
			case "title":
				return ec.fieldContext_Council_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Council_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Council_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_Council_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_Council_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Council_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Council_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Council_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Council_major(ctx, field)
			case "semester":
				return ec.fieldContext_Council_semester(ctx, field)
			case "defences":
				return ec.fieldContext_Council_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Council_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Council", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_enrollments(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_enrollments,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopicCouncil().Enrollments(ctx, obj)
		},
		nil,
		ec.marshalOSupervisorEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollmentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_enrollments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SupervisorEnrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_SupervisorEnrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_SupervisorEnrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_SupervisorEnrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_SupervisorEnrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_SupervisorEnrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_SupervisorEnrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_SupervisorEnrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SupervisorEnrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_SupervisorEnrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_SupervisorEnrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_SupervisorEnrollment_student(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_SupervisorEnrollment_topicCouncil(ctx, field)
			case "midterm":
				return ec.fieldContext_SupervisorEnrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_SupervisorEnrollment_final(ctx, field)
			case "gradeReview":
				return ec.fieldContext_SupervisorEnrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_SupervisorEnrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SupervisorEnrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SupervisorTopicCouncil_supervisors(ctx context.Context, field graphql.CollectedField, obj *model.SupervisorTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_SupervisorTopicCouncil_supervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.SupervisorTopicCouncil().Supervisors(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_SupervisorTopicCouncil_supervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SupervisorTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncilSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_TopicCouncilSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncilCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncilSupervisor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncilSupervisor_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncilSupervisor_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncilSupervisor_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_TopicCouncilSupervisor_teacher(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncil(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncilSupervisor", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateGradeDefenceCriterionInput(ctx context.Context, obj any) (model.CreateGradeDefenceCriterionInput, error) {
	var it model.CreateGradeDefenceCriterionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gradeDefenceCode", "name", "score", "maxScore"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gradeDefenceCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gradeDefenceCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GradeDefenceCode = data
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "score":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Score = data
		case "maxScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxScore"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxScore = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGradeDefenceInput(ctx context.Context, obj any) (model.CreateGradeDefenceInput, error) {
	var it model.CreateGradeDefenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"defenceCode", "enrollmentCode", "note", "totalScore"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "defenceCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defenceCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DefenceCode = data
		case "enrollmentCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enrollmentCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EnrollmentCode = data
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "totalScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalScore"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalScore = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateGradeReviewInput(ctx context.Context, obj any) (model.CreateGradeReviewInput, error) {
	var it model.CreateGradeReviewInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "reviewGrade", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "reviewGrade":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewGrade"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReviewGrade = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGradeFinalInput(ctx context.Context, obj any) (model.GradeFinalInput, error) {
	var it model.GradeFinalInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"supervisorGrade", "status", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "supervisorGrade":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supervisorGrade"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.SupervisorGrade = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNFinalStatus2thailyᚋsrcᚋgraphᚋmodelᚐFinalStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGradeMidtermInput(ctx context.Context, obj any) (model.GradeMidtermInput, error) {
	var it model.GradeMidtermInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"grade", "status", "feedback"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "grade":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("grade"))
			data, err := ec.unmarshalNInt2int32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Grade = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNMidtermStatus2thailyᚋsrcᚋgraphᚋmodelᚐMidtermStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "feedback":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Feedback = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGradeDefenceCriterionInput(ctx context.Context, obj any) (model.UpdateGradeDefenceCriterionInput, error) {
	var it model.UpdateGradeDefenceCriterionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "score", "maxScore"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "score":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Score = data
		case "maxScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxScore"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MaxScore = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGradeDefenceInput(ctx context.Context, obj any) (model.UpdateGradeDefenceInput, error) {
	var it model.UpdateGradeDefenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"note", "totalScore"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "note":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "totalScore":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("totalScore"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.TotalScore = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGradeReviewInput(ctx context.Context, obj any) (model.UpdateGradeReviewInput, error) {
	var it model.UpdateGradeReviewInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reviewGrade", "status", "notes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reviewGrade":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reviewGrade"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReviewGrade = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOFinalStatus2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinalStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "notes":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notes"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notes = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTeacherProfileInput(ctx context.Context, obj any) (model.UpdateTeacherProfileInput, error) {
	var it model.UpdateTeacherProfileInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "username"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var councilDefenceImplementors = []string{"CouncilDefence"}

func (ec *executionContext) _CouncilDefence(ctx context.Context, sel ast.SelectionSet, obj *model.CouncilDefence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilDefenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CouncilDefence")
		case "id":
			out.Values[i] = ec._CouncilDefence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._CouncilDefence_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._CouncilDefence_councilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teacherCode":
			out.Values[i] = ec._CouncilDefence_teacherCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			out.Values[i] = ec._CouncilDefence_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._CouncilDefence_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CouncilDefence_updatedAt(ctx, field, obj)
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilDefence_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilDefence_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilDefence_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var councilEnrollmentImplementors = []string{"CouncilEnrollment"}

func (ec *executionContext) _CouncilEnrollment(ctx context.Context, sel ast.SelectionSet, obj *model.CouncilEnrollment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilEnrollmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CouncilEnrollment")
		case "id":
			out.Values[i] = ec._CouncilEnrollment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._CouncilEnrollment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "studentCode":
			out.Values[i] = ec._CouncilEnrollment_studentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._CouncilEnrollment_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "finalCode":
			out.Values[i] = ec._CouncilEnrollment_finalCode(ctx, field, obj)
		case "gradeReviewCode":
			out.Values[i] = ec._CouncilEnrollment_gradeReviewCode(ctx, field, obj)
		case "midtermCode":
			out.Values[i] = ec._CouncilEnrollment_midtermCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._CouncilEnrollment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CouncilEnrollment_updatedAt(ctx, field, obj)
		case "student":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_student(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "midterm":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_midterm(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "final":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_final(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeReview":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_gradeReview(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilEnrollment_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var councilMemberCouncilImplementors = []string{"CouncilMemberCouncil"}

func (ec *executionContext) _CouncilMemberCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.CouncilMemberCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilMemberCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CouncilMemberCouncil")
		case "id":
			out.Values[i] = ec._CouncilMemberCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._CouncilMemberCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._CouncilMemberCouncil_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._CouncilMemberCouncil_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeStart":
			out.Values[i] = ec._CouncilMemberCouncil_timeStart(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._CouncilMemberCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CouncilMemberCouncil_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._CouncilMemberCouncil_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._CouncilMemberCouncil_updatedBy(ctx, field, obj)
		case "major":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilMemberCouncil_major(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "semester":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilMemberCouncil_semester(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "defences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilMemberCouncil_defences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncils":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilMemberCouncil_topicCouncils(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var councilTopicCouncilImplementors = []string{"CouncilTopicCouncil"}

func (ec *executionContext) _CouncilTopicCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.CouncilTopicCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilTopicCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CouncilTopicCouncil")
		case "id":
			out.Values[i] = ec._CouncilTopicCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._CouncilTopicCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stage":
			out.Values[i] = ec._CouncilTopicCouncil_stage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCode":
			out.Values[i] = ec._CouncilTopicCouncil_topicCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._CouncilTopicCouncil_councilCode(ctx, field, obj)
		case "timeStart":
			out.Values[i] = ec._CouncilTopicCouncil_timeStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeEnd":
			out.Values[i] = ec._CouncilTopicCouncil_timeEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._CouncilTopicCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CouncilTopicCouncil_updatedAt(ctx, field, obj)
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilTopicCouncil_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilTopicCouncil_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enrollments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilTopicCouncil_enrollments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "supervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CouncilTopicCouncil_supervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewerEnrollmentImplementors = []string{"ReviewerEnrollment"}

func (ec *executionContext) _ReviewerEnrollment(ctx context.Context, sel ast.SelectionSet, obj *model.ReviewerEnrollment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewerEnrollmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewerEnrollment")
		case "id":
			out.Values[i] = ec._ReviewerEnrollment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._ReviewerEnrollment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "studentCode":
			out.Values[i] = ec._ReviewerEnrollment_studentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._ReviewerEnrollment_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gradeReviewCode":
			out.Values[i] = ec._ReviewerEnrollment_gradeReviewCode(ctx, field, obj)
		case "midtermCode":
			out.Values[i] = ec._ReviewerEnrollment_midtermCode(ctx, field, obj)
		case "finalCode":
			out.Values[i] = ec._ReviewerEnrollment_finalCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ReviewerEnrollment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._ReviewerEnrollment_updatedAt(ctx, field, obj)
		case "student":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerEnrollment_student(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerEnrollment_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "midterm":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerEnrollment_midterm(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "final":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerEnrollment_final(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeReview":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerEnrollment_gradeReview(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewerTopicImplementors = []string{"ReviewerTopic"}

func (ec *executionContext) _ReviewerTopic(ctx context.Context, sel ast.SelectionSet, obj *model.ReviewerTopic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewerTopicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewerTopic")
		case "id":
			out.Values[i] = ec._ReviewerTopic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._ReviewerTopic_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._ReviewerTopic_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._ReviewerTopic_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "major":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerTopic_major(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerTopic_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reviewerTopicCouncilImplementors = []string{"ReviewerTopicCouncil"}

func (ec *executionContext) _ReviewerTopicCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.ReviewerTopicCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reviewerTopicCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReviewerTopicCouncil")
		case "id":
			out.Values[i] = ec._ReviewerTopicCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._ReviewerTopicCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stage":
			out.Values[i] = ec._ReviewerTopicCouncil_stage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCode":
			out.Values[i] = ec._ReviewerTopicCouncil_topicCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeStart":
			out.Values[i] = ec._ReviewerTopicCouncil_timeStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeEnd":
			out.Values[i] = ec._ReviewerTopicCouncil_timeEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerTopicCouncil_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "supervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ReviewerTopicCouncil_supervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var supervisorEnrollmentImplementors = []string{"SupervisorEnrollment"}

func (ec *executionContext) _SupervisorEnrollment(ctx context.Context, sel ast.SelectionSet, obj *model.SupervisorEnrollment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supervisorEnrollmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupervisorEnrollment")
		case "id":
			out.Values[i] = ec._SupervisorEnrollment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._SupervisorEnrollment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "studentCode":
			out.Values[i] = ec._SupervisorEnrollment_studentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._SupervisorEnrollment_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "finalCode":
			out.Values[i] = ec._SupervisorEnrollment_finalCode(ctx, field, obj)
		case "gradeReviewCode":
			out.Values[i] = ec._SupervisorEnrollment_gradeReviewCode(ctx, field, obj)
		case "midtermCode":
			out.Values[i] = ec._SupervisorEnrollment_midtermCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SupervisorEnrollment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SupervisorEnrollment_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._SupervisorEnrollment_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._SupervisorEnrollment_updatedBy(ctx, field, obj)
		case "student":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_student(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "midterm":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_midterm(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "final":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_final(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeReview":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_gradeReview(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorEnrollment_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var supervisorTopicImplementors = []string{"SupervisorTopic"}

func (ec *executionContext) _SupervisorTopic(ctx context.Context, sel ast.SelectionSet, obj *model.SupervisorTopic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supervisorTopicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupervisorTopic")
		case "id":
			out.Values[i] = ec._SupervisorTopic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._SupervisorTopic_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._SupervisorTopic_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._SupervisorTopic_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._SupervisorTopic_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "percentStage1":
			out.Values[i] = ec._SupervisorTopic_percentStage1(ctx, field, obj)
		case "percentStage2":
			out.Values[i] = ec._SupervisorTopic_percentStage2(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._SupervisorTopic_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SupervisorTopic_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._SupervisorTopic_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._SupervisorTopic_updatedBy(ctx, field, obj)
		case "major":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_major(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "semester":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_semester(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enrollments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_enrollments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicSupervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_topicSupervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncils":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopic_topicCouncils(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var supervisorTopicCouncilImplementors = []string{"SupervisorTopicCouncil"}

func (ec *executionContext) _SupervisorTopicCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.SupervisorTopicCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supervisorTopicCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupervisorTopicCouncil")
		case "id":
			out.Values[i] = ec._SupervisorTopicCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._SupervisorTopicCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stage":
			out.Values[i] = ec._SupervisorTopicCouncil_stage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCode":
			out.Values[i] = ec._SupervisorTopicCouncil_topicCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._SupervisorTopicCouncil_councilCode(ctx, field, obj)
		case "timeStart":
			out.Values[i] = ec._SupervisorTopicCouncil_timeStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeEnd":
			out.Values[i] = ec._SupervisorTopicCouncil_timeEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SupervisorTopicCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SupervisorTopicCouncil_updatedAt(ctx, field, obj)
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopicCouncil_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopicCouncil_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enrollments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopicCouncil_enrollments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "supervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SupervisorTopicCouncil_supervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCouncilDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilDefence) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCouncilDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefence(ctx context.Context, sel ast.SelectionSet, v *model.CouncilDefence) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CouncilDefence(ctx, sel, v)
}

func (ec *executionContext) marshalNCouncilEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilEnrollment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCouncilEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.CouncilEnrollment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CouncilEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalNCouncilMemberCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilMemberCouncil) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilMemberCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCouncilMemberCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncil(ctx context.Context, sel ast.SelectionSet, v *model.CouncilMemberCouncil) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CouncilMemberCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalNCouncilTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilTopicCouncil) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCouncilTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.CouncilTopicCouncil) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CouncilTopicCouncil(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateGradeDefenceCriterionInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateGradeDefenceCriterionInput(ctx context.Context, v any) (model.CreateGradeDefenceCriterionInput, error) {
	res, err := ec.unmarshalInputCreateGradeDefenceCriterionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGradeDefenceInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateGradeDefenceInput(ctx context.Context, v any) (model.CreateGradeDefenceInput, error) {
	res, err := ec.unmarshalInputCreateGradeDefenceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateGradeReviewInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateGradeReviewInput(ctx context.Context, v any) (model.CreateGradeReviewInput, error) {
	res, err := ec.unmarshalInputCreateGradeReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGradeFinalInput2thailyᚋsrcᚋgraphᚋmodelᚐGradeFinalInput(ctx context.Context, v any) (model.GradeFinalInput, error) {
	res, err := ec.unmarshalInputGradeFinalInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNGradeMidtermInput2thailyᚋsrcᚋgraphᚋmodelᚐGradeMidtermInput(ctx context.Context, v any) (model.GradeMidtermInput, error) {
	res, err := ec.unmarshalInputGradeMidtermInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNReviewerEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ReviewerEnrollment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNReviewerEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNReviewerEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.ReviewerEnrollment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ReviewerEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalNSupervisorEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SupervisorEnrollment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupervisorEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorEnrollment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SupervisorEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalNSupervisorTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SupervisorTopic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSupervisorTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopic(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorTopic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SupervisorTopic(ctx, sel, v)
}

func (ec *executionContext) marshalNSupervisorTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorTopicCouncil) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SupervisorTopicCouncil(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGradeDefenceCriterionInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateGradeDefenceCriterionInput(ctx context.Context, v any) (model.UpdateGradeDefenceCriterionInput, error) {
	res, err := ec.unmarshalInputUpdateGradeDefenceCriterionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGradeDefenceInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateGradeDefenceInput(ctx context.Context, v any) (model.UpdateGradeDefenceInput, error) {
	res, err := ec.unmarshalInputUpdateGradeDefenceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGradeReviewInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateGradeReviewInput(ctx context.Context, v any) (model.UpdateGradeReviewInput, error) {
	res, err := ec.unmarshalInputUpdateGradeReviewInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateTeacherProfileInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateTeacherProfileInput(ctx context.Context, v any) (model.UpdateTeacherProfileInput, error) {
	res, err := ec.unmarshalInputUpdateTeacherProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCouncilDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilDefence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCouncilDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilDefence(ctx context.Context, sel ast.SelectionSet, v *model.CouncilDefence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CouncilDefence(ctx, sel, v)
}

func (ec *executionContext) marshalOCouncilEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilEnrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCouncilMemberCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilMemberCouncil(ctx context.Context, sel ast.SelectionSet, v *model.CouncilMemberCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CouncilMemberCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOCouncilTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CouncilTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncilTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCouncilTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.CouncilTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CouncilTopicCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOReviewerEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.ReviewerEnrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReviewerEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalOReviewerTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerTopic(ctx context.Context, sel ast.SelectionSet, v *model.ReviewerTopic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReviewerTopic(ctx, sel, v)
}

func (ec *executionContext) marshalOReviewerTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐReviewerTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.ReviewerTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReviewerTopicCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOSupervisorEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SupervisorEnrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSupervisorEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorEnrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SupervisorEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalOSupervisorTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopic(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorTopic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SupervisorTopic(ctx, sel, v)
}

func (ec *executionContext) marshalOSupervisorTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SupervisorTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupervisorTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSupervisorTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSupervisorTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.SupervisorTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SupervisorTopicCouncil(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
