// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Faculty_id(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Faculty_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_title(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Faculty_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Faculty_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Faculty_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Faculty_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Faculty_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Faculty_majors(ctx context.Context, field graphql.CollectedField, obj *model.Faculty) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Faculty_majors,
		func(ctx context.Context) (any, error) {
			return obj.Majors, nil
		},
		nil,
		ec.marshalNMajor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Faculty_majors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Faculty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Major_id(ctx, field)
			case "title":
				return ec.fieldContext_Major_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_Major_facultyCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Major_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Major_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Major_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Major_updatedBy(ctx, field)
			case "faculty":
				return ec.fieldContext_Major_faculty(ctx, field)
			case "topics":
				return ec.fieldContext_Major_topics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Major", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_id(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Major_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_title(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Major_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_facultyCode(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_facultyCode,
		func(ctx context.Context) (any, error) {
			return obj.FacultyCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Major_facultyCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_faculty(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_faculty,
		func(ctx context.Context) (any, error) {
			return obj.Faculty, nil
		},
		nil,
		ec.marshalOFaculty2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFaculty,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_faculty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Faculty_id(ctx, field)
			case "title":
				return ec.fieldContext_Faculty_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Faculty_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Faculty_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Faculty_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Faculty_updatedBy(ctx, field)
			case "majors":
				return ec.fieldContext_Faculty_majors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Faculty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Major_topics(ctx context.Context, field graphql.CollectedField, obj *model.Major) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Major_topics,
		func(ctx context.Context) (any, error) {
			return obj.Topics, nil
		},
		nil,
		ec.marshalOTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Major_topics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Major",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_Topic_teacherSupervisorCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "timeStart":
				return ec.fieldContext_Topic_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_Topic_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Topic_major(ctx, field)
			case "enrollment":
				return ec.fieldContext_Topic_enrollment(ctx, field)
			case "semester":
				return ec.fieldContext_Topic_semester(ctx, field)
			case "teacherSupervisor":
				return ec.fieldContext_Topic_teacherSupervisor(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "schedule":
				return ec.fieldContext_Topic_schedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_id(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Semester_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_title(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Semester_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_students(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_students,
		func(ctx context.Context) (any, error) {
			return obj.Students, nil
		},
		nil,
		ec.marshalOStudent2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_students(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_teachers(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_teachers,
		func(ctx context.Context) (any, error) {
			return obj.Teachers, nil
		},
		nil,
		ec.marshalOTeacher2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacherᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_teachers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Teacher_major(ctx, field)
			case "semester":
				return ec.fieldContext_Teacher_semester(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			case "topicsSupervised":
				return ec.fieldContext_Teacher_topicsSupervised(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Semester_topics(ctx context.Context, field graphql.CollectedField, obj *model.Semester) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Semester_topics,
		func(ctx context.Context) (any, error) {
			return obj.Topics, nil
		},
		nil,
		ec.marshalOTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Semester_topics(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Semester",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_Topic_teacherSupervisorCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "timeStart":
				return ec.fieldContext_Topic_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_Topic_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Topic_major(ctx, field)
			case "enrollment":
				return ec.fieldContext_Topic_enrollment(ctx, field)
			case "semester":
				return ec.fieldContext_Topic_semester(ctx, field)
			case "teacherSupervisor":
				return ec.fieldContext_Topic_teacherSupervisor(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "schedule":
				return ec.fieldContext_Topic_schedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var facultyImplementors = []string{"Faculty"}

func (ec *executionContext) _Faculty(ctx context.Context, sel ast.SelectionSet, obj *model.Faculty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, facultyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Faculty")
		case "id":
			out.Values[i] = ec._Faculty_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Faculty_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Faculty_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Faculty_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Faculty_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Faculty_updatedBy(ctx, field, obj)
		case "majors":
			out.Values[i] = ec._Faculty_majors(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var majorImplementors = []string{"Major"}

func (ec *executionContext) _Major(ctx context.Context, sel ast.SelectionSet, obj *model.Major) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, majorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Major")
		case "id":
			out.Values[i] = ec._Major_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Major_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "facultyCode":
			out.Values[i] = ec._Major_facultyCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Major_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Major_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Major_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Major_updatedBy(ctx, field, obj)
		case "faculty":
			out.Values[i] = ec._Major_faculty(ctx, field, obj)
		case "topics":
			out.Values[i] = ec._Major_topics(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var semesterImplementors = []string{"Semester"}

func (ec *executionContext) _Semester(ctx context.Context, sel ast.SelectionSet, obj *model.Semester) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, semesterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Semester")
		case "id":
			out.Values[i] = ec._Semester_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Semester_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Semester_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Semester_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Semester_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Semester_updatedBy(ctx, field, obj)
		case "students":
			out.Values[i] = ec._Semester_students(ctx, field, obj)
		case "teachers":
			out.Values[i] = ec._Semester_teachers(ctx, field, obj)
		case "topics":
			out.Values[i] = ec._Semester_topics(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNMajor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Major) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMajor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMajor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajor(ctx context.Context, sel ast.SelectionSet, v *model.Major) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Major(ctx, sel, v)
}

func (ec *executionContext) marshalNSemester2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemester(ctx context.Context, sel ast.SelectionSet, v *model.Semester) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Semester(ctx, sel, v)
}

func (ec *executionContext) marshalOFaculty2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFaculty(ctx context.Context, sel ast.SelectionSet, v *model.Faculty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Faculty(ctx, sel, v)
}

func (ec *executionContext) marshalOMajor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajor(ctx context.Context, sel ast.SelectionSet, v *model.Major) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Major(ctx, sel, v)
}

func (ec *executionContext) marshalOSemester2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Semester) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSemester2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemester(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOSemester2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemester(ctx context.Context, sel ast.SelectionSet, v *model.Semester) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Semester(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
