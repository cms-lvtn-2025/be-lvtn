// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type CouncilResolver interface {
	Defences(ctx context.Context, obj *model.Council) ([]*model.Defence, error)
	TopicCouncils(ctx context.Context, obj *model.Council) ([]*model.TopicCouncil, error)
}
type DefenceResolver interface {
	Council(ctx context.Context, obj *model.Defence) (*model.Council, error)
	Teacher(ctx context.Context, obj *model.Defence) (*model.Teacher, error)
	GradeDefences(ctx context.Context, obj *model.Defence) ([]*model.GradeDefence, error)
}
type GradeDefenceResolver interface {
	Defence(ctx context.Context, obj *model.GradeDefence) (*model.Defence, error)
	Enrollment(ctx context.Context, obj *model.GradeDefence) (*model.Enrollment, error)
	Criteria(ctx context.Context, obj *model.GradeDefence) ([]*model.GradeDefenceCriterion, error)
}
type GradeDefenceCriterionResolver interface {
	GradeDefence(ctx context.Context, obj *model.GradeDefenceCriterion) (*model.GradeDefence, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Council_total(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_id(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Council_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_title(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Council_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Council_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Council_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_defences(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_defences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Council().Defences(ctx, obj)
		},
		nil,
		ec.marshalODefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_defences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Defence_id(ctx, field)
			case "title":
				return ec.fieldContext_Defence_title(ctx, field)
			case "councilCode":
				return ec.fieldContext_Defence_councilCode(ctx, field)
			case "teacherCode":
				return ec.fieldContext_Defence_teacherCode(ctx, field)
			case "position":
				return ec.fieldContext_Defence_position(ctx, field)
			case "createdAt":
				return ec.fieldContext_Defence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Defence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Defence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Defence_updatedBy(ctx, field)
			case "council":
				return ec.fieldContext_Defence_council(ctx, field)
			case "teacher":
				return ec.fieldContext_Defence_teacher(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_Defence_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Defence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Council_topicCouncils(ctx context.Context, field graphql.CollectedField, obj *model.Council) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Council_topicCouncils,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Council().TopicCouncils(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Council_topicCouncils(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Council",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_TopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_TopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_TopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_TopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_TopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_TopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncil_updatedBy(ctx, field)
			case "topic":
				return ec.fieldContext_TopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_TopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_TopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_TopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_id(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Defence_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_title(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Defence_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Defence_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_teacherCode(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_teacherCode,
		func(ctx context.Context) (any, error) {
			return obj.TeacherCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Defence_teacherCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_position(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_position,
		func(ctx context.Context) (any, error) {
			return obj.Position, nil
		},
		nil,
		ec.marshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Defence_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DefencePosition does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_council(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Defence().Council(ctx, obj)
		},
		nil,
		ec.marshalOCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Council_total(ctx, field)
			case "id":
				return ec.fieldContext_Council_id(ctx, field)
			case "title":
				return ec.fieldContext_Council_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Council_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Council_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_Council_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_Council_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Council_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Council_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Council_updatedBy(ctx, field)
			case "defences":
				return ec.fieldContext_Council_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Council_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Council", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_teacher(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Defence().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOTeacher2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacher,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Defence_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.Defence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Defence_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Defence().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Defence_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Defence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_id(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_defenceCode(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_defenceCode,
		func(ctx context.Context) (any, error) {
			return obj.DefenceCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_defenceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_enrollmentCode(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_enrollmentCode,
		func(ctx context.Context) (any, error) {
			return obj.EnrollmentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_enrollmentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_note(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_note,
		func(ctx context.Context) (any, error) {
			return obj.Note, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_totalScore(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_totalScore,
		func(ctx context.Context) (any, error) {
			return obj.TotalScore, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_totalScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_defence(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_defence,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GradeDefence().Defence(ctx, obj)
		},
		nil,
		ec.marshalODefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐDefence,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_defence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Defence_id(ctx, field)
			case "title":
				return ec.fieldContext_Defence_title(ctx, field)
			case "councilCode":
				return ec.fieldContext_Defence_councilCode(ctx, field)
			case "teacherCode":
				return ec.fieldContext_Defence_teacherCode(ctx, field)
			case "position":
				return ec.fieldContext_Defence_position(ctx, field)
			case "createdAt":
				return ec.fieldContext_Defence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Defence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Defence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Defence_updatedBy(ctx, field)
			case "council":
				return ec.fieldContext_Defence_council(ctx, field)
			case "teacher":
				return ec.fieldContext_Defence_teacher(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_Defence_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Defence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_enrollment(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_enrollment,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GradeDefence().Enrollment(ctx, obj)
		},
		nil,
		ec.marshalOEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollment,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_enrollment(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Enrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_Enrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_Enrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_Enrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_Enrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_Enrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_Enrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Enrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Enrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_Enrollment_student(ctx, field)
			case "midterm":
				return ec.fieldContext_Enrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_Enrollment_final(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_Enrollment_topicCouncil(ctx, field)
			case "gradeReview":
				return ec.fieldContext_Enrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_Enrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefence_criteria(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefence_criteria,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GradeDefence().Criteria(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefenceCriterion2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefence_criteria(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefenceCriterion_id(ctx, field)
			case "gradeDefenceCode":
				return ec.fieldContext_GradeDefenceCriterion_gradeDefenceCode(ctx, field)
			case "name":
				return ec.fieldContext_GradeDefenceCriterion_name(ctx, field)
			case "score":
				return ec.fieldContext_GradeDefenceCriterion_score(ctx, field)
			case "maxScore":
				return ec.fieldContext_GradeDefenceCriterion_maxScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefenceCriterion_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefenceCriterion_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefenceCriterion_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefenceCriterion_updatedBy(ctx, field)
			case "gradeDefence":
				return ec.fieldContext_GradeDefenceCriterion_gradeDefence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefenceCriterion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_id(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_gradeDefenceCode(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_gradeDefenceCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeDefenceCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_gradeDefenceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_name(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_score(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_score,
		func(ctx context.Context) (any, error) {
			return obj.Score, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_score(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_maxScore(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_maxScore,
		func(ctx context.Context) (any, error) {
			return obj.MaxScore, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_maxScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeDefenceCriterion_gradeDefence(ctx context.Context, field graphql.CollectedField, obj *model.GradeDefenceCriterion) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeDefenceCriterion_gradeDefence,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GradeDefenceCriterion().GradeDefence(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefence,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeDefenceCriterion_gradeDefence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeDefenceCriterion",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var councilImplementors = []string{"Council"}

func (ec *executionContext) _Council(ctx context.Context, sel ast.SelectionSet, obj *model.Council) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, councilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Council")
		case "total":
			out.Values[i] = ec._Council_total(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Council_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Council_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._Council_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._Council_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeStart":
			out.Values[i] = ec._Council_timeStart(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Council_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Council_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Council_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Council_updatedBy(ctx, field, obj)
		case "defences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Council_defences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncils":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Council_topicCouncils(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var defenceImplementors = []string{"Defence"}

func (ec *executionContext) _Defence(ctx context.Context, sel ast.SelectionSet, obj *model.Defence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, defenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Defence")
		case "id":
			out.Values[i] = ec._Defence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Defence_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._Defence_councilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teacherCode":
			out.Values[i] = ec._Defence_teacherCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			out.Values[i] = ec._Defence_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Defence_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Defence_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Defence_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Defence_updatedBy(ctx, field, obj)
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Defence_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Defence_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Defence_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gradeDefenceImplementors = []string{"GradeDefence"}

func (ec *executionContext) _GradeDefence(ctx context.Context, sel ast.SelectionSet, obj *model.GradeDefence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeDefenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradeDefence")
		case "id":
			out.Values[i] = ec._GradeDefence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "defenceCode":
			out.Values[i] = ec._GradeDefence_defenceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enrollmentCode":
			out.Values[i] = ec._GradeDefence_enrollmentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "note":
			out.Values[i] = ec._GradeDefence_note(ctx, field, obj)
		case "totalScore":
			out.Values[i] = ec._GradeDefence_totalScore(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._GradeDefence_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._GradeDefence_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._GradeDefence_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._GradeDefence_updatedBy(ctx, field, obj)
		case "defence":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GradeDefence_defence(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enrollment":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GradeDefence_enrollment(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "criteria":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GradeDefence_criteria(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gradeDefenceCriterionImplementors = []string{"GradeDefenceCriterion"}

func (ec *executionContext) _GradeDefenceCriterion(ctx context.Context, sel ast.SelectionSet, obj *model.GradeDefenceCriterion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeDefenceCriterionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradeDefenceCriterion")
		case "id":
			out.Values[i] = ec._GradeDefenceCriterion_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "gradeDefenceCode":
			out.Values[i] = ec._GradeDefenceCriterion_gradeDefenceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._GradeDefenceCriterion_name(ctx, field, obj)
		case "score":
			out.Values[i] = ec._GradeDefenceCriterion_score(ctx, field, obj)
		case "maxScore":
			out.Values[i] = ec._GradeDefenceCriterion_maxScore(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._GradeDefenceCriterion_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._GradeDefenceCriterion_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._GradeDefenceCriterion_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._GradeDefenceCriterion_updatedBy(ctx, field, obj)
		case "gradeDefence":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GradeDefenceCriterion_gradeDefence(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNCouncil2thailyᚋsrcᚋgraphᚋmodelᚐCouncil(ctx context.Context, sel ast.SelectionSet, v model.Council) graphql.Marshaler {
	return ec._Council(ctx, sel, &v)
}

func (ec *executionContext) marshalNCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Council) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil(ctx context.Context, sel ast.SelectionSet, v *model.Council) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Council(ctx, sel, v)
}

func (ec *executionContext) marshalNDefence2thailyᚋsrcᚋgraphᚋmodelᚐDefence(ctx context.Context, sel ast.SelectionSet, v model.Defence) graphql.Marshaler {
	return ec._Defence(ctx, sel, &v)
}

func (ec *executionContext) marshalNDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Defence) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐDefence(ctx context.Context, sel ast.SelectionSet, v *model.Defence) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Defence(ctx, sel, v)
}

func (ec *executionContext) marshalNGradeDefence2thailyᚋsrcᚋgraphᚋmodelᚐGradeDefence(ctx context.Context, sel ast.SelectionSet, v model.GradeDefence) graphql.Marshaler {
	return ec._GradeDefence(ctx, sel, &v)
}

func (ec *executionContext) marshalNGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GradeDefence) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefence(ctx context.Context, sel ast.SelectionSet, v *model.GradeDefence) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GradeDefence(ctx, sel, v)
}

func (ec *executionContext) marshalNGradeDefenceCriterion2thailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterion(ctx context.Context, sel ast.SelectionSet, v model.GradeDefenceCriterion) graphql.Marshaler {
	return ec._GradeDefenceCriterion(ctx, sel, &v)
}

func (ec *executionContext) marshalNGradeDefenceCriterion2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GradeDefenceCriterion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeDefenceCriterion2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGradeDefenceCriterion2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterion(ctx context.Context, sel ast.SelectionSet, v *model.GradeDefenceCriterion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GradeDefenceCriterion(ctx, sel, v)
}

func (ec *executionContext) marshalOCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil(ctx context.Context, sel ast.SelectionSet, v *model.Council) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Council(ctx, sel, v)
}

func (ec *executionContext) marshalODefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Defence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐDefence(ctx context.Context, sel ast.SelectionSet, v *model.Defence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Defence(ctx, sel, v)
}

func (ec *executionContext) marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GradeDefence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefence(ctx context.Context, sel ast.SelectionSet, v *model.GradeDefence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GradeDefence(ctx, sel, v)
}

func (ec *executionContext) marshalOGradeDefenceCriterion2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GradeDefenceCriterion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeDefenceCriterion2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

// endregion ***************************** type.gotpl *****************************
