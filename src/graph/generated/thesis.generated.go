// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type EnrollmentResolver interface {
	Student(ctx context.Context, obj *model.Enrollment) (*model.Student, error)
	Midterm(ctx context.Context, obj *model.Enrollment) (*model.Midterm, error)
	Final(ctx context.Context, obj *model.Enrollment) (*model.Final, error)
	TopicCouncil(ctx context.Context, obj *model.Enrollment) (*model.TopicCouncil, error)
	GradeReview(ctx context.Context, obj *model.Enrollment) (*model.GradeReview, error)
	GradeDefences(ctx context.Context, obj *model.Enrollment) ([]*model.GradeDefence, error)
}
type GradeReviewResolver interface {
	Teacher(ctx context.Context, obj *model.GradeReview) (*model.Teacher, error)
}
type TopicResolver interface {
	Files(ctx context.Context, obj *model.Topic) ([]*model.File, error)
	TopicCouncils(ctx context.Context, obj *model.Topic) ([]*model.TopicCouncil, error)
}
type TopicCouncilResolver interface {
	Topic(ctx context.Context, obj *model.TopicCouncil) (*model.Topic, error)
	Council(ctx context.Context, obj *model.TopicCouncil) (*model.Council, error)
	Enrollments(ctx context.Context, obj *model.TopicCouncil) ([]*model.Enrollment, error)
	Supervisors(ctx context.Context, obj *model.TopicCouncil) ([]*model.TopicCouncilSupervisor, error)
}
type TopicCouncilSupervisorResolver interface {
	Teacher(ctx context.Context, obj *model.TopicCouncilSupervisor) (*model.Teacher, error)
	TopicCouncil(ctx context.Context, obj *model.TopicCouncilSupervisor) (*model.TopicCouncil, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Enrollment_id(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Enrollment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_title(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Enrollment_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_studentCode(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_studentCode,
		func(ctx context.Context) (any, error) {
			return obj.StudentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Enrollment_studentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Enrollment_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_finalCode(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_finalCode,
		func(ctx context.Context) (any, error) {
			return obj.FinalCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_finalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_gradeReviewCode(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_gradeReviewCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeReviewCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_gradeReviewCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_midtermCode(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_midtermCode,
		func(ctx context.Context) (any, error) {
			return obj.MidtermCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_midtermCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_student(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_student,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().Student(ctx, obj)
		},
		nil,
		ec.marshalOStudent2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudent,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_student(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_midterm(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_midterm,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().Midterm(ctx, obj)
		},
		nil,
		ec.marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_midterm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Midterm_id(ctx, field)
			case "title":
				return ec.fieldContext_Midterm_title(ctx, field)
			case "grade":
				return ec.fieldContext_Midterm_grade(ctx, field)
			case "status":
				return ec.fieldContext_Midterm_status(ctx, field)
			case "feedback":
				return ec.fieldContext_Midterm_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Midterm_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Midterm_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Midterm_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Midterm_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Midterm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_final(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_final,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().Final(ctx, obj)
		},
		nil,
		ec.marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_final(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Final_id(ctx, field)
			case "title":
				return ec.fieldContext_Final_title(ctx, field)
			case "supervisorGrade":
				return ec.fieldContext_Final_supervisorGrade(ctx, field)
			case "departmentGrade":
				return ec.fieldContext_Final_departmentGrade(ctx, field)
			case "finalGrade":
				return ec.fieldContext_Final_finalGrade(ctx, field)
			case "status":
				return ec.fieldContext_Final_status(ctx, field)
			case "notes":
				return ec.fieldContext_Final_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_Final_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Final_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Final_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Final_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Final_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Final", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_TopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_TopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_TopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_TopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_TopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_TopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncil_updatedBy(ctx, field)
			case "topic":
				return ec.fieldContext_TopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_TopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_TopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_TopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_gradeReview(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_gradeReview,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().GradeReview(ctx, obj)
		},
		nil,
		ec.marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_gradeReview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeReview_id(ctx, field)
			case "title":
				return ec.fieldContext_GradeReview_title(ctx, field)
			case "reviewGrade":
				return ec.fieldContext_GradeReview_reviewGrade(ctx, field)
			case "teacherCode":
				return ec.fieldContext_GradeReview_teacherCode(ctx, field)
			case "status":
				return ec.fieldContext_GradeReview_status(ctx, field)
			case "notes":
				return ec.fieldContext_GradeReview_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_GradeReview_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeReview_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeReview_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeReview_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeReview_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_GradeReview_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Enrollment_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.Enrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Enrollment_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Enrollment().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Enrollment_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Enrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_GradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_GradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_GradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_GradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefence_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefence_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefence_updatedBy(ctx, field)
			case "defence":
				return ec.fieldContext_GradeDefence_defence(ctx, field)
			case "enrollment":
				return ec.fieldContext_GradeDefence_enrollment(ctx, field)
			case "criteria":
				return ec.fieldContext_GradeDefence_criteria(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_id(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Final_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_title(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Final_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_supervisorGrade(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_supervisorGrade,
		func(ctx context.Context) (any, error) {
			return obj.SupervisorGrade, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_supervisorGrade(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_departmentGrade(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_departmentGrade,
		func(ctx context.Context) (any, error) {
			return obj.DepartmentGrade, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_departmentGrade(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_finalGrade(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_finalGrade,
		func(ctx context.Context) (any, error) {
			return obj.FinalGrade, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_finalGrade(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_status(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNFinalStatus2thailyᚋsrcᚋgraphᚋmodelᚐFinalStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Final_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FinalStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_notes(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_completionDate(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_completionDate,
		func(ctx context.Context) (any, error) {
			return obj.CompletionDate, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_completionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Final_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Final) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Final_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Final_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Final",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_id(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeReview_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_title(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeReview_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_reviewGrade(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_reviewGrade,
		func(ctx context.Context) (any, error) {
			return obj.ReviewGrade, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_reviewGrade(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_teacherCode(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_teacherCode,
		func(ctx context.Context) (any, error) {
			return obj.TeacherCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeReview_teacherCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_status(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNFinalStatus2thailyᚋsrcᚋgraphᚋmodelᚐFinalStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_GradeReview_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FinalStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_notes(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_notes,
		func(ctx context.Context) (any, error) {
			return obj.Notes, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_notes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_completionDate(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_completionDate,
		func(ctx context.Context) (any, error) {
			return obj.CompletionDate, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_completionDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GradeReview_teacher(ctx context.Context, field graphql.CollectedField, obj *model.GradeReview) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_GradeReview_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.GradeReview().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOTeacher2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacher,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_GradeReview_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GradeReview",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_id(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Midterm_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_title(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Midterm_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_grade(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_grade,
		func(ctx context.Context) (any, error) {
			return obj.Grade, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_grade(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_status(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNMidtermStatus2thailyᚋsrcᚋgraphᚋmodelᚐMidtermStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Midterm_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MidtermStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_feedback(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_feedback,
		func(ctx context.Context) (any, error) {
			return obj.Feedback, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_feedback(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Midterm_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Midterm) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Midterm_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Midterm_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Midterm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_total(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_total,
		func(ctx context.Context) (any, error) {
			return obj.Total, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_total(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_id(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_title(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_status(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Topic_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_percentStage1(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_percentStage1,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage1, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_percentStage1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_percentStage2(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_percentStage2,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage2, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_percentStage2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_files(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_files,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Topic().Files(ctx, obj)
		},
		nil,
		ec.marshalOFile2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFileᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "title":
				return ec.fieldContext_File_title(ctx, field)
			case "file":
				return ec.fieldContext_File_file(ctx, field)
			case "status":
				return ec.fieldContext_File_status(ctx, field)
			case "table":
				return ec.fieldContext_File_table(ctx, field)
			case "option":
				return ec.fieldContext_File_option(ctx, field)
			case "tableId":
				return ec.fieldContext_File_tableId(ctx, field)
			case "createdAt":
				return ec.fieldContext_File_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_File_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_File_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_File_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Topic_topicCouncils(ctx context.Context, field graphql.CollectedField, obj *model.Topic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Topic_topicCouncils,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Topic().TopicCouncils(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Topic_topicCouncils(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Topic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_TopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_TopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_TopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_TopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_TopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_TopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncil_updatedBy(ctx, field)
			case "topic":
				return ec.fieldContext_TopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_TopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_TopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_TopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_stage(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_stage,
		func(ctx context.Context) (any, error) {
			return obj.Stage, nil
		},
		nil,
		ec.marshalNTopicStage2thailyᚋsrcᚋgraphᚋmodelᚐTopicStage,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_topicCode(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_topicCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_topicCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_timeEnd(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_timeEnd,
		func(ctx context.Context) (any, error) {
			return obj.TimeEnd, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_timeEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_topic(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncil().Topic(ctx, obj)
		},
		nil,
		ec.marshalOTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "percentStage1":
				return ec.fieldContext_Topic_percentStage1(ctx, field)
			case "percentStage2":
				return ec.fieldContext_Topic_percentStage2(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Topic_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_council(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncil().Council(ctx, obj)
		},
		nil,
		ec.marshalOCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Council_total(ctx, field)
			case "id":
				return ec.fieldContext_Council_id(ctx, field)
			case "title":
				return ec.fieldContext_Council_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Council_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Council_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_Council_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_Council_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Council_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Council_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Council_updatedBy(ctx, field)
			case "defences":
				return ec.fieldContext_Council_defences(ctx, field)
			case "topicCouncils":
				return ec.fieldContext_Council_topicCouncils(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Council", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_enrollments(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_enrollments,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncil().Enrollments(ctx, obj)
		},
		nil,
		ec.marshalOEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_enrollments(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Enrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_Enrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_Enrollment_studentCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_Enrollment_topicCouncilCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_Enrollment_finalCode(ctx, field)
			case "gradeReviewCode":
				return ec.fieldContext_Enrollment_gradeReviewCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_Enrollment_midtermCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Enrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Enrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_Enrollment_student(ctx, field)
			case "midterm":
				return ec.fieldContext_Enrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_Enrollment_final(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_Enrollment_topicCouncil(ctx, field)
			case "gradeReview":
				return ec.fieldContext_Enrollment_gradeReview(ctx, field)
			case "gradeDefences":
				return ec.fieldContext_Enrollment_gradeDefences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enrollment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncil_supervisors(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncil_supervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncil().Supervisors(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncil_supervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncilSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_TopicCouncilSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncilCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncilSupervisor_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncilSupervisor_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncilSupervisor_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncilSupervisor_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_TopicCouncilSupervisor_teacher(ctx, field)
			case "topicCouncil":
				return ec.fieldContext_TopicCouncilSupervisor_topicCouncil(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncilSupervisor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_id(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_teacherSupervisorCode(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_teacherSupervisorCode,
		func(ctx context.Context) (any, error) {
			return obj.TeacherSupervisorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_teacherSupervisorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_teacher(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncilSupervisor().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOTeacher2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacher,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopicCouncilSupervisor_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.TopicCouncilSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TopicCouncilSupervisor_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.TopicCouncilSupervisor().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TopicCouncilSupervisor_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopicCouncilSupervisor",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_TopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_TopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_TopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_TopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_TopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_TopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_TopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_TopicCouncil_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_TopicCouncil_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_TopicCouncil_updatedBy(ctx, field)
			case "topic":
				return ec.fieldContext_TopicCouncil_topic(ctx, field)
			case "council":
				return ec.fieldContext_TopicCouncil_council(ctx, field)
			case "enrollments":
				return ec.fieldContext_TopicCouncil_enrollments(ctx, field)
			case "supervisors":
				return ec.fieldContext_TopicCouncil_supervisors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopicCouncil", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var enrollmentImplementors = []string{"Enrollment"}

func (ec *executionContext) _Enrollment(ctx context.Context, sel ast.SelectionSet, obj *model.Enrollment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, enrollmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Enrollment")
		case "id":
			out.Values[i] = ec._Enrollment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Enrollment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "studentCode":
			out.Values[i] = ec._Enrollment_studentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._Enrollment_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "finalCode":
			out.Values[i] = ec._Enrollment_finalCode(ctx, field, obj)
		case "gradeReviewCode":
			out.Values[i] = ec._Enrollment_gradeReviewCode(ctx, field, obj)
		case "midtermCode":
			out.Values[i] = ec._Enrollment_midtermCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Enrollment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Enrollment_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Enrollment_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Enrollment_updatedBy(ctx, field, obj)
		case "student":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_student(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "midterm":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_midterm(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "final":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_final(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeReview":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_gradeReview(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Enrollment_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var finalImplementors = []string{"Final"}

func (ec *executionContext) _Final(ctx context.Context, sel ast.SelectionSet, obj *model.Final) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, finalImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Final")
		case "id":
			out.Values[i] = ec._Final_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Final_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "supervisorGrade":
			out.Values[i] = ec._Final_supervisorGrade(ctx, field, obj)
		case "departmentGrade":
			out.Values[i] = ec._Final_departmentGrade(ctx, field, obj)
		case "finalGrade":
			out.Values[i] = ec._Final_finalGrade(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Final_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "notes":
			out.Values[i] = ec._Final_notes(ctx, field, obj)
		case "completionDate":
			out.Values[i] = ec._Final_completionDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Final_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Final_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Final_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Final_updatedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gradeReviewImplementors = []string{"GradeReview"}

func (ec *executionContext) _GradeReview(ctx context.Context, sel ast.SelectionSet, obj *model.GradeReview) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gradeReviewImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GradeReview")
		case "id":
			out.Values[i] = ec._GradeReview_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._GradeReview_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "reviewGrade":
			out.Values[i] = ec._GradeReview_reviewGrade(ctx, field, obj)
		case "teacherCode":
			out.Values[i] = ec._GradeReview_teacherCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._GradeReview_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "notes":
			out.Values[i] = ec._GradeReview_notes(ctx, field, obj)
		case "completionDate":
			out.Values[i] = ec._GradeReview_completionDate(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._GradeReview_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._GradeReview_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._GradeReview_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._GradeReview_updatedBy(ctx, field, obj)
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GradeReview_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var midtermImplementors = []string{"Midterm"}

func (ec *executionContext) _Midterm(ctx context.Context, sel ast.SelectionSet, obj *model.Midterm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, midtermImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Midterm")
		case "id":
			out.Values[i] = ec._Midterm_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Midterm_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "grade":
			out.Values[i] = ec._Midterm_grade(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Midterm_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "feedback":
			out.Values[i] = ec._Midterm_feedback(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Midterm_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Midterm_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Midterm_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Midterm_updatedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topicImplementors = []string{"Topic"}

func (ec *executionContext) _Topic(ctx context.Context, sel ast.SelectionSet, obj *model.Topic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Topic")
		case "total":
			out.Values[i] = ec._Topic_total(ctx, field, obj)
		case "id":
			out.Values[i] = ec._Topic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._Topic_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._Topic_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._Topic_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._Topic_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "percentStage1":
			out.Values[i] = ec._Topic_percentStage1(ctx, field, obj)
		case "percentStage2":
			out.Values[i] = ec._Topic_percentStage2(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Topic_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Topic_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._Topic_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._Topic_updatedBy(ctx, field, obj)
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncils":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Topic_topicCouncils(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topicCouncilImplementors = []string{"TopicCouncil"}

func (ec *executionContext) _TopicCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.TopicCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicCouncil")
		case "id":
			out.Values[i] = ec._TopicCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._TopicCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stage":
			out.Values[i] = ec._TopicCouncil_stage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCode":
			out.Values[i] = ec._TopicCouncil_topicCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._TopicCouncil_councilCode(ctx, field, obj)
		case "timeStart":
			out.Values[i] = ec._TopicCouncil_timeStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeEnd":
			out.Values[i] = ec._TopicCouncil_timeEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TopicCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._TopicCouncil_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._TopicCouncil_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._TopicCouncil_updatedBy(ctx, field, obj)
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncil_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncil_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "enrollments":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncil_enrollments(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "supervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncil_supervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topicCouncilSupervisorImplementors = []string{"TopicCouncilSupervisor"}

func (ec *executionContext) _TopicCouncilSupervisor(ctx context.Context, sel ast.SelectionSet, obj *model.TopicCouncilSupervisor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topicCouncilSupervisorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopicCouncilSupervisor")
		case "id":
			out.Values[i] = ec._TopicCouncilSupervisor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teacherSupervisorCode":
			out.Values[i] = ec._TopicCouncilSupervisor_teacherSupervisorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._TopicCouncilSupervisor_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._TopicCouncilSupervisor_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._TopicCouncilSupervisor_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._TopicCouncilSupervisor_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._TopicCouncilSupervisor_updatedBy(ctx, field, obj)
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncilSupervisor_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._TopicCouncilSupervisor_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Enrollment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.Enrollment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Enrollment(ctx, sel, v)
}

func (ec *executionContext) marshalNFinal2thailyᚋsrcᚋgraphᚋmodelᚐFinal(ctx context.Context, sel ast.SelectionSet, v model.Final) graphql.Marshaler {
	return ec._Final(ctx, sel, &v)
}

func (ec *executionContext) marshalNFinal2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFinalᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Final) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal(ctx context.Context, sel ast.SelectionSet, v *model.Final) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Final(ctx, sel, v)
}

func (ec *executionContext) marshalNGradeReview2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReviewᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GradeReview) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview(ctx context.Context, sel ast.SelectionSet, v *model.GradeReview) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GradeReview(ctx, sel, v)
}

func (ec *executionContext) marshalNMidterm2thailyᚋsrcᚋgraphᚋmodelᚐMidterm(ctx context.Context, sel ast.SelectionSet, v model.Midterm) graphql.Marshaler {
	return ec._Midterm(ctx, sel, &v)
}

func (ec *executionContext) marshalNMidterm2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐMidtermᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Midterm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm(ctx context.Context, sel ast.SelectionSet, v *model.Midterm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Midterm(ctx, sel, v)
}

func (ec *executionContext) marshalNTopic2thailyᚋsrcᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v model.Topic) graphql.Marshaler {
	return ec._Topic(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Topic) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v *model.Topic) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicCouncil2thailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil(ctx context.Context, sel ast.SelectionSet, v model.TopicCouncil) graphql.Marshaler {
	return ec._TopicCouncil(ctx, sel, &v)
}

func (ec *executionContext) marshalNTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopicCouncil) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.TopicCouncil) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalNTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopicCouncilSupervisor) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopicCouncilSupervisor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTopicCouncilSupervisor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisor(ctx context.Context, sel ast.SelectionSet, v *model.TopicCouncilSupervisor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TopicCouncilSupervisor(ctx, sel, v)
}

func (ec *executionContext) marshalOEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Enrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.Enrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Enrollment(ctx, sel, v)
}

func (ec *executionContext) marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal(ctx context.Context, sel ast.SelectionSet, v *model.Final) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Final(ctx, sel, v)
}

func (ec *executionContext) marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview(ctx context.Context, sel ast.SelectionSet, v *model.GradeReview) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GradeReview(ctx, sel, v)
}

func (ec *executionContext) marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm(ctx context.Context, sel ast.SelectionSet, v *model.Midterm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Midterm(ctx, sel, v)
}

func (ec *executionContext) marshalOTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Topic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopic(ctx context.Context, sel ast.SelectionSet, v *model.Topic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Topic(ctx, sel, v)
}

func (ec *executionContext) marshalOTopicCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.TopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopicCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOTopicCouncilSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TopicCouncilSupervisor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTopicCouncilSupervisor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicCouncilSupervisor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

// endregion ***************************** type.gotpl *****************************
