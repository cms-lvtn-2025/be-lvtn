// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type StudentCouncilResolver interface {
	Major(ctx context.Context, obj *model.StudentCouncil) (*model.MajorInfo, error)
	Semester(ctx context.Context, obj *model.StudentCouncil) (*model.SemesterInfo, error)
	Defences(ctx context.Context, obj *model.StudentCouncil) ([]*model.StudentDefenceInfo, error)
}
type StudentDefenceInfoResolver interface {
	Teacher(ctx context.Context, obj *model.StudentDefenceInfo) (*model.StudentTeacherInfo, error)
}
type StudentEnrollmentResolver interface {
	TopicCouncil(ctx context.Context, obj *model.StudentEnrollment) (*model.StudentTopicCouncil, error)
	Midterm(ctx context.Context, obj *model.StudentEnrollment) (*model.Midterm, error)
	Final(ctx context.Context, obj *model.StudentEnrollment) (*model.Final, error)
	GradeReview(ctx context.Context, obj *model.StudentEnrollment) (*model.GradeReview, error)
	GradeDefences(ctx context.Context, obj *model.StudentEnrollment) ([]*model.StudentGradeDefence, error)
}
type StudentGradeDefenceResolver interface {
	Criteria(ctx context.Context, obj *model.StudentGradeDefence) ([]*model.GradeDefenceCriterion, error)
	Defence(ctx context.Context, obj *model.StudentGradeDefence) (*model.StudentDefenceInfo, error)
}
type StudentTopicResolver interface {
	Major(ctx context.Context, obj *model.StudentTopic) (*model.MajorInfo, error)
	Semester(ctx context.Context, obj *model.StudentTopic) (*model.SemesterInfo, error)
	Files(ctx context.Context, obj *model.StudentTopic) ([]*model.File, error)
}
type StudentTopicCouncilResolver interface {
	Topic(ctx context.Context, obj *model.StudentTopicCouncil) (*model.StudentTopic, error)
	Supervisors(ctx context.Context, obj *model.StudentTopicCouncil) ([]*model.StudentTopicSupervisor, error)
	Council(ctx context.Context, obj *model.StudentTopicCouncil) (*model.StudentCouncil, error)
}
type StudentTopicSupervisorResolver interface {
	Teacher(ctx context.Context, obj *model.StudentTopicSupervisor) (*model.StudentTeacherInfo, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _StudentCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_major(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_major,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentCouncil().Major(ctx, obj)
		},
		nil,
		ec.marshalOMajorInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_major(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MajorInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_MajorInfo_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_MajorInfo_facultyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MajorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_semester(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_semester,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentCouncil().Semester(ctx, obj)
		},
		nil,
		ec.marshalOSemesterInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_semester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SemesterInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_SemesterInfo_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SemesterInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentCouncil_defences(ctx context.Context, field graphql.CollectedField, obj *model.StudentCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentCouncil_defences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentCouncil().Defences(ctx, obj)
		},
		nil,
		ec.marshalOStudentDefenceInfo2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfoᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentCouncil_defences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentDefenceInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_StudentDefenceInfo_title(ctx, field)
			case "position":
				return ec.fieldContext_StudentDefenceInfo_position(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentDefenceInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentDefenceInfo_updatedAt(ctx, field)
			case "teacher":
				return ec.fieldContext_StudentDefenceInfo_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentDefenceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_title(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_position(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_position,
		func(ctx context.Context) (any, error) {
			return obj.Position, nil
		},
		nil,
		ec.marshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_position(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DefencePosition does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentDefenceInfo_teacher(ctx context.Context, field graphql.CollectedField, obj *model.StudentDefenceInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentDefenceInfo_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentDefenceInfo().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOStudentTeacherInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTeacherInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentDefenceInfo_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentDefenceInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentTeacherInfo_id(ctx, field)
			case "email":
				return ec.fieldContext_StudentTeacherInfo_email(ctx, field)
			case "username":
				return ec.fieldContext_StudentTeacherInfo_username(ctx, field)
			case "gender":
				return ec.fieldContext_StudentTeacherInfo_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_StudentTeacherInfo_majorCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentTeacherInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_title(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_studentCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_studentCode,
		func(ctx context.Context) (any, error) {
			return obj.StudentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_studentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_finalCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_finalCode,
		func(ctx context.Context) (any, error) {
			return obj.FinalCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_finalCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_gradeReviewCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_gradeReviewCode,
		func(ctx context.Context) (any, error) {
			return obj.GradeReviewCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_gradeReviewCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_midtermCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_midtermCode,
		func(ctx context.Context) (any, error) {
			return obj.MidtermCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_midtermCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_createdBy,
		func(ctx context.Context) (any, error) {
			return obj.CreatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_createdBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_updatedBy(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_updatedBy,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_updatedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_topicCouncil(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_topicCouncil,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentEnrollment().TopicCouncil(ctx, obj)
		},
		nil,
		ec.marshalOStudentTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_topicCouncil(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentTopicCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_StudentTopicCouncil_title(ctx, field)
			case "stage":
				return ec.fieldContext_StudentTopicCouncil_stage(ctx, field)
			case "topicCode":
				return ec.fieldContext_StudentTopicCouncil_topicCode(ctx, field)
			case "councilCode":
				return ec.fieldContext_StudentTopicCouncil_councilCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_StudentTopicCouncil_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_StudentTopicCouncil_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentTopicCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentTopicCouncil_updatedAt(ctx, field)
			case "topic":
				return ec.fieldContext_StudentTopicCouncil_topic(ctx, field)
			case "supervisors":
				return ec.fieldContext_StudentTopicCouncil_supervisors(ctx, field)
			case "council":
				return ec.fieldContext_StudentTopicCouncil_council(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentTopicCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_midterm(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_midterm,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentEnrollment().Midterm(ctx, obj)
		},
		nil,
		ec.marshalOMidterm2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMidterm,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_midterm(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Midterm_id(ctx, field)
			case "title":
				return ec.fieldContext_Midterm_title(ctx, field)
			case "grade":
				return ec.fieldContext_Midterm_grade(ctx, field)
			case "status":
				return ec.fieldContext_Midterm_status(ctx, field)
			case "feedback":
				return ec.fieldContext_Midterm_feedback(ctx, field)
			case "createdAt":
				return ec.fieldContext_Midterm_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Midterm_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Midterm_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Midterm_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Midterm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_final(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_final,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentEnrollment().Final(ctx, obj)
		},
		nil,
		ec.marshalOFinal2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFinal,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_final(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Final_id(ctx, field)
			case "title":
				return ec.fieldContext_Final_title(ctx, field)
			case "supervisorGrade":
				return ec.fieldContext_Final_supervisorGrade(ctx, field)
			case "departmentGrade":
				return ec.fieldContext_Final_departmentGrade(ctx, field)
			case "finalGrade":
				return ec.fieldContext_Final_finalGrade(ctx, field)
			case "status":
				return ec.fieldContext_Final_status(ctx, field)
			case "notes":
				return ec.fieldContext_Final_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_Final_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_Final_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Final_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Final_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Final_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Final", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_gradeReview(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_gradeReview,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentEnrollment().GradeReview(ctx, obj)
		},
		nil,
		ec.marshalOGradeReview2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeReview,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_gradeReview(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeReview_id(ctx, field)
			case "title":
				return ec.fieldContext_GradeReview_title(ctx, field)
			case "reviewGrade":
				return ec.fieldContext_GradeReview_reviewGrade(ctx, field)
			case "teacherCode":
				return ec.fieldContext_GradeReview_teacherCode(ctx, field)
			case "status":
				return ec.fieldContext_GradeReview_status(ctx, field)
			case "notes":
				return ec.fieldContext_GradeReview_notes(ctx, field)
			case "completionDate":
				return ec.fieldContext_GradeReview_completionDate(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeReview_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeReview_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeReview_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeReview_updatedBy(ctx, field)
			case "teacher":
				return ec.fieldContext_GradeReview_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeReview", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentEnrollment_gradeDefences(ctx context.Context, field graphql.CollectedField, obj *model.StudentEnrollment) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentEnrollment_gradeDefences,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentEnrollment().GradeDefences(ctx, obj)
		},
		nil,
		ec.marshalOStudentGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentGradeDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentEnrollment_gradeDefences(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentEnrollment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentGradeDefence_id(ctx, field)
			case "defenceCode":
				return ec.fieldContext_StudentGradeDefence_defenceCode(ctx, field)
			case "enrollmentCode":
				return ec.fieldContext_StudentGradeDefence_enrollmentCode(ctx, field)
			case "note":
				return ec.fieldContext_StudentGradeDefence_note(ctx, field)
			case "totalScore":
				return ec.fieldContext_StudentGradeDefence_totalScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentGradeDefence_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentGradeDefence_updatedAt(ctx, field)
			case "criteria":
				return ec.fieldContext_StudentGradeDefence_criteria(ctx, field)
			case "defence":
				return ec.fieldContext_StudentGradeDefence_defence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentGradeDefence", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_defenceCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_defenceCode,
		func(ctx context.Context) (any, error) {
			return obj.DefenceCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_defenceCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_enrollmentCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_enrollmentCode,
		func(ctx context.Context) (any, error) {
			return obj.EnrollmentCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_enrollmentCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_note(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_note,
		func(ctx context.Context) (any, error) {
			return obj.Note, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_note(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_totalScore(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_totalScore,
		func(ctx context.Context) (any, error) {
			return obj.TotalScore, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_totalScore(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_criteria(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_criteria,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentGradeDefence().Criteria(ctx, obj)
		},
		nil,
		ec.marshalOGradeDefenceCriterion2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐGradeDefenceCriterionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_criteria(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GradeDefenceCriterion_id(ctx, field)
			case "gradeDefenceCode":
				return ec.fieldContext_GradeDefenceCriterion_gradeDefenceCode(ctx, field)
			case "name":
				return ec.fieldContext_GradeDefenceCriterion_name(ctx, field)
			case "score":
				return ec.fieldContext_GradeDefenceCriterion_score(ctx, field)
			case "maxScore":
				return ec.fieldContext_GradeDefenceCriterion_maxScore(ctx, field)
			case "createdAt":
				return ec.fieldContext_GradeDefenceCriterion_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_GradeDefenceCriterion_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_GradeDefenceCriterion_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_GradeDefenceCriterion_updatedBy(ctx, field)
			case "gradeDefence":
				return ec.fieldContext_GradeDefenceCriterion_gradeDefence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GradeDefenceCriterion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentGradeDefence_defence(ctx context.Context, field graphql.CollectedField, obj *model.StudentGradeDefence) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentGradeDefence_defence,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentGradeDefence().Defence(ctx, obj)
		},
		nil,
		ec.marshalOStudentDefenceInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentGradeDefence_defence(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentGradeDefence",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentDefenceInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_StudentDefenceInfo_title(ctx, field)
			case "position":
				return ec.fieldContext_StudentDefenceInfo_position(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentDefenceInfo_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentDefenceInfo_updatedAt(ctx, field)
			case "teacher":
				return ec.fieldContext_StudentDefenceInfo_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentDefenceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTeacherInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentTeacherInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTeacherInfo_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTeacherInfo_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTeacherInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTeacherInfo_email(ctx context.Context, field graphql.CollectedField, obj *model.StudentTeacherInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTeacherInfo_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTeacherInfo_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTeacherInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTeacherInfo_username(ctx context.Context, field graphql.CollectedField, obj *model.StudentTeacherInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTeacherInfo_username,
		func(ctx context.Context) (any, error) {
			return obj.Username, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTeacherInfo_username(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTeacherInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTeacherInfo_gender(ctx context.Context, field graphql.CollectedField, obj *model.StudentTeacherInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTeacherInfo_gender,
		func(ctx context.Context) (any, error) {
			return obj.Gender, nil
		},
		nil,
		ec.marshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTeacherInfo_gender(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTeacherInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTeacherInfo_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTeacherInfo) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTeacherInfo_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTeacherInfo_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTeacherInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_title(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_majorCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_majorCode,
		func(ctx context.Context) (any, error) {
			return obj.MajorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_majorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_semesterCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_semesterCode,
		func(ctx context.Context) (any, error) {
			return obj.SemesterCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_semesterCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_status(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_percentStage1(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_percentStage1,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage1, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_percentStage1(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_percentStage2(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_percentStage2,
		func(ctx context.Context) (any, error) {
			return obj.PercentStage2, nil
		},
		nil,
		ec.marshalOInt2ᚖint32,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_percentStage2(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_major(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_major,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopic().Major(ctx, obj)
		},
		nil,
		ec.marshalOMajorInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐMajorInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_major(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MajorInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_MajorInfo_title(ctx, field)
			case "facultyCode":
				return ec.fieldContext_MajorInfo_facultyCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MajorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_semester(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_semester,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopic().Semester(ctx, obj)
		},
		nil,
		ec.marshalOSemesterInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_semester(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SemesterInfo_id(ctx, field)
			case "title":
				return ec.fieldContext_SemesterInfo_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SemesterInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopic_files(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopic) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopic_files,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopic().Files(ctx, obj)
		},
		nil,
		ec.marshalOFile2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFileᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopic_files(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopic",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_File_id(ctx, field)
			case "title":
				return ec.fieldContext_File_title(ctx, field)
			case "file":
				return ec.fieldContext_File_file(ctx, field)
			case "status":
				return ec.fieldContext_File_status(ctx, field)
			case "table":
				return ec.fieldContext_File_table(ctx, field)
			case "option":
				return ec.fieldContext_File_option(ctx, field)
			case "tableId":
				return ec.fieldContext_File_tableId(ctx, field)
			case "createdAt":
				return ec.fieldContext_File_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_File_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_File_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_File_updatedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type File", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_title(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_title,
		func(ctx context.Context) (any, error) {
			return obj.Title, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_title(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_stage(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_stage,
		func(ctx context.Context) (any, error) {
			return obj.Stage, nil
		},
		nil,
		ec.marshalNTopicStage2thailyᚋsrcᚋgraphᚋmodelᚐTopicStage,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_stage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopicStage does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_topicCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_topicCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_topicCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_councilCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_councilCode,
		func(ctx context.Context) (any, error) {
			return obj.CouncilCode, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_councilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_timeStart(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_timeStart,
		func(ctx context.Context) (any, error) {
			return obj.TimeStart, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_timeStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_timeEnd(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_timeEnd,
		func(ctx context.Context) (any, error) {
			return obj.TimeEnd, nil
		},
		nil,
		ec.marshalNTime2timeᚐTime,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_timeEnd(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_topic(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_topic,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopicCouncil().Topic(ctx, obj)
		},
		nil,
		ec.marshalOStudentTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopic,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_topic(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentTopic_id(ctx, field)
			case "title":
				return ec.fieldContext_StudentTopic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_StudentTopic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_StudentTopic_semesterCode(ctx, field)
			case "status":
				return ec.fieldContext_StudentTopic_status(ctx, field)
			case "percentStage1":
				return ec.fieldContext_StudentTopic_percentStage1(ctx, field)
			case "percentStage2":
				return ec.fieldContext_StudentTopic_percentStage2(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentTopic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentTopic_updatedAt(ctx, field)
			case "major":
				return ec.fieldContext_StudentTopic_major(ctx, field)
			case "semester":
				return ec.fieldContext_StudentTopic_semester(ctx, field)
			case "files":
				return ec.fieldContext_StudentTopic_files(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentTopic", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_supervisors(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_supervisors,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopicCouncil().Supervisors(ctx, obj)
		},
		nil,
		ec.marshalOStudentTopicSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicSupervisorᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_supervisors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentTopicSupervisor_id(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_StudentTopicSupervisor_teacherSupervisorCode(ctx, field)
			case "topicCouncilCode":
				return ec.fieldContext_StudentTopicSupervisor_topicCouncilCode(ctx, field)
			case "teacher":
				return ec.fieldContext_StudentTopicSupervisor_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentTopicSupervisor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicCouncil_council(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicCouncil) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicCouncil_council,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopicCouncil().Council(ctx, obj)
		},
		nil,
		ec.marshalOStudentCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentCouncil,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicCouncil_council(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicCouncil",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentCouncil_id(ctx, field)
			case "title":
				return ec.fieldContext_StudentCouncil_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_StudentCouncil_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_StudentCouncil_semesterCode(ctx, field)
			case "timeStart":
				return ec.fieldContext_StudentCouncil_timeStart(ctx, field)
			case "createdAt":
				return ec.fieldContext_StudentCouncil_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_StudentCouncil_updatedAt(ctx, field)
			case "major":
				return ec.fieldContext_StudentCouncil_major(ctx, field)
			case "semester":
				return ec.fieldContext_StudentCouncil_semester(ctx, field)
			case "defences":
				return ec.fieldContext_StudentCouncil_defences(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentCouncil", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicSupervisor_id(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicSupervisor_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicSupervisor_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicSupervisor_teacherSupervisorCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicSupervisor_teacherSupervisorCode,
		func(ctx context.Context) (any, error) {
			return obj.TeacherSupervisorCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicSupervisor_teacherSupervisorCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicSupervisor_topicCouncilCode(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicSupervisor_topicCouncilCode,
		func(ctx context.Context) (any, error) {
			return obj.TopicCouncilCode, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_StudentTopicSupervisor_topicCouncilCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicSupervisor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StudentTopicSupervisor_teacher(ctx context.Context, field graphql.CollectedField, obj *model.StudentTopicSupervisor) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_StudentTopicSupervisor_teacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.StudentTopicSupervisor().Teacher(ctx, obj)
		},
		nil,
		ec.marshalOStudentTeacherInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTeacherInfo,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_StudentTopicSupervisor_teacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StudentTopicSupervisor",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_StudentTeacherInfo_id(ctx, field)
			case "email":
				return ec.fieldContext_StudentTeacherInfo_email(ctx, field)
			case "username":
				return ec.fieldContext_StudentTeacherInfo_username(ctx, field)
			case "gender":
				return ec.fieldContext_StudentTeacherInfo_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_StudentTeacherInfo_majorCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StudentTeacherInfo", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputUpdateStudentProfileInput(ctx context.Context, obj any) (model.UpdateStudentProfileInput, error) {
	var it model.UpdateStudentProfileInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "phone", "username"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phone":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phone"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Phone = data
		case "username":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Username = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadFileInput(ctx context.Context, obj any) (model.UploadFileInput, error) {
	var it model.UploadFileInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "file", "tableId", "option"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "file":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.File = data
		case "tableId":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tableId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TableID = data
		case "option":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("option"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Option = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var studentCouncilImplementors = []string{"StudentCouncil"}

func (ec *executionContext) _StudentCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.StudentCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentCouncil")
		case "id":
			out.Values[i] = ec._StudentCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._StudentCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._StudentCouncil_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._StudentCouncil_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeStart":
			out.Values[i] = ec._StudentCouncil_timeStart(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._StudentCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentCouncil_updatedAt(ctx, field, obj)
		case "major":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentCouncil_major(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "semester":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentCouncil_semester(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "defences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentCouncil_defences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentDefenceInfoImplementors = []string{"StudentDefenceInfo"}

func (ec *executionContext) _StudentDefenceInfo(ctx context.Context, sel ast.SelectionSet, obj *model.StudentDefenceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentDefenceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentDefenceInfo")
		case "id":
			out.Values[i] = ec._StudentDefenceInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._StudentDefenceInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "position":
			out.Values[i] = ec._StudentDefenceInfo_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._StudentDefenceInfo_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentDefenceInfo_updatedAt(ctx, field, obj)
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentDefenceInfo_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentEnrollmentImplementors = []string{"StudentEnrollment"}

func (ec *executionContext) _StudentEnrollment(ctx context.Context, sel ast.SelectionSet, obj *model.StudentEnrollment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentEnrollmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentEnrollment")
		case "id":
			out.Values[i] = ec._StudentEnrollment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._StudentEnrollment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "studentCode":
			out.Values[i] = ec._StudentEnrollment_studentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._StudentEnrollment_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "finalCode":
			out.Values[i] = ec._StudentEnrollment_finalCode(ctx, field, obj)
		case "gradeReviewCode":
			out.Values[i] = ec._StudentEnrollment_gradeReviewCode(ctx, field, obj)
		case "midtermCode":
			out.Values[i] = ec._StudentEnrollment_midtermCode(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._StudentEnrollment_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentEnrollment_updatedAt(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._StudentEnrollment_createdBy(ctx, field, obj)
		case "updatedBy":
			out.Values[i] = ec._StudentEnrollment_updatedBy(ctx, field, obj)
		case "topicCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentEnrollment_topicCouncil(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "midterm":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentEnrollment_midterm(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "final":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentEnrollment_final(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeReview":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentEnrollment_gradeReview(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "gradeDefences":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentEnrollment_gradeDefences(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentGradeDefenceImplementors = []string{"StudentGradeDefence"}

func (ec *executionContext) _StudentGradeDefence(ctx context.Context, sel ast.SelectionSet, obj *model.StudentGradeDefence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentGradeDefenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentGradeDefence")
		case "id":
			out.Values[i] = ec._StudentGradeDefence_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "defenceCode":
			out.Values[i] = ec._StudentGradeDefence_defenceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "enrollmentCode":
			out.Values[i] = ec._StudentGradeDefence_enrollmentCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "note":
			out.Values[i] = ec._StudentGradeDefence_note(ctx, field, obj)
		case "totalScore":
			out.Values[i] = ec._StudentGradeDefence_totalScore(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._StudentGradeDefence_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentGradeDefence_updatedAt(ctx, field, obj)
		case "criteria":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentGradeDefence_criteria(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "defence":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentGradeDefence_defence(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentTeacherInfoImplementors = []string{"StudentTeacherInfo"}

func (ec *executionContext) _StudentTeacherInfo(ctx context.Context, sel ast.SelectionSet, obj *model.StudentTeacherInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentTeacherInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentTeacherInfo")
		case "id":
			out.Values[i] = ec._StudentTeacherInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._StudentTeacherInfo_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "username":
			out.Values[i] = ec._StudentTeacherInfo_username(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gender":
			out.Values[i] = ec._StudentTeacherInfo_gender(ctx, field, obj)
		case "majorCode":
			out.Values[i] = ec._StudentTeacherInfo_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentTopicImplementors = []string{"StudentTopic"}

func (ec *executionContext) _StudentTopic(ctx context.Context, sel ast.SelectionSet, obj *model.StudentTopic) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentTopicImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentTopic")
		case "id":
			out.Values[i] = ec._StudentTopic_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._StudentTopic_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "majorCode":
			out.Values[i] = ec._StudentTopic_majorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "semesterCode":
			out.Values[i] = ec._StudentTopic_semesterCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			out.Values[i] = ec._StudentTopic_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "percentStage1":
			out.Values[i] = ec._StudentTopic_percentStage1(ctx, field, obj)
		case "percentStage2":
			out.Values[i] = ec._StudentTopic_percentStage2(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._StudentTopic_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentTopic_updatedAt(ctx, field, obj)
		case "major":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopic_major(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "semester":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopic_semester(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "files":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopic_files(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentTopicCouncilImplementors = []string{"StudentTopicCouncil"}

func (ec *executionContext) _StudentTopicCouncil(ctx context.Context, sel ast.SelectionSet, obj *model.StudentTopicCouncil) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentTopicCouncilImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentTopicCouncil")
		case "id":
			out.Values[i] = ec._StudentTopicCouncil_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "title":
			out.Values[i] = ec._StudentTopicCouncil_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "stage":
			out.Values[i] = ec._StudentTopicCouncil_stage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCode":
			out.Values[i] = ec._StudentTopicCouncil_topicCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "councilCode":
			out.Values[i] = ec._StudentTopicCouncil_councilCode(ctx, field, obj)
		case "timeStart":
			out.Values[i] = ec._StudentTopicCouncil_timeStart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "timeEnd":
			out.Values[i] = ec._StudentTopicCouncil_timeEnd(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._StudentTopicCouncil_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._StudentTopicCouncil_updatedAt(ctx, field, obj)
		case "topic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopicCouncil_topic(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "supervisors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopicCouncil_supervisors(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "council":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopicCouncil_council(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var studentTopicSupervisorImplementors = []string{"StudentTopicSupervisor"}

func (ec *executionContext) _StudentTopicSupervisor(ctx context.Context, sel ast.SelectionSet, obj *model.StudentTopicSupervisor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, studentTopicSupervisorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StudentTopicSupervisor")
		case "id":
			out.Values[i] = ec._StudentTopicSupervisor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teacherSupervisorCode":
			out.Values[i] = ec._StudentTopicSupervisor_teacherSupervisorCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "topicCouncilCode":
			out.Values[i] = ec._StudentTopicSupervisor_topicCouncilCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "teacher":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._StudentTopicSupervisor_teacher(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNStudentDefenceInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfo(ctx context.Context, sel ast.SelectionSet, v *model.StudentDefenceInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentDefenceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentEnrollmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StudentEnrollment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentEnrollment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNStudentEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.StudentEnrollment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentGradeDefence(ctx context.Context, sel ast.SelectionSet, v *model.StudentGradeDefence) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentGradeDefence(ctx, sel, v)
}

func (ec *executionContext) marshalNStudentTopicSupervisor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicSupervisor(ctx context.Context, sel ast.SelectionSet, v *model.StudentTopicSupervisor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._StudentTopicSupervisor(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateStudentProfileInput2thailyᚋsrcᚋgraphᚋmodelᚐUpdateStudentProfileInput(ctx context.Context, v any) (model.UpdateStudentProfileInput, error) {
	res, err := ec.unmarshalInputUpdateStudentProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUploadFileInput2thailyᚋsrcᚋgraphᚋmodelᚐUploadFileInput(ctx context.Context, v any) (model.UploadFileInput, error) {
	res, err := ec.unmarshalInputUploadFileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStudentCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentCouncil(ctx context.Context, sel ast.SelectionSet, v *model.StudentCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentDefenceInfo2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StudentDefenceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentDefenceInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStudentDefenceInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentDefenceInfo(ctx context.Context, sel ast.SelectionSet, v *model.StudentDefenceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentDefenceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentEnrollment2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentEnrollment(ctx context.Context, sel ast.SelectionSet, v *model.StudentEnrollment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentEnrollment(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentGradeDefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentGradeDefenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StudentGradeDefence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentGradeDefence2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentGradeDefence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOStudentTeacherInfo2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTeacherInfo(ctx context.Context, sel ast.SelectionSet, v *model.StudentTeacherInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentTeacherInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentTopic2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopic(ctx context.Context, sel ast.SelectionSet, v *model.StudentTopic) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentTopic(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentTopicCouncil2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicCouncil(ctx context.Context, sel ast.SelectionSet, v *model.StudentTopicCouncil) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StudentTopicCouncil(ctx, sel, v)
}

func (ec *executionContext) marshalOStudentTopicSupervisor2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicSupervisorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.StudentTopicSupervisor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNStudentTopicSupervisor2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudentTopicSupervisor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

// endregion ***************************** type.gotpl *****************************
