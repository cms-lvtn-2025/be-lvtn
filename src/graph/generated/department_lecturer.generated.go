// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"thaily/src/graph/model"

	"github.com/99designs/gqlgen/graphql"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateCouncilInput(ctx context.Context, obj any) (model.CreateCouncilInput, error) {
	var it model.CreateCouncilInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "majorCode", "semesterCode"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "majorCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("majorCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MajorCode = data
		case "semesterCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("semesterCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SemesterCode = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateDefenceInput(ctx context.Context, obj any) (model.CreateDefenceInput, error) {
	var it model.CreateDefenceInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"title", "councilCode", "teacherCode", "position"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "title":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "councilCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("councilCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CouncilCode = data
		case "teacherCode":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("teacherCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TeacherCode = data
		case "position":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateCouncilInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateCouncilInput(ctx context.Context, v any) (model.CreateCouncilInput, error) {
	res, err := ec.unmarshalInputCreateCouncilInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateDefenceInput2thailyᚋsrcᚋgraphᚋmodelᚐCreateDefenceInput(ctx context.Context, v any) (model.CreateDefenceInput, error) {
	res, err := ec.unmarshalInputCreateDefenceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
