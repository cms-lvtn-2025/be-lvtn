// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"strconv"
	"sync/atomic"
	"thaily/src/graph/model"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type QueryResolver interface {
	GetInfoStudent(ctx context.Context) (*model.Student, error)
	GetInfoTeacher(ctx context.Context) (*model.Teacher, error)
	GetListTopic(ctx context.Context, search model.SearchRequestInput) ([]*model.Topic, error)
	GetListEnrollment(ctx context.Context, search model.SearchRequestInput) ([]*model.Enrollment, error)
	GetListSemester(ctx context.Context, search model.SearchRequestInput) ([]*model.Semester, error)
	GetListCouncil(ctx context.Context, search model.SearchRequestInput) ([]*model.Council, error)
	GetListDefence(ctx context.Context, search model.SearchRequestInput) ([]*model.Defence, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListCouncil_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListDefence_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListEnrollment_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListSemester_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getListTopic_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "search", ec.unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput)
	if err != nil {
		return nil, err
	}
	args["search"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Query_getInfoStudent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getInfoStudent,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetInfoStudent(ctx)
		},
		nil,
		ec.marshalNStudent2ᚖthailyᚋsrcᚋgraphᚋmodelᚐStudent,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getInfoStudent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Student_id(ctx, field)
			case "email":
				return ec.fieldContext_Student_email(ctx, field)
			case "phone":
				return ec.fieldContext_Student_phone(ctx, field)
			case "username":
				return ec.fieldContext_Student_username(ctx, field)
			case "gender":
				return ec.fieldContext_Student_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Student_majorCode(ctx, field)
			case "classCode":
				return ec.fieldContext_Student_classCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Student_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Student_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Student_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Student_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Student_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Student_major(ctx, field)
			case "semester":
				return ec.fieldContext_Student_semester(ctx, field)
			case "enrollments":
				return ec.fieldContext_Student_enrollments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Student", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getInfoTeacher(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getInfoTeacher,
		func(ctx context.Context) (any, error) {
			return ec.resolvers.Query().GetInfoTeacher(ctx)
		},
		nil,
		ec.marshalNTeacher2ᚖthailyᚋsrcᚋgraphᚋmodelᚐTeacher,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_getInfoTeacher(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Teacher_id(ctx, field)
			case "email":
				return ec.fieldContext_Teacher_email(ctx, field)
			case "username":
				return ec.fieldContext_Teacher_username(ctx, field)
			case "gender":
				return ec.fieldContext_Teacher_gender(ctx, field)
			case "majorCode":
				return ec.fieldContext_Teacher_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Teacher_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Teacher_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Teacher_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Teacher_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Teacher_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Teacher_major(ctx, field)
			case "semester":
				return ec.fieldContext_Teacher_semester(ctx, field)
			case "roles":
				return ec.fieldContext_Teacher_roles(ctx, field)
			case "topicsSupervised":
				return ec.fieldContext_Teacher_topicsSupervised(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Teacher", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListTopic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getListTopic,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetListTopic(ctx, fc.Args["search"].(model.SearchRequestInput))
		},
		nil,
		ec.marshalOTopic2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐTopicᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getListTopic(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Topic_total(ctx, field)
			case "id":
				return ec.fieldContext_Topic_id(ctx, field)
			case "title":
				return ec.fieldContext_Topic_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Topic_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Topic_semesterCode(ctx, field)
			case "teacherSupervisorCode":
				return ec.fieldContext_Topic_teacherSupervisorCode(ctx, field)
			case "status":
				return ec.fieldContext_Topic_status(ctx, field)
			case "timeStart":
				return ec.fieldContext_Topic_timeStart(ctx, field)
			case "timeEnd":
				return ec.fieldContext_Topic_timeEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_Topic_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Topic_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Topic_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Topic_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Topic_major(ctx, field)
			case "enrollment":
				return ec.fieldContext_Topic_enrollment(ctx, field)
			case "semester":
				return ec.fieldContext_Topic_semester(ctx, field)
			case "teacherSupervisor":
				return ec.fieldContext_Topic_teacherSupervisor(ctx, field)
			case "files":
				return ec.fieldContext_Topic_files(ctx, field)
			case "schedule":
				return ec.fieldContext_Topic_schedule(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Topic", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListTopic_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListEnrollment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getListEnrollment,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetListEnrollment(ctx, fc.Args["search"].(model.SearchRequestInput))
		},
		nil,
		ec.marshalOEnrollment2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐEnrollmentᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getListEnrollment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Enrollment_id(ctx, field)
			case "title":
				return ec.fieldContext_Enrollment_title(ctx, field)
			case "studentCode":
				return ec.fieldContext_Enrollment_studentCode(ctx, field)
			case "midtermCode":
				return ec.fieldContext_Enrollment_midtermCode(ctx, field)
			case "topicCode":
				return ec.fieldContext_Enrollment_topicCode(ctx, field)
			case "finalCode":
				return ec.fieldContext_Enrollment_finalCode(ctx, field)
			case "gradeCode":
				return ec.fieldContext_Enrollment_gradeCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Enrollment_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Enrollment_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Enrollment_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Enrollment_updatedBy(ctx, field)
			case "student":
				return ec.fieldContext_Enrollment_student(ctx, field)
			case "midterm":
				return ec.fieldContext_Enrollment_midterm(ctx, field)
			case "final":
				return ec.fieldContext_Enrollment_final(ctx, field)
			case "topic":
				return ec.fieldContext_Enrollment_topic(ctx, field)
			case "gradeDefence":
				return ec.fieldContext_Enrollment_gradeDefence(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Enrollment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListEnrollment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListSemester(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getListSemester,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetListSemester(ctx, fc.Args["search"].(model.SearchRequestInput))
		},
		nil,
		ec.marshalOSemester2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐSemesterᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getListSemester(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Semester_id(ctx, field)
			case "title":
				return ec.fieldContext_Semester_title(ctx, field)
			case "createdAt":
				return ec.fieldContext_Semester_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Semester_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Semester_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Semester_updatedBy(ctx, field)
			case "students":
				return ec.fieldContext_Semester_students(ctx, field)
			case "teachers":
				return ec.fieldContext_Semester_teachers(ctx, field)
			case "topics":
				return ec.fieldContext_Semester_topics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Semester", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListSemester_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListCouncil(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getListCouncil,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetListCouncil(ctx, fc.Args["search"].(model.SearchRequestInput))
		},
		nil,
		ec.marshalOCouncil2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐCouncilᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getListCouncil(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "total":
				return ec.fieldContext_Council_total(ctx, field)
			case "id":
				return ec.fieldContext_Council_id(ctx, field)
			case "title":
				return ec.fieldContext_Council_title(ctx, field)
			case "majorCode":
				return ec.fieldContext_Council_majorCode(ctx, field)
			case "semesterCode":
				return ec.fieldContext_Council_semesterCode(ctx, field)
			case "createdAt":
				return ec.fieldContext_Council_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Council_updatedAt(ctx, field)
			case "createdBy":
				return ec.fieldContext_Council_createdBy(ctx, field)
			case "updatedBy":
				return ec.fieldContext_Council_updatedBy(ctx, field)
			case "major":
				return ec.fieldContext_Council_major(ctx, field)
			case "semester":
				return ec.fieldContext_Council_semester(ctx, field)
			case "defences":
				return ec.fieldContext_Council_defences(ctx, field)
			case "schedules":
				return ec.fieldContext_Council_schedules(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Council", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListCouncil_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getListDefence(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_getListDefence,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().GetListDefence(ctx, fc.Args["search"].(model.SearchRequestInput))
		},
		nil,
		ec.marshalODefence2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐDefenceᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_getListDefence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Defence_id(ctx, field)
			case "title":
				return ec.fieldContext_Defence_title(ctx, field)
			case "councilCode":
				return ec.fieldContext_Defence_councilCode(ctx, field)
			case "teacherCode":
				return ec.fieldContext_Defence_teacherCode(ctx, field)
			case "position":
				return ec.fieldContext_Defence_position(ctx, field)
			case "council":
				return ec.fieldContext_Defence_council(ctx, field)
			case "teacher":
				return ec.fieldContext_Defence_teacher(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Defence", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getListDefence_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputFilterConditionInput(ctx context.Context, obj any) (model.FilterConditionInput, error) {
	var it model.FilterConditionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"field", "operator", "values"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		case "operator":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			data, err := ec.unmarshalNFilterOperator2thailyᚋsrcᚋgraphᚋmodelᚐFilterOperator(ctx, v)
			if err != nil {
				return it, err
			}
			it.Operator = data
		case "values":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Values = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterCriteriaInput(ctx context.Context, obj any) (model.FilterCriteriaInput, error) {
	var it model.FilterCriteriaInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"condition", "group"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "condition":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("condition"))
			data, err := ec.unmarshalOFilterConditionInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterConditionInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Condition = data
		case "group":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("group"))
			data, err := ec.unmarshalOFilterGroupInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterGroupInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Group = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterGroupInput(ctx context.Context, obj any) (model.FilterGroupInput, error) {
	var it model.FilterGroupInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["logic"]; !present {
		asMap["logic"] = "AND"
	}

	fieldsInOrder := [...]string{"logic", "filters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "logic":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logic"))
			data, err := ec.unmarshalOLogicalCondition2ᚖthailyᚋsrcᚋgraphᚋmodelᚐLogicalCondition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Logic = data
		case "filters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
			data, err := ec.unmarshalNFilterCriteriaInput2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filters = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPaginationInput(ctx context.Context, obj any) (model.PaginationInput, error) {
	var it model.PaginationInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["page"]; !present {
		asMap["page"] = 1
	}
	if _, present := asMap["pageSize"]; !present {
		asMap["pageSize"] = 20
	}
	if _, present := asMap["descending"]; !present {
		asMap["descending"] = false
	}

	fieldsInOrder := [...]string{"page", "pageSize", "sortBy", "descending"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "page":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "pageSize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2ᚖint32(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "sortBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortBy = data
		case "descending":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("descending"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Descending = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchRequestInput(ctx context.Context, obj any) (model.SearchRequestInput, error) {
	var it model.SearchRequestInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pagination", "filters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pagination":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
			data, err := ec.unmarshalOPaginationInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐPaginationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pagination = data
		case "filters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filters"))
			data, err := ec.unmarshalOFilterCriteriaInput2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Filters = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getInfoStudent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInfoStudent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getInfoTeacher":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getInfoTeacher(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getListTopic":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListTopic(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getListEnrollment":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListEnrollment(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getListSemester":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListSemester(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getListCouncil":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListCouncil(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getListDefence":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getListDefence(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition(ctx context.Context, v any) (model.DefencePosition, error) {
	var res model.DefencePosition
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDefencePosition2thailyᚋsrcᚋgraphᚋmodelᚐDefencePosition(ctx context.Context, sel ast.SelectionSet, v model.DefencePosition) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFileStatus2thailyᚋsrcᚋgraphᚋmodelᚐFileStatus(ctx context.Context, v any) (model.FileStatus, error) {
	var res model.FileStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileStatus2thailyᚋsrcᚋgraphᚋmodelᚐFileStatus(ctx context.Context, sel ast.SelectionSet, v model.FileStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFileTable2thailyᚋsrcᚋgraphᚋmodelᚐFileTable(ctx context.Context, v any) (model.FileTable, error) {
	var res model.FileTable
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFileTable2thailyᚋsrcᚋgraphᚋmodelᚐFileTable(ctx context.Context, sel ast.SelectionSet, v model.FileTable) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFilterCriteriaInput2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInputᚄ(ctx context.Context, v any) ([]*model.FilterCriteriaInput, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.FilterCriteriaInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFilterCriteriaInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFilterCriteriaInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInput(ctx context.Context, v any) (*model.FilterCriteriaInput, error) {
	res, err := ec.unmarshalInputFilterCriteriaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFilterOperator2thailyᚋsrcᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, v any) (model.FilterOperator, error) {
	var res model.FilterOperator
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFilterOperator2thailyᚋsrcᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, sel ast.SelectionSet, v model.FilterOperator) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNFinalStatus2thailyᚋsrcᚋgraphᚋmodelᚐFinalStatus(ctx context.Context, v any) (model.FinalStatus, error) {
	var res model.FinalStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFinalStatus2thailyᚋsrcᚋgraphᚋmodelᚐFinalStatus(ctx context.Context, sel ast.SelectionSet, v model.FinalStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMidtermStatus2thailyᚋsrcᚋgraphᚋmodelᚐMidtermStatus(ctx context.Context, v any) (model.MidtermStatus, error) {
	var res model.MidtermStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMidtermStatus2thailyᚋsrcᚋgraphᚋmodelᚐMidtermStatus(ctx context.Context, sel ast.SelectionSet, v model.MidtermStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNRoleSystemRole2thailyᚋsrcᚋgraphᚋmodelᚐRoleSystemRole(ctx context.Context, v any) (model.RoleSystemRole, error) {
	var res model.RoleSystemRole
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRoleSystemRole2thailyᚋsrcᚋgraphᚋmodelᚐRoleSystemRole(ctx context.Context, sel ast.SelectionSet, v model.RoleSystemRole) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSearchRequestInput2thailyᚋsrcᚋgraphᚋmodelᚐSearchRequestInput(ctx context.Context, v any) (model.SearchRequestInput, error) {
	res, err := ec.unmarshalInputSearchRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus(ctx context.Context, v any) (model.TopicStatus, error) {
	var res model.TopicStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTopicStatus2thailyᚋsrcᚋgraphᚋmodelᚐTopicStatus(ctx context.Context, sel ast.SelectionSet, v model.TopicStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOFilterConditionInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterConditionInput(ctx context.Context, v any) (*model.FilterConditionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterConditionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFilterCriteriaInput2ᚕᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInputᚄ(ctx context.Context, v any) ([]*model.FilterCriteriaInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.FilterCriteriaInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFilterCriteriaInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterCriteriaInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFilterGroupInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐFilterGroupInput(ctx context.Context, v any) (*model.FilterGroupInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterGroupInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx context.Context, v any) (*model.Gender, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Gender)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2ᚖthailyᚋsrcᚋgraphᚋmodelᚐGender(ctx context.Context, sel ast.SelectionSet, v *model.Gender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOLogicalCondition2ᚖthailyᚋsrcᚋgraphᚋmodelᚐLogicalCondition(ctx context.Context, v any) (*model.LogicalCondition, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.LogicalCondition)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLogicalCondition2ᚖthailyᚋsrcᚋgraphᚋmodelᚐLogicalCondition(ctx context.Context, sel ast.SelectionSet, v *model.LogicalCondition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPaginationInput2ᚖthailyᚋsrcᚋgraphᚋmodelᚐPaginationInput(ctx context.Context, v any) (*model.PaginationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPaginationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(*v)
	return res
}

// endregion ***************************** type.gotpl *****************************
